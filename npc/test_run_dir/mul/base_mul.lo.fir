circuit base_mul :
  module base_mul :
    input clock : Clock
    input reset : UInt<1>
    input io_mul_valid : UInt<1>
    input io_flush : UInt<1>
    input io_mulw : UInt<1>
    input io_mul_signed : UInt<2>
    input io_multiplicand : UInt<64>
    input io_multiplier : UInt<64>
    output io_mul_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_result_hi : UInt<64>
    output io_result_lo : UInt<64>

    reg state : UInt<1>, clock with :
      reset => (UInt<1>("h0"), state) @[base_mul.scala 146:24]
    node _state_T = bits(io_flush, 0, 0) @[base_mul.scala 148:32]
    node _state_T_1 = bits(io_mul_valid, 0, 0) @[base_mul.scala 148:63]
    node _state_T_2 = mux(_state_T_1, UInt<1>("h1"), UInt<1>("h0")) @[base_mul.scala 148:49]
    node _state_T_3 = mux(_state_T, UInt<1>("h0"), _state_T_2) @[base_mul.scala 148:22]
    node _state_T_4 = bits(io_flush, 0, 0) @[base_mul.scala 149:32]
    node _state_T_5 = bits(io_out_valid, 0, 0) @[base_mul.scala 149:65]
    node _state_T_6 = mux(_state_T_5, UInt<1>("h0"), UInt<1>("h1")) @[base_mul.scala 149:49]
    node _state_T_7 = mux(_state_T_4, UInt<1>("h0"), _state_T_6) @[base_mul.scala 149:22]
    node _state_T_8 = eq(UInt<1>("h1"), state) @[Mux.scala 81:61]
    node _state_T_9 = mux(_state_T_8, _state_T_7, _state_T_3) @[Mux.scala 81:58]
    reg mulBits : UInt<6>, clock with :
      reset => (UInt<1>("h0"), mulBits) @[base_mul.scala 151:26]
    node _next_valid_T = bits(io_mul_valid, 0, 0) @[base_mul.scala 154:31]
    node _next_valid_T_1 = bits(io_mul_ready, 0, 0) @[base_mul.scala 154:53]
    node _next_valid_T_2 = and(_next_valid_T, _next_valid_T_1) @[base_mul.scala 154:38]
    node _running_T = eq(state, UInt<1>("h1")) @[base_mul.scala 156:22]
    node _mulBits_T = bits(io_mulw, 0, 0) @[base_mul.scala 158:41]
    node next_valid = _next_valid_T_2 @[base_mul.scala 153:26 154:15]
    node _mulBits_T_1 = and(next_valid, _mulBits_T) @[base_mul.scala 158:31]
    node _mulBits_T_2 = mux(_mulBits_T_1, UInt<5>("h1f"), UInt<6>("h3f")) @[base_mul.scala 158:19]
    reg a : UInt<129>, clock with :
      reset => (UInt<1>("h0"), a) @[base_mul.scala 160:20]
    reg b : UInt<129>, clock with :
      reset => (UInt<1>("h0"), b) @[base_mul.scala 161:20]
    reg result : UInt<130>, clock with :
      reset => (UInt<1>("h0"), result) @[base_mul.scala 162:25]
    reg cnt : UInt<68>, clock with :
      reset => (UInt<1>("h0"), cnt) @[base_mul.scala 163:22]
    node _a_T = dshl(a, UInt<1>("h1")) @[base_mul.scala 165:24]
    node _a_T_1 = eq(next_valid, UInt<1>("h0")) @[base_mul.scala 166:13]
    node _a_T_2 = bits(io_mul_signed, 1, 1) @[base_mul.scala 167:27]
    node _a_T_3 = and(_a_T_2, io_mulw) @[base_mul.scala 167:30]
    node _a_T_4 = bits(_a_T_3, 0, 0) @[base_mul.scala 167:40]
    node _a_T_5 = bits(io_multiplicand, 31, 31) @[base_mul.scala 167:74]
    node _a_T_6 = bits(_a_T_5, 0, 0) @[Bitwise.scala 77:15]
    node _a_T_7 = mux(_a_T_6, UInt<97>("h1ffffffffffffffffffffffff"), UInt<97>("h0")) @[Bitwise.scala 77:12]
    node _a_T_8 = cat(_a_T_7, io_multiplicand) @[Cat.scala 33:92]
    node _a_T_9 = bits(io_mul_signed, 1, 1) @[base_mul.scala 168:27]
    node _a_T_10 = not(io_mulw) @[base_mul.scala 168:32]
    node _a_T_11 = and(_a_T_9, _a_T_10) @[base_mul.scala 168:30]
    node _a_T_12 = bits(_a_T_11, 0, 0) @[base_mul.scala 168:43]
    node _a_T_13 = bits(io_multiplicand, 63, 63) @[base_mul.scala 168:77]
    node _a_T_14 = bits(_a_T_13, 0, 0) @[Bitwise.scala 77:15]
    node _a_T_15 = mux(_a_T_14, UInt<65>("h1ffffffffffffffff"), UInt<65>("h0")) @[Bitwise.scala 77:12]
    node _a_T_16 = cat(_a_T_15, io_multiplicand) @[Cat.scala 33:92]
    node _a_T_17 = mux(_a_T_12, _a_T_16, io_multiplicand) @[base_mul.scala 168:12]
    node _a_T_18 = mux(_a_T_4, _a_T_8, _a_T_17) @[base_mul.scala 167:12]
    node _a_T_19 = mux(_a_T_1, a, _a_T_18) @[base_mul.scala 166:12]
    node running = _running_T @[base_mul.scala 155:23 156:12]
    node _a_T_20 = mux(running, _a_T, _a_T_19) @[base_mul.scala 165:12]
    node _b_T = dshr(b, UInt<1>("h1")) @[base_mul.scala 171:24]
    node _b_T_1 = eq(next_valid, UInt<1>("h0")) @[base_mul.scala 172:13]
    node _b_T_2 = bits(io_mul_signed, 0, 0) @[base_mul.scala 173:26]
    node _b_T_3 = bits(io_mulw, 0, 0) @[base_mul.scala 173:38]
    node _b_T_4 = and(_b_T_2, _b_T_3) @[base_mul.scala 173:29]
    node _b_T_5 = bits(io_multiplier, 31, 31) @[base_mul.scala 173:70]
    node _b_T_6 = bits(_b_T_5, 0, 0) @[Bitwise.scala 77:15]
    node _b_T_7 = mux(_b_T_6, UInt<97>("h1ffffffffffffffffffffffff"), UInt<97>("h0")) @[Bitwise.scala 77:12]
    node _b_T_8 = cat(_b_T_7, io_multiplier) @[Cat.scala 33:92]
    node _b_T_9 = bits(io_mul_signed, 0, 0) @[base_mul.scala 174:26]
    node _b_T_10 = not(io_mulw) @[base_mul.scala 174:31]
    node _b_T_11 = bits(_b_T_10, 0, 0) @[base_mul.scala 174:41]
    node _b_T_12 = and(_b_T_9, _b_T_11) @[base_mul.scala 174:29]
    node _b_T_13 = bits(io_multiplier, 63, 63) @[base_mul.scala 174:73]
    node _b_T_14 = bits(_b_T_13, 0, 0) @[Bitwise.scala 77:15]
    node _b_T_15 = mux(_b_T_14, UInt<65>("h1ffffffffffffffff"), UInt<65>("h0")) @[Bitwise.scala 77:12]
    node _b_T_16 = cat(_b_T_15, io_multiplier) @[Cat.scala 33:92]
    node _b_T_17 = mux(_b_T_12, _b_T_16, io_multiplier) @[base_mul.scala 174:12]
    node _b_T_18 = mux(_b_T_4, _b_T_8, _b_T_17) @[base_mul.scala 173:12]
    node _b_T_19 = mux(_b_T_1, b, _b_T_18) @[base_mul.scala 172:12]
    node _b_T_20 = mux(running, _b_T, _b_T_19) @[base_mul.scala 171:12]
    node _cnt_T = eq(state, UInt<1>("h1")) @[base_mul.scala 177:21]
    node _cnt_T_1 = add(cnt, UInt<1>("h1")) @[base_mul.scala 177:35]
    node _cnt_T_2 = tail(_cnt_T_1, 1) @[base_mul.scala 177:35]
    node _cnt_T_3 = mux(_cnt_T, _cnt_T_2, UInt<1>("h0")) @[base_mul.scala 177:14]
    node _last_T = eq(cnt, mulBits) @[base_mul.scala 181:17]
    node _s_T = bits(b, 0, 0) @[base_mul.scala 182:21]
    node last = _last_T @[base_mul.scala 180:20 181:10]
    node _s_T_1 = and(last, _s_T) @[base_mul.scala 182:17]
    node _s_T_2 = sub(result, a) @[base_mul.scala 182:32]
    node _s_T_3 = tail(_s_T_2, 1) @[base_mul.scala 182:32]
    node _s_T_4 = bits(b, 0, 0) @[base_mul.scala 183:14]
    node _s_T_5 = add(result, a) @[base_mul.scala 183:24]
    node _s_T_6 = tail(_s_T_5, 1) @[base_mul.scala 183:24]
    node _s_T_7 = mux(_s_T_4, _s_T_6, result) @[base_mul.scala 183:12]
    node _s_T_8 = mux(_s_T_1, _s_T_3, _s_T_7) @[base_mul.scala 182:11]
    node _result_T = eq(state, UInt<1>("h1")) @[base_mul.scala 185:23]
    node s = _s_T_8 @[base_mul.scala 179:15 182:6]
    node _result_T_1 = mux(_result_T, s, UInt<1>("h0")) @[base_mul.scala 185:16]
    node _io_out_valid_T = eq(cnt, mulBits) @[base_mul.scala 187:24]
    node _io_out_valid_T_1 = eq(state, UInt<1>("h1")) @[base_mul.scala 187:46]
    node _io_out_valid_T_2 = and(_io_out_valid_T, _io_out_valid_T_1) @[base_mul.scala 187:36]
    node _io_mul_ready_T = eq(state, UInt<1>("h0")) @[base_mul.scala 188:26]
    node _io_result_lo_T = bits(result, 63, 0) @[base_mul.scala 189:26]
    node _io_result_hi_T = bits(result, 127, 64) @[base_mul.scala 190:26]
    node _T = bits(io_out_valid, 0, 0) @[base_mul.scala 192:23]
    node _T_1 = bits(result, 127, 0) @[base_mul.scala 193:30]
    node _T_2 = mul(a, b) @[base_mul.scala 193:43]
    node _T_3 = eq(_T_1, _T_2) @[base_mul.scala 193:38]
    node _T_4 = bits(reset, 0, 0) @[base_mul.scala 193:23]
    node _T_5 = eq(_T_4, UInt<1>("h0")) @[base_mul.scala 193:23]
    node _T_6 = eq(_T_3, UInt<1>("h0")) @[base_mul.scala 193:23]
    io_mul_ready <= _io_mul_ready_T @[base_mul.scala 188:17]
    io_out_valid <= _io_out_valid_T_2 @[base_mul.scala 187:17]
    io_result_hi <= _io_result_hi_T @[base_mul.scala 190:17]
    io_result_lo <= _io_result_lo_T @[base_mul.scala 189:17]
    state <= mux(reset, UInt<1>("h0"), _state_T_9) @[base_mul.scala 146:{24,24} 147:11]
    mulBits <= mux(reset, UInt<6>("h0"), _mulBits_T_2) @[base_mul.scala 151:{26,26} 158:13]
    a <= bits(mux(reset, UInt<129>("h0"), _a_T_20), 128, 0) @[base_mul.scala 160:{20,20} 165:7]
    b <= bits(mux(reset, UInt<129>("h0"), _b_T_20), 128, 0) @[base_mul.scala 161:{20,20} 171:7]
    result <= mux(reset, UInt<130>("h0"), _result_T_1) @[base_mul.scala 162:{25,25} 185:11]
    cnt <= mux(reset, UInt<68>("h0"), _cnt_T_3) @[base_mul.scala 163:{22,22} 177:8]
    printf(clock, and(and(and(and(UInt<1>("h1"), _T), _T_5), _T_6), UInt<1>("h1")), "Assertion failed\n    at base_mul.scala:193 chisel3.assert(result(127,0) === a*b)\n") : printf @[base_mul.scala 193:23]
    assert(clock, _T_3, and(and(and(UInt<1>("h1"), _T), _T_5), UInt<1>("h1")), "") : assert @[base_mul.scala 193:23]
