circuit unit :
  module unit :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip mul_valid : UInt<1>, flip flush : UInt<1>, flip mulw : UInt<1>, flip mul_signed : UInt<2>, flip multiplicand : UInt<64>, flip multiplier : UInt<64>, mul_ready : UInt<1>, out_valid : UInt<1>, result_hi : UInt<64>, result_lo : UInt<64>}

    reg state : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[base_mul.scala 21:24]
    wire s : UInt<130> @[base_mul.scala 23:15]
    wire last : UInt<1> @[base_mul.scala 24:20]
    node _state_T = bits(io.flush, 0, 0) @[base_mul.scala 27:32]
    node _state_T_1 = bits(io.mul_valid, 0, 0) @[base_mul.scala 27:63]
    node _state_T_2 = mux(_state_T_1, UInt<1>("h1"), UInt<1>("h0")) @[base_mul.scala 27:49]
    node _state_T_3 = mux(_state_T, UInt<1>("h0"), _state_T_2) @[base_mul.scala 27:22]
    node _state_T_4 = bits(io.flush, 0, 0) @[base_mul.scala 28:32]
    node _state_T_5 = bits(last, 0, 0) @[base_mul.scala 28:55]
    node _state_T_6 = mux(_state_T_5, UInt<1>("h0"), UInt<1>("h1")) @[base_mul.scala 28:49]
    node _state_T_7 = mux(_state_T_4, UInt<1>("h0"), _state_T_6) @[base_mul.scala 28:22]
    node _state_T_8 = eq(UInt<1>("h1"), state) @[Mux.scala 81:61]
    node _state_T_9 = mux(_state_T_8, _state_T_7, _state_T_3) @[Mux.scala 81:58]
    state <= _state_T_9 @[base_mul.scala 26:11]
    wire mulbits : UInt<6> @[base_mul.scala 30:23]
    reg mulBits : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[base_mul.scala 31:26]
    wire next_valid : UInt<1> @[base_mul.scala 33:26]
    node _next_valid_T = bits(io.mul_valid, 0, 0) @[base_mul.scala 34:31]
    node _next_valid_T_1 = eq(state, UInt<1>("h0")) @[base_mul.scala 34:47]
    node _next_valid_T_2 = and(_next_valid_T, _next_valid_T_1) @[base_mul.scala 34:38]
    next_valid <= _next_valid_T_2 @[base_mul.scala 34:15]
    wire running : UInt<1> @[base_mul.scala 35:23]
    node _running_T = eq(state, UInt<1>("h1")) @[base_mul.scala 36:22]
    running <= _running_T @[base_mul.scala 36:12]
    node _mulbits_T = bits(io.mulw, 0, 0) @[base_mul.scala 38:28]
    node _mulbits_T_1 = mux(_mulbits_T, UInt<5>("h1f"), UInt<6>("h3f")) @[base_mul.scala 38:19]
    mulbits <= _mulbits_T_1 @[base_mul.scala 38:13]
    node _mulBits_T = eq(state, UInt<1>("h0")) @[base_mul.scala 39:26]
    node _mulBits_T_1 = bits(io.mul_valid, 0, 0) @[base_mul.scala 39:53]
    node _mulBits_T_2 = and(_mulBits_T, _mulBits_T_1) @[base_mul.scala 39:37]
    node _mulBits_T_3 = mux(_mulBits_T_2, mulbits, mulBits) @[base_mul.scala 39:19]
    mulBits <= _mulBits_T_3 @[base_mul.scala 39:13]
    reg a : UInt<129>, clock with :
      reset => (reset, UInt<129>("h0")) @[base_mul.scala 41:20]
    reg b : UInt<129>, clock with :
      reset => (reset, UInt<129>("h0")) @[base_mul.scala 42:20]
    reg result : UInt<130>, clock with :
      reset => (reset, UInt<130>("h0")) @[base_mul.scala 43:25]
    reg cnt : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[base_mul.scala 44:22]
    node _a_T = dshl(a, UInt<1>("h1")) @[base_mul.scala 46:24]
    node _a_T_1 = eq(next_valid, UInt<1>("h0")) @[base_mul.scala 47:13]
    node _a_T_2 = bits(io.mul_signed, 1, 1) @[base_mul.scala 48:26]
    node _a_T_3 = dshr(io.multiplicand, mulbits) @[base_mul.scala 48:49]
    node _a_T_4 = bits(_a_T_3, 0, 0) @[base_mul.scala 48:49]
    node _a_T_5 = cat(_a_T_4, io.multiplicand) @[Cat.scala 33:92]
    node _a_T_6 = cat(UInt<1>("h0"), io.multiplicand) @[Cat.scala 33:92]
    node _a_T_7 = mux(_a_T_2, _a_T_5, _a_T_6) @[base_mul.scala 48:12]
    node _a_T_8 = mux(_a_T_1, a, _a_T_7) @[base_mul.scala 47:12]
    node _a_T_9 = mux(running, _a_T, _a_T_8) @[base_mul.scala 46:12]
    a <= _a_T_9 @[base_mul.scala 46:7]
    node _b_T = dshr(b, UInt<1>("h1")) @[base_mul.scala 51:24]
    node _b_T_1 = eq(next_valid, UInt<1>("h0")) @[base_mul.scala 52:13]
    node _b_T_2 = bits(io.mul_signed, 0, 0) @[base_mul.scala 53:26]
    node _b_T_3 = dshr(io.multiplicand, mulbits) @[base_mul.scala 53:49]
    node _b_T_4 = bits(_b_T_3, 0, 0) @[base_mul.scala 53:49]
    node _b_T_5 = cat(_b_T_4, io.multiplier) @[Cat.scala 33:92]
    node _b_T_6 = cat(UInt<1>("h0"), io.multiplier) @[Cat.scala 33:92]
    node _b_T_7 = mux(_b_T_2, _b_T_5, _b_T_6) @[base_mul.scala 53:12]
    node _b_T_8 = mux(_b_T_1, b, _b_T_7) @[base_mul.scala 52:12]
    node _b_T_9 = mux(running, _b_T, _b_T_8) @[base_mul.scala 51:12]
    b <= _b_T_9 @[base_mul.scala 51:7]
    node _cnt_T = neq(state, UInt<1>("h1")) @[base_mul.scala 56:23]
    node _cnt_T_1 = eq(b, UInt<1>("h0")) @[base_mul.scala 57:20]
    node _cnt_T_2 = neq(cnt, mulBits) @[base_mul.scala 57:36]
    node _cnt_T_3 = and(_cnt_T_1, _cnt_T_2) @[base_mul.scala 57:29]
    node _cnt_T_4 = add(cnt, UInt<1>("h1")) @[base_mul.scala 58:17]
    node _cnt_T_5 = tail(_cnt_T_4, 1) @[base_mul.scala 58:17]
    node _cnt_T_6 = mux(_cnt_T_3, mulBits, _cnt_T_5) @[base_mul.scala 57:16]
    node _cnt_T_7 = mux(_cnt_T, UInt<1>("h0"), _cnt_T_6) @[base_mul.scala 56:16]
    cnt <= _cnt_T_7 @[base_mul.scala 56:8]
    node _last_T = eq(cnt, mulBits) @[base_mul.scala 60:18]
    last <= _last_T @[base_mul.scala 60:10]
    node _s_T = bits(b, 0, 0) @[base_mul.scala 61:21]
    node _s_T_1 = and(last, _s_T) @[base_mul.scala 61:17]
    node _s_T_2 = sub(result, a) @[base_mul.scala 61:32]
    node _s_T_3 = tail(_s_T_2, 1) @[base_mul.scala 61:32]
    node _s_T_4 = bits(b, 0, 0) @[base_mul.scala 62:14]
    node _s_T_5 = add(result, a) @[base_mul.scala 62:24]
    node _s_T_6 = tail(_s_T_5, 1) @[base_mul.scala 62:24]
    node _s_T_7 = mux(_s_T_4, _s_T_6, result) @[base_mul.scala 62:12]
    node _s_T_8 = mux(_s_T_1, _s_T_3, _s_T_7) @[base_mul.scala 61:11]
    s <= _s_T_8 @[base_mul.scala 61:6]
    node _result_T = eq(state, UInt<1>("h1")) @[base_mul.scala 64:23]
    node _result_T_1 = mux(_result_T, s, UInt<1>("h0")) @[base_mul.scala 64:16]
    result <= _result_T_1 @[base_mul.scala 64:11]
    node _io_out_valid_T = add(mulBits, UInt<1>("h1")) @[base_mul.scala 66:36]
    node _io_out_valid_T_1 = eq(cnt, _io_out_valid_T) @[base_mul.scala 66:25]
    io.out_valid <= _io_out_valid_T_1 @[base_mul.scala 66:17]
    node _io_mul_ready_T = eq(state, UInt<1>("h0")) @[base_mul.scala 67:27]
    io.mul_ready <= _io_mul_ready_T @[base_mul.scala 67:17]
    node _io_result_lo_T = bits(result, 63, 0) @[base_mul.scala 68:26]
    io.result_lo <= _io_result_lo_T @[base_mul.scala 68:17]
    node _io_result_hi_T = bits(result, 127, 64) @[base_mul.scala 69:26]
    io.result_hi <= _io_result_hi_T @[base_mul.scala 69:17]

