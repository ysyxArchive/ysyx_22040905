circuit top :
  module Pre_Decode :
    input clock : Clock
    input reset : Reset
    output io : { flip inst : UInt<32>, jump : UInt<1>, j : UInt<1>, offset : UInt<32>}

    node _io_jump_T = bits(io.inst, 6, 0) @[IFU.scala 111:17]
    node _io_jump_T_1 = eq(_io_jump_T, UInt<7>("h67")) @[IFU.scala 111:22]
    node _io_jump_T_2 = bits(io.inst, 14, 12) @[IFU.scala 111:44]
    node _io_jump_T_3 = eq(_io_jump_T_2, UInt<1>("h0")) @[IFU.scala 111:51]
    node _io_jump_T_4 = and(_io_jump_T_1, _io_jump_T_3) @[IFU.scala 111:38]
    node _io_jump_T_5 = eq(io.inst, UInt<7>("h73")) @[IFU.scala 112:17]
    node _io_jump_T_6 = or(_io_jump_T_4, _io_jump_T_5) @[IFU.scala 111:64]
    node _io_jump_T_7 = eq(io.inst, UInt<30>("h30200073")) @[IFU.scala 113:17]
    node _io_jump_T_8 = or(_io_jump_T_6, _io_jump_T_7) @[IFU.scala 112:64]
    node _io_jump_T_9 = eq(io.inst, UInt<21>("h100073")) @[IFU.scala 114:17]
    node _io_jump_T_10 = or(_io_jump_T_8, _io_jump_T_9) @[IFU.scala 113:64]
    io.jump <= _io_jump_T_10 @[IFU.scala 110:10]
    node _jal_T = bits(io.inst, 6, 0) @[IFU.scala 117:16]
    node jal = eq(_jal_T, UInt<7>("h6f")) @[IFU.scala 117:21]
    node _b_T = bits(io.inst, 6, 0) @[IFU.scala 119:16]
    node _b_T_1 = eq(_b_T, UInt<7>("h63")) @[IFU.scala 119:21]
    node _b_T_2 = bits(io.inst, 14, 12) @[IFU.scala 119:43]
    node _b_T_3 = eq(_b_T_2, UInt<1>("h0")) @[IFU.scala 119:50]
    node _b_T_4 = and(_b_T_1, _b_T_3) @[IFU.scala 119:37]
    node _b_T_5 = bits(io.inst, 6, 0) @[IFU.scala 120:16]
    node _b_T_6 = eq(_b_T_5, UInt<7>("h63")) @[IFU.scala 120:21]
    node _b_T_7 = bits(io.inst, 14, 12) @[IFU.scala 120:43]
    node _b_T_8 = eq(_b_T_7, UInt<1>("h1")) @[IFU.scala 120:50]
    node _b_T_9 = and(_b_T_6, _b_T_8) @[IFU.scala 120:37]
    node _b_T_10 = or(_b_T_4, _b_T_9) @[IFU.scala 119:63]
    node _b_T_11 = bits(io.inst, 6, 0) @[IFU.scala 121:16]
    node _b_T_12 = eq(_b_T_11, UInt<7>("h63")) @[IFU.scala 121:21]
    node _b_T_13 = bits(io.inst, 14, 12) @[IFU.scala 121:43]
    node _b_T_14 = eq(_b_T_13, UInt<3>("h5")) @[IFU.scala 121:50]
    node _b_T_15 = and(_b_T_12, _b_T_14) @[IFU.scala 121:37]
    node _b_T_16 = or(_b_T_10, _b_T_15) @[IFU.scala 120:63]
    node _b_T_17 = bits(io.inst, 6, 0) @[IFU.scala 122:16]
    node _b_T_18 = eq(_b_T_17, UInt<7>("h63")) @[IFU.scala 122:21]
    node _b_T_19 = bits(io.inst, 14, 12) @[IFU.scala 122:43]
    node _b_T_20 = eq(_b_T_19, UInt<3>("h7")) @[IFU.scala 122:50]
    node _b_T_21 = and(_b_T_18, _b_T_20) @[IFU.scala 122:37]
    node _b_T_22 = or(_b_T_16, _b_T_21) @[IFU.scala 121:63]
    node _b_T_23 = bits(io.inst, 6, 0) @[IFU.scala 123:16]
    node _b_T_24 = eq(_b_T_23, UInt<7>("h63")) @[IFU.scala 123:21]
    node _b_T_25 = bits(io.inst, 14, 12) @[IFU.scala 123:43]
    node _b_T_26 = eq(_b_T_25, UInt<3>("h4")) @[IFU.scala 123:50]
    node _b_T_27 = and(_b_T_24, _b_T_26) @[IFU.scala 123:37]
    node _b_T_28 = or(_b_T_22, _b_T_27) @[IFU.scala 122:63]
    node _b_T_29 = bits(io.inst, 6, 0) @[IFU.scala 124:16]
    node _b_T_30 = eq(_b_T_29, UInt<7>("h63")) @[IFU.scala 124:21]
    node _b_T_31 = bits(io.inst, 14, 12) @[IFU.scala 124:43]
    node _b_T_32 = eq(_b_T_31, UInt<3>("h6")) @[IFU.scala 124:50]
    node _b_T_33 = and(_b_T_30, _b_T_32) @[IFU.scala 124:37]
    node b = or(_b_T_28, _b_T_33) @[IFU.scala 123:63]
    node _jal_off_T = bits(io.inst, 31, 31) @[IFU.scala 127:31]
    node _jal_off_T_1 = bits(_jal_off_T, 0, 0) @[Bitwise.scala 77:15]
    node _jal_off_T_2 = mux(_jal_off_T_1, UInt<43>("h7ffffffffff"), UInt<43>("h0")) @[Bitwise.scala 77:12]
    node _jal_off_T_3 = bits(io.inst, 31, 31) @[IFU.scala 127:45]
    node _jal_off_T_4 = bits(io.inst, 19, 12) @[IFU.scala 127:58]
    node _jal_off_T_5 = bits(io.inst, 20, 20) @[IFU.scala 127:74]
    node _jal_off_T_6 = bits(io.inst, 30, 21) @[IFU.scala 127:87]
    node _jal_off_T_7 = cat(_jal_off_T_6, UInt<1>("h0")) @[Cat.scala 33:92]
    node _jal_off_T_8 = cat(_jal_off_T_5, _jal_off_T_7) @[Cat.scala 33:92]
    node _jal_off_T_9 = cat(_jal_off_T_4, _jal_off_T_8) @[Cat.scala 33:92]
    node _jal_off_T_10 = cat(_jal_off_T_3, _jal_off_T_9) @[Cat.scala 33:92]
    node jal_off = cat(_jal_off_T_2, _jal_off_T_10) @[Cat.scala 33:92]
    node _b_off_T = bits(io.inst, 31, 31) @[IFU.scala 128:31]
    node _b_off_T_1 = bits(_b_off_T, 0, 0) @[Bitwise.scala 77:15]
    node _b_off_T_2 = mux(_b_off_T_1, UInt<51>("h7ffffffffffff"), UInt<51>("h0")) @[Bitwise.scala 77:12]
    node _b_off_T_3 = bits(io.inst, 31, 31) @[IFU.scala 128:45]
    node _b_off_T_4 = bits(io.inst, 7, 7) @[IFU.scala 128:58]
    node _b_off_T_5 = bits(io.inst, 30, 25) @[IFU.scala 128:70]
    node _b_off_T_6 = bits(io.inst, 11, 8) @[IFU.scala 128:86]
    node _b_off_T_7 = cat(_b_off_T_6, UInt<1>("h0")) @[Cat.scala 33:92]
    node _b_off_T_8 = cat(_b_off_T_5, _b_off_T_7) @[Cat.scala 33:92]
    node _b_off_T_9 = cat(_b_off_T_4, _b_off_T_8) @[Cat.scala 33:92]
    node _b_off_T_10 = cat(_b_off_T_3, _b_off_T_9) @[Cat.scala 33:92]
    node b_off = cat(_b_off_T_2, _b_off_T_10) @[Cat.scala 33:92]
    node _io_j_T = bits(io.inst, 31, 31) @[IFU.scala 130:24]
    node _io_j_T_1 = and(b, _io_j_T) @[IFU.scala 130:18]
    node _io_j_T_2 = or(jal, _io_j_T_1) @[IFU.scala 130:13]
    io.j <= _io_j_T_2 @[IFU.scala 130:7]
    node _io_offset_T = mux(jal, jal_off, b_off) @[IFU.scala 131:17]
    io.offset <= _io_offset_T @[IFU.scala 131:12]

  extmodule itrace :
    input pc : UInt<64>
    input en : UInt<1>
    input inst : UInt<32>
    defname = itrace

  module IFU :
    input clock : Clock
    input reset : Reset
    output io : { pc : UInt<64>, flip pc_dnpc : UInt<64>, flip clearJump : UInt<1>, lm : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { pc : UInt<32>, inst : UInt<32>, isJump : UInt<1>}}, flip irq_nextpc : UInt<32>, flip irq : UInt<1>, flip real_pc : UInt<32>, flip p_error : UInt<1>, B_num : UInt<64>, B_Error : UInt<64>, block_num : UInt<64>}

    reg state : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[IFU.scala 37:22]
    wire next_valid : UInt<1> @[IFU.scala 38:22]
    node _IF_reg_inst_T = bits(io.lm.r.bits.data, 31, 0) @[IFU.scala 39:46]
    node _IF_reg_inst_T_1 = and(io.lm.r.ready, io.lm.r.valid) @[Decoupled.scala 52:35]
    reg IF_reg_inst : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg.scala 35:20]
    when _IF_reg_inst_T_1 : @[Reg.scala 36:18]
      IF_reg_inst <= _IF_reg_inst_T @[Reg.scala 36:22]
    inst pre_decode of Pre_Decode @[IFU.scala 40:25]
    pre_decode.clock <= clock
    pre_decode.reset <= reset
    wire next_pc : UInt<64> @[IFU.scala 41:19]
    reg IF_reg_valid : UInt, clock with :
      reset => (reset, UInt<1>("h1")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      IF_reg_valid <= next_valid @[Reg.scala 36:22]
    node _IF_reg_pc_T = bits(io.p_error, 0, 0) @[IFU.scala 43:66]
    node _IF_reg_pc_T_1 = bits(next_valid, 0, 0) @[IFU.scala 43:84]
    node _IF_reg_pc_T_2 = or(_IF_reg_pc_T, _IF_reg_pc_T_1) @[IFU.scala 43:72]
    reg IF_reg_pc : UInt<64>, clock with :
      reset => (reset, UInt<64>("h80000000")) @[Reg.scala 35:20]
    when _IF_reg_pc_T_2 : @[Reg.scala 36:18]
      IF_reg_pc <= next_pc @[Reg.scala 36:22]
    node _state_T = bits(io.irq, 0, 0) @[IFU.scala 46:33]
    node _state_T_1 = and(io.lm.ar.ready, io.lm.ar.valid) @[Decoupled.scala 52:35]
    node _state_T_2 = mux(_state_T_1, UInt<1>("h1"), UInt<1>("h0")) @[IFU.scala 46:50]
    node _state_T_3 = mux(_state_T, UInt<1>("h0"), _state_T_2) @[IFU.scala 46:25]
    node _state_T_4 = bits(io.irq, 0, 0) @[IFU.scala 47:33]
    node _state_T_5 = and(io.lm.r.ready, io.lm.r.valid) @[Decoupled.scala 52:35]
    node _state_T_6 = bits(next_valid, 0, 0) @[IFU.scala 47:80]
    node _state_T_7 = not(_state_T_6) @[IFU.scala 47:68]
    node _state_T_8 = and(_state_T_5, _state_T_7) @[IFU.scala 47:64]
    node _state_T_9 = mux(_state_T_8, UInt<1>("h0"), UInt<1>("h1")) @[IFU.scala 47:50]
    node _state_T_10 = mux(_state_T_4, UInt<1>("h0"), _state_T_9) @[IFU.scala 47:25]
    node _state_T_11 = eq(UInt<1>("h1"), state) @[Mux.scala 81:61]
    node _state_T_12 = mux(_state_T_11, _state_T_10, _state_T_3) @[Mux.scala 81:58]
    state <= _state_T_12 @[IFU.scala 45:9]
    node _pre_decode_io_inst_T = bits(io.lm.r.bits.data, 31, 0) @[IFU.scala 50:40]
    pre_decode.io.inst <= _pre_decode_io_inst_T @[IFU.scala 50:21]
    node _next_valid_T = bits(io.irq, 0, 0) @[IFU.scala 52:26]
    node _next_valid_T_1 = bits(io.clearJump, 0, 0) @[IFU.scala 52:46]
    node _next_valid_T_2 = or(_next_valid_T, _next_valid_T_1) @[IFU.scala 52:32]
    node _next_valid_T_3 = bits(io.p_error, 0, 0) @[IFU.scala 52:64]
    node _next_valid_T_4 = or(_next_valid_T_2, _next_valid_T_3) @[IFU.scala 52:52]
    node _next_valid_T_5 = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    node _next_valid_T_6 = and(pre_decode.io.jump, _next_valid_T_5) @[IFU.scala 53:39]
    node _next_valid_T_7 = bits(_next_valid_T_6, 0, 0) @[IFU.scala 53:54]
    node _next_valid_T_8 = mux(_next_valid_T_7, UInt<1>("h0"), IF_reg_valid) @[IFU.scala 53:18]
    node _next_valid_T_9 = mux(_next_valid_T_4, UInt<1>("h1"), _next_valid_T_8) @[IFU.scala 52:18]
    next_valid <= _next_valid_T_9 @[IFU.scala 52:13]
    io.pc <= IF_reg_pc @[IFU.scala 55:8]
    node _next_pc_T = bits(io.irq, 0, 0) @[IFU.scala 56:24]
    node _next_pc_T_1 = bits(io.p_error, 0, 0) @[IFU.scala 57:28]
    node _next_pc_T_2 = bits(io.clearJump, 0, 0) @[IFU.scala 58:30]
    node _next_pc_T_3 = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    node _next_pc_T_4 = not(_next_pc_T_3) @[IFU.scala 59:17]
    node _next_pc_T_5 = bits(pre_decode.io.j, 0, 0) @[IFU.scala 60:33]
    node _next_pc_T_6 = add(IF_reg_pc, pre_decode.io.offset) @[IFU.scala 60:49]
    node _next_pc_T_7 = tail(_next_pc_T_6, 1) @[IFU.scala 60:49]
    node _next_pc_T_8 = add(IF_reg_pc, UInt<3>("h4")) @[IFU.scala 61:22]
    node _next_pc_T_9 = tail(_next_pc_T_8, 1) @[IFU.scala 61:22]
    node _next_pc_T_10 = mux(_next_pc_T_5, _next_pc_T_7, _next_pc_T_9) @[IFU.scala 60:16]
    node _next_pc_T_11 = mux(_next_pc_T_4, IF_reg_pc, _next_pc_T_10) @[IFU.scala 59:16]
    node _next_pc_T_12 = mux(_next_pc_T_2, io.pc_dnpc, _next_pc_T_11) @[IFU.scala 58:16]
    node _next_pc_T_13 = mux(_next_pc_T_1, io.real_pc, _next_pc_T_12) @[IFU.scala 57:16]
    node _next_pc_T_14 = mux(_next_pc_T, io.irq_nextpc, _next_pc_T_13) @[IFU.scala 56:16]
    next_pc <= _next_pc_T_14 @[IFU.scala 56:10]
    node _io_lm_ar_bits_addr_T = bits(next_pc, 31, 0) @[IFU.scala 63:30]
    io.lm.ar.bits.addr <= _io_lm_ar_bits_addr_T @[IFU.scala 63:21]
    node _io_lm_ar_valid_T = asUInt(reset) @[IFU.scala 64:27]
    node _io_lm_ar_valid_T_1 = not(_io_lm_ar_valid_T) @[IFU.scala 64:20]
    node _io_lm_ar_valid_T_2 = and(_io_lm_ar_valid_T_1, next_valid) @[IFU.scala 64:34]
    io.lm.ar.valid <= _io_lm_ar_valid_T_2 @[IFU.scala 64:17]
    io.lm.r.ready <= UInt<1>("h1") @[IFU.scala 65:16]
    io.lm.aw.bits.addr <= UInt<1>("h0") @[IFU.scala 66:21]
    io.lm.aw.valid <= UInt<1>("h0") @[IFU.scala 67:17]
    io.lm.w.valid <= UInt<1>("h0") @[IFU.scala 68:16]
    io.lm.b.ready <= UInt<1>("h0") @[IFU.scala 69:16]
    io.lm.w.bits.data <= UInt<1>("h0") @[IFU.scala 70:20]
    io.lm.w.bits.strb <= UInt<1>("h0") @[IFU.scala 71:20]
    node _io_out_bits_inst_T = eq(IF_reg_valid, UInt<1>("h1")) @[IFU.scala 74:38]
    node _io_out_bits_inst_T_1 = bits(io.lm.r.bits.data, 31, 0) @[IFU.scala 74:63]
    node _io_out_bits_inst_T_2 = mux(_io_out_bits_inst_T, _io_out_bits_inst_T_1, UInt<5>("h13")) @[IFU.scala 74:24]
    io.out.bits.inst <= _io_out_bits_inst_T_2 @[IFU.scala 74:19]
    node _io_out_bits_pc_T = eq(IF_reg_valid, UInt<1>("h1")) @[IFU.scala 75:36]
    node _io_out_bits_pc_T_1 = bits(IF_reg_pc, 31, 0) @[IFU.scala 75:53]
    node _io_out_bits_pc_T_2 = mux(_io_out_bits_pc_T, _io_out_bits_pc_T_1, UInt<1>("h0")) @[IFU.scala 75:22]
    io.out.bits.pc <= _io_out_bits_pc_T_2 @[IFU.scala 75:17]
    node _io_out_bits_isJump_T = eq(IF_reg_valid, UInt<1>("h1")) @[IFU.scala 76:40]
    node _io_out_bits_isJump_T_1 = mux(_io_out_bits_isJump_T, pre_decode.io.jump, UInt<1>("h0")) @[IFU.scala 76:26]
    io.out.bits.isJump <= _io_out_bits_isJump_T_1 @[IFU.scala 76:21]
    node _io_out_valid_T = eq(IF_reg_valid, UInt<1>("h0")) @[IFU.scala 77:37]
    node _io_out_valid_T_1 = or(io.lm.r.valid, _io_out_valid_T) @[IFU.scala 77:32]
    node _io_out_valid_T_2 = bits(io.irq, 0, 0) @[IFU.scala 77:62]
    node _io_out_valid_T_3 = or(_io_out_valid_T_1, _io_out_valid_T_2) @[IFU.scala 77:52]
    node _io_out_valid_T_4 = bits(io.p_error, 0, 0) @[IFU.scala 77:83]
    node _io_out_valid_T_5 = or(_io_out_valid_T_3, _io_out_valid_T_4) @[IFU.scala 77:69]
    io.out.valid <= _io_out_valid_T_5 @[IFU.scala 77:15]
    inst it of itrace @[IFU.scala 79:16]
    it.inst is invalid
    it.en is invalid
    it.pc is invalid
    node _it_io_en_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    node _it_io_en_T_1 = and(_it_io_en_T, IF_reg_valid) @[IFU.scala 80:25]
    it.en <= _it_io_en_T_1 @[IFU.scala 80:11]
    node _it_io_inst_T = bits(io.lm.r.bits.data, 31, 0) @[IFU.scala 81:32]
    it.inst <= _it_io_inst_T @[IFU.scala 81:13]
    node _it_io_pc_T = bits(IF_reg_pc, 31, 0) @[IFU.scala 82:22]
    it.pc <= _it_io_pc_T @[IFU.scala 82:11]
    reg B_num : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[IFU.scala 86:20]
    reg B_Error : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[IFU.scala 87:22]
    node _B_num_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    node _B_num_T_1 = bits(pre_decode.io.j, 0, 0) @[IFU.scala 89:46]
    node _B_num_T_2 = and(_B_num_T, _B_num_T_1) @[IFU.scala 89:28]
    node _B_num_T_3 = add(B_num, UInt<1>("h1")) @[IFU.scala 89:58]
    node _B_num_T_4 = tail(_B_num_T_3, 1) @[IFU.scala 89:58]
    node _B_num_T_5 = mux(_B_num_T_2, _B_num_T_4, B_num) @[IFU.scala 89:15]
    B_num <= _B_num_T_5 @[IFU.scala 89:9]
    node _B_Error_T = bits(io.p_error, 0, 0) @[IFU.scala 90:29]
    node _B_Error_T_1 = add(B_Error, UInt<1>("h1")) @[IFU.scala 90:43]
    node _B_Error_T_2 = tail(_B_Error_T_1, 1) @[IFU.scala 90:43]
    node _B_Error_T_3 = mux(_B_Error_T, _B_Error_T_2, B_Error) @[IFU.scala 90:17]
    B_Error <= _B_Error_T_3 @[IFU.scala 90:11]
    io.B_num <= B_num @[IFU.scala 92:12]
    io.B_Error <= B_Error @[IFU.scala 93:14]
    reg block_num : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[IFU.scala 96:24]
    node _block_num_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    node _block_num_T_1 = bits(pre_decode.io.jump, 0, 0) @[IFU.scala 97:51]
    node _block_num_T_2 = and(_block_num_T, _block_num_T_1) @[IFU.scala 97:30]
    node _block_num_T_3 = add(block_num, UInt<1>("h1")) @[IFU.scala 97:67]
    node _block_num_T_4 = tail(_block_num_T_3, 1) @[IFU.scala 97:67]
    node _block_num_T_5 = mux(_block_num_T_2, _block_num_T_4, block_num) @[IFU.scala 97:17]
    block_num <= _block_num_T_5 @[IFU.scala 97:12]
    io.block_num <= block_num @[IFU.scala 98:15]

  module IDU :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { pc : UInt<32>, inst : UInt<32>, isJump : UInt<1>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { pc : UInt<32>, inst : UInt<32>, rs1 : UInt<5>, rs2 : UInt<5>, rd : UInt<5>, imm : UInt<64>, op : UInt<80>, typ : UInt<6>, isJump : UInt<1>, clearidx : UInt<5>}}, flip sb : { flip lookidx1 : UInt<5>, flip lookidx2 : UInt<5>, flip setidx : UInt<5>, isBusy : UInt<1>}, flip flush : UInt<1>}

    node _ID_reg_inst_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg ID_reg_inst : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when _ID_reg_inst_T : @[Reg.scala 36:18]
      ID_reg_inst <= io.in.bits.inst @[Reg.scala 36:22]
    node _ID_reg_pc_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg ID_reg_pc : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when _ID_reg_pc_T : @[Reg.scala 36:18]
      ID_reg_pc <= io.in.bits.pc @[Reg.scala 36:22]
    reg ID_reg_valid : UInt, clock with :
      reset => (reset, UInt<1>("h1")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      ID_reg_valid <= UInt<1>("h1") @[Reg.scala 36:22]
    node _ID_reg_isJump_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg ID_reg_isJump : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when _ID_reg_isJump_T : @[Reg.scala 36:18]
      ID_reg_isJump <= io.in.bits.isJump @[Reg.scala 36:22]
    wire RAW : UInt<1> @[IDU.scala 48:16]
    node _io_out_bits_isJump_T = bits(RAW, 0, 0) @[IDU.scala 49:33]
    node _io_out_bits_isJump_T_1 = not(_io_out_bits_isJump_T) @[IDU.scala 49:28]
    node _io_out_bits_isJump_T_2 = mux(_io_out_bits_isJump_T_1, ID_reg_isJump, UInt<1>("h0")) @[IDU.scala 49:27]
    io.out.bits.isJump <= _io_out_bits_isJump_T_2 @[IDU.scala 49:22]
    reg state : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[IDU.scala 53:23]
    node _state_T = bits(io.flush, 0, 0) @[IDU.scala 57:35]
    node _state_T_1 = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    node _state_T_2 = mux(_state_T_1, UInt<1>("h1"), UInt<1>("h0")) @[IDU.scala 57:52]
    node _state_T_3 = mux(_state_T, UInt<1>("h0"), _state_T_2) @[IDU.scala 57:25]
    node _state_T_4 = bits(io.flush, 0, 0) @[IDU.scala 58:35]
    node _state_T_5 = mux(UInt<1>("h1"), UInt<1>("h1"), UInt<1>("h0")) @[IDU.scala 58:52]
    node _state_T_6 = mux(_state_T_4, UInt<1>("h0"), _state_T_5) @[IDU.scala 58:25]
    node _state_T_7 = eq(UInt<1>("h1"), state) @[Mux.scala 81:61]
    node _state_T_8 = mux(_state_T_7, _state_T_6, _state_T_3) @[Mux.scala 81:58]
    state <= _state_T_8 @[IDU.scala 56:10]
    node _io_in_ready_T = not(RAW) @[IDU.scala 61:19]
    node _io_in_ready_T_1 = and(_io_in_ready_T, io.out.ready) @[IDU.scala 61:25]
    io.in.ready <= _io_in_ready_T_1 @[IDU.scala 61:15]
    node _io_out_valid_T = eq(state, UInt<1>("h1")) @[IDU.scala 62:25]
    node _io_out_valid_T_1 = and(_io_out_valid_T, io.in.valid) @[IDU.scala 62:43]
    node _io_out_valid_T_2 = bits(io.flush, 0, 0) @[IDU.scala 62:70]
    node _io_out_valid_T_3 = not(_io_out_valid_T_2) @[IDU.scala 62:60]
    node _io_out_valid_T_4 = and(_io_out_valid_T_1, _io_out_valid_T_3) @[IDU.scala 62:57]
    io.out.valid <= _io_out_valid_T_4 @[IDU.scala 62:16]
    node _io_out_bits_pc_T = bits(RAW, 0, 0) @[IDU.scala 63:29]
    node _io_out_bits_pc_T_1 = not(_io_out_bits_pc_T) @[IDU.scala 63:24]
    node _io_out_bits_pc_T_2 = mux(_io_out_bits_pc_T_1, ID_reg_pc, UInt<1>("h0")) @[IDU.scala 63:23]
    io.out.bits.pc <= _io_out_bits_pc_T_2 @[IDU.scala 63:18]
    node _io_out_bits_inst_T = bits(RAW, 0, 0) @[IDU.scala 64:31]
    node _io_out_bits_inst_T_1 = not(_io_out_bits_inst_T) @[IDU.scala 64:26]
    node _io_out_bits_inst_T_2 = mux(_io_out_bits_inst_T_1, ID_reg_inst, UInt<5>("h13")) @[IDU.scala 64:25]
    io.out.bits.inst <= _io_out_bits_inst_T_2 @[IDU.scala 64:20]
    wire op_t : UInt<1>[80] @[IDU.scala 67:20]
    op_t[0] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[1] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[2] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[3] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[4] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[5] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[6] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[7] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[8] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[9] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[10] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[11] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[12] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[13] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[14] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[15] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[16] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[17] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[18] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[19] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[20] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[21] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[22] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[23] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[24] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[25] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[26] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[27] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[28] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[29] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[30] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[31] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[32] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[33] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[34] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[35] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[36] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[37] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[38] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[39] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[40] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[41] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[42] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[43] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[44] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[45] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[46] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[47] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[48] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[49] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[50] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[51] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[52] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[53] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[54] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[55] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[56] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[57] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[58] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[59] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[60] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[61] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[62] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[63] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[64] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[65] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[66] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[67] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[68] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[69] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[70] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[71] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[72] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[73] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[74] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[75] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[76] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[77] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[78] <= UInt<1>("h0") @[IDU.scala 67:20]
    op_t[79] <= UInt<1>("h0") @[IDU.scala 67:20]
    node _op_t_0_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 70:26]
    node _op_t_0_T_1 = eq(_op_t_0_T, UInt<6>("h33")) @[IDU.scala 70:31]
    node _op_t_0_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 70:60]
    node _op_t_0_T_3 = eq(_op_t_0_T_2, UInt<1>("h0")) @[IDU.scala 70:67]
    node _op_t_0_T_4 = and(_op_t_0_T_1, _op_t_0_T_3) @[IDU.scala 70:47]
    node _op_t_0_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 70:92]
    node _op_t_0_T_6 = eq(_op_t_0_T_5, UInt<1>("h0")) @[IDU.scala 70:99]
    node _op_t_0_T_7 = and(_op_t_0_T_4, _op_t_0_T_6) @[IDU.scala 70:79]
    op_t[0] <= _op_t_0_T_7 @[IDU.scala 70:12]
    node _op_t_1_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 71:26]
    node _op_t_1_T_1 = eq(_op_t_1_T, UInt<6>("h3b")) @[IDU.scala 71:31]
    node _op_t_1_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 71:60]
    node _op_t_1_T_3 = eq(_op_t_1_T_2, UInt<1>("h0")) @[IDU.scala 71:67]
    node _op_t_1_T_4 = and(_op_t_1_T_1, _op_t_1_T_3) @[IDU.scala 71:47]
    node _op_t_1_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 71:92]
    node _op_t_1_T_6 = eq(_op_t_1_T_5, UInt<1>("h0")) @[IDU.scala 71:99]
    node _op_t_1_T_7 = and(_op_t_1_T_4, _op_t_1_T_6) @[IDU.scala 71:79]
    op_t[1] <= _op_t_1_T_7 @[IDU.scala 71:12]
    node _op_t_2_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 72:26]
    node _op_t_2_T_1 = eq(_op_t_2_T, UInt<5>("h13")) @[IDU.scala 72:31]
    node _op_t_2_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 72:60]
    node _op_t_2_T_3 = eq(_op_t_2_T_2, UInt<1>("h0")) @[IDU.scala 72:67]
    node _op_t_2_T_4 = and(_op_t_2_T_1, _op_t_2_T_3) @[IDU.scala 72:47]
    op_t[2] <= _op_t_2_T_4 @[IDU.scala 72:12]
    node _op_t_3_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 73:26]
    node _op_t_3_T_1 = eq(_op_t_3_T, UInt<5>("h1b")) @[IDU.scala 73:31]
    node _op_t_3_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 73:60]
    node _op_t_3_T_3 = eq(_op_t_3_T_2, UInt<1>("h0")) @[IDU.scala 73:67]
    node _op_t_3_T_4 = and(_op_t_3_T_1, _op_t_3_T_3) @[IDU.scala 73:47]
    op_t[3] <= _op_t_3_T_4 @[IDU.scala 73:12]
    node _op_t_4_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 74:26]
    node _op_t_4_T_1 = eq(_op_t_4_T, UInt<6>("h33")) @[IDU.scala 74:31]
    node _op_t_4_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 74:60]
    node _op_t_4_T_3 = eq(_op_t_4_T_2, UInt<1>("h0")) @[IDU.scala 74:67]
    node _op_t_4_T_4 = and(_op_t_4_T_1, _op_t_4_T_3) @[IDU.scala 74:47]
    node _op_t_4_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 74:92]
    node _op_t_4_T_6 = eq(_op_t_4_T_5, UInt<6>("h20")) @[IDU.scala 74:99]
    node _op_t_4_T_7 = and(_op_t_4_T_4, _op_t_4_T_6) @[IDU.scala 74:79]
    op_t[4] <= _op_t_4_T_7 @[IDU.scala 74:12]
    node _op_t_5_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 75:26]
    node _op_t_5_T_1 = eq(_op_t_5_T, UInt<6>("h3b")) @[IDU.scala 75:31]
    node _op_t_5_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 75:60]
    node _op_t_5_T_3 = eq(_op_t_5_T_2, UInt<1>("h0")) @[IDU.scala 75:67]
    node _op_t_5_T_4 = and(_op_t_5_T_1, _op_t_5_T_3) @[IDU.scala 75:47]
    node _op_t_5_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 75:92]
    node _op_t_5_T_6 = eq(_op_t_5_T_5, UInt<6>("h20")) @[IDU.scala 75:99]
    node _op_t_5_T_7 = and(_op_t_5_T_4, _op_t_5_T_6) @[IDU.scala 75:79]
    op_t[5] <= _op_t_5_T_7 @[IDU.scala 75:12]
    node _op_t_6_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 76:26]
    node _op_t_6_T_1 = eq(_op_t_6_T, UInt<6>("h33")) @[IDU.scala 76:31]
    node _op_t_6_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 76:60]
    node _op_t_6_T_3 = eq(_op_t_6_T_2, UInt<3>("h7")) @[IDU.scala 76:67]
    node _op_t_6_T_4 = and(_op_t_6_T_1, _op_t_6_T_3) @[IDU.scala 76:47]
    node _op_t_6_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 76:92]
    node _op_t_6_T_6 = eq(_op_t_6_T_5, UInt<1>("h0")) @[IDU.scala 76:99]
    node _op_t_6_T_7 = and(_op_t_6_T_4, _op_t_6_T_6) @[IDU.scala 76:79]
    op_t[6] <= _op_t_6_T_7 @[IDU.scala 76:12]
    node _op_t_7_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 77:26]
    node _op_t_7_T_1 = eq(_op_t_7_T, UInt<5>("h13")) @[IDU.scala 77:31]
    node _op_t_7_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 77:60]
    node _op_t_7_T_3 = eq(_op_t_7_T_2, UInt<3>("h7")) @[IDU.scala 77:67]
    node _op_t_7_T_4 = and(_op_t_7_T_1, _op_t_7_T_3) @[IDU.scala 77:47]
    op_t[7] <= _op_t_7_T_4 @[IDU.scala 77:12]
    node _op_t_8_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 78:26]
    node _op_t_8_T_1 = eq(_op_t_8_T, UInt<6>("h33")) @[IDU.scala 78:31]
    node _op_t_8_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 78:60]
    node _op_t_8_T_3 = eq(_op_t_8_T_2, UInt<3>("h6")) @[IDU.scala 78:67]
    node _op_t_8_T_4 = and(_op_t_8_T_1, _op_t_8_T_3) @[IDU.scala 78:47]
    node _op_t_8_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 78:92]
    node _op_t_8_T_6 = eq(_op_t_8_T_5, UInt<1>("h0")) @[IDU.scala 78:99]
    node _op_t_8_T_7 = and(_op_t_8_T_4, _op_t_8_T_6) @[IDU.scala 78:79]
    op_t[8] <= _op_t_8_T_7 @[IDU.scala 78:12]
    node _op_t_9_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 79:26]
    node _op_t_9_T_1 = eq(_op_t_9_T, UInt<5>("h13")) @[IDU.scala 79:31]
    node _op_t_9_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 79:60]
    node _op_t_9_T_3 = eq(_op_t_9_T_2, UInt<3>("h6")) @[IDU.scala 79:67]
    node _op_t_9_T_4 = and(_op_t_9_T_1, _op_t_9_T_3) @[IDU.scala 79:47]
    op_t[9] <= _op_t_9_T_4 @[IDU.scala 79:12]
    node _op_t_10_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 80:26]
    node _op_t_10_T_1 = eq(_op_t_10_T, UInt<6>("h33")) @[IDU.scala 80:31]
    node _op_t_10_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 80:60]
    node _op_t_10_T_3 = eq(_op_t_10_T_2, UInt<3>("h4")) @[IDU.scala 80:67]
    node _op_t_10_T_4 = and(_op_t_10_T_1, _op_t_10_T_3) @[IDU.scala 80:47]
    node _op_t_10_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 80:92]
    node _op_t_10_T_6 = eq(_op_t_10_T_5, UInt<1>("h0")) @[IDU.scala 80:99]
    node _op_t_10_T_7 = and(_op_t_10_T_4, _op_t_10_T_6) @[IDU.scala 80:79]
    op_t[10] <= _op_t_10_T_7 @[IDU.scala 80:12]
    node _op_t_11_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 81:26]
    node _op_t_11_T_1 = eq(_op_t_11_T, UInt<5>("h13")) @[IDU.scala 81:31]
    node _op_t_11_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 81:60]
    node _op_t_11_T_3 = eq(_op_t_11_T_2, UInt<3>("h4")) @[IDU.scala 81:67]
    node _op_t_11_T_4 = and(_op_t_11_T_1, _op_t_11_T_3) @[IDU.scala 81:47]
    op_t[11] <= _op_t_11_T_4 @[IDU.scala 81:12]
    node _op_t_12_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 82:26]
    node _op_t_12_T_1 = eq(_op_t_12_T, UInt<6>("h33")) @[IDU.scala 82:31]
    node _op_t_12_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 82:60]
    node _op_t_12_T_3 = eq(_op_t_12_T_2, UInt<1>("h1")) @[IDU.scala 82:67]
    node _op_t_12_T_4 = and(_op_t_12_T_1, _op_t_12_T_3) @[IDU.scala 82:47]
    node _op_t_12_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 82:92]
    node _op_t_12_T_6 = eq(_op_t_12_T_5, UInt<1>("h0")) @[IDU.scala 82:99]
    node _op_t_12_T_7 = and(_op_t_12_T_4, _op_t_12_T_6) @[IDU.scala 82:79]
    op_t[12] <= _op_t_12_T_7 @[IDU.scala 82:12]
    node _op_t_13_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 83:26]
    node _op_t_13_T_1 = eq(_op_t_13_T, UInt<6>("h3b")) @[IDU.scala 83:31]
    node _op_t_13_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 83:60]
    node _op_t_13_T_3 = eq(_op_t_13_T_2, UInt<1>("h1")) @[IDU.scala 83:67]
    node _op_t_13_T_4 = and(_op_t_13_T_1, _op_t_13_T_3) @[IDU.scala 83:47]
    node _op_t_13_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 83:92]
    node _op_t_13_T_6 = eq(_op_t_13_T_5, UInt<1>("h0")) @[IDU.scala 83:99]
    node _op_t_13_T_7 = and(_op_t_13_T_4, _op_t_13_T_6) @[IDU.scala 83:79]
    op_t[13] <= _op_t_13_T_7 @[IDU.scala 83:12]
    node _op_t_14_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 84:26]
    node _op_t_14_T_1 = eq(_op_t_14_T, UInt<5>("h13")) @[IDU.scala 84:31]
    node _op_t_14_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 84:60]
    node _op_t_14_T_3 = eq(_op_t_14_T_2, UInt<1>("h1")) @[IDU.scala 84:67]
    node _op_t_14_T_4 = and(_op_t_14_T_1, _op_t_14_T_3) @[IDU.scala 84:47]
    node _op_t_14_T_5 = bits(ID_reg_inst, 31, 26) @[IDU.scala 84:92]
    node _op_t_14_T_6 = eq(_op_t_14_T_5, UInt<1>("h0")) @[IDU.scala 84:99]
    node _op_t_14_T_7 = and(_op_t_14_T_4, _op_t_14_T_6) @[IDU.scala 84:79]
    op_t[14] <= _op_t_14_T_7 @[IDU.scala 84:12]
    node _op_t_15_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 85:26]
    node _op_t_15_T_1 = eq(_op_t_15_T, UInt<5>("h1b")) @[IDU.scala 85:31]
    node _op_t_15_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 85:60]
    node _op_t_15_T_3 = eq(_op_t_15_T_2, UInt<1>("h1")) @[IDU.scala 85:67]
    node _op_t_15_T_4 = and(_op_t_15_T_1, _op_t_15_T_3) @[IDU.scala 85:47]
    node _op_t_15_T_5 = bits(ID_reg_inst, 31, 26) @[IDU.scala 85:92]
    node _op_t_15_T_6 = eq(_op_t_15_T_5, UInt<1>("h0")) @[IDU.scala 85:99]
    node _op_t_15_T_7 = and(_op_t_15_T_4, _op_t_15_T_6) @[IDU.scala 85:79]
    op_t[15] <= _op_t_15_T_7 @[IDU.scala 85:12]
    node _op_t_16_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 86:26]
    node _op_t_16_T_1 = eq(_op_t_16_T, UInt<6>("h33")) @[IDU.scala 86:31]
    node _op_t_16_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 86:60]
    node _op_t_16_T_3 = eq(_op_t_16_T_2, UInt<3>("h5")) @[IDU.scala 86:67]
    node _op_t_16_T_4 = and(_op_t_16_T_1, _op_t_16_T_3) @[IDU.scala 86:47]
    node _op_t_16_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 86:92]
    node _op_t_16_T_6 = eq(_op_t_16_T_5, UInt<6>("h20")) @[IDU.scala 86:99]
    node _op_t_16_T_7 = and(_op_t_16_T_4, _op_t_16_T_6) @[IDU.scala 86:79]
    op_t[16] <= _op_t_16_T_7 @[IDU.scala 86:12]
    node _op_t_17_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 87:26]
    node _op_t_17_T_1 = eq(_op_t_17_T, UInt<6>("h3b")) @[IDU.scala 87:31]
    node _op_t_17_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 87:60]
    node _op_t_17_T_3 = eq(_op_t_17_T_2, UInt<3>("h5")) @[IDU.scala 87:67]
    node _op_t_17_T_4 = and(_op_t_17_T_1, _op_t_17_T_3) @[IDU.scala 87:47]
    node _op_t_17_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 87:92]
    node _op_t_17_T_6 = eq(_op_t_17_T_5, UInt<6>("h20")) @[IDU.scala 87:99]
    node _op_t_17_T_7 = and(_op_t_17_T_4, _op_t_17_T_6) @[IDU.scala 87:79]
    op_t[17] <= _op_t_17_T_7 @[IDU.scala 87:12]
    node _op_t_18_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 88:26]
    node _op_t_18_T_1 = eq(_op_t_18_T, UInt<5>("h13")) @[IDU.scala 88:31]
    node _op_t_18_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 88:60]
    node _op_t_18_T_3 = eq(_op_t_18_T_2, UInt<3>("h5")) @[IDU.scala 88:67]
    node _op_t_18_T_4 = and(_op_t_18_T_1, _op_t_18_T_3) @[IDU.scala 88:47]
    node _op_t_18_T_5 = bits(ID_reg_inst, 31, 26) @[IDU.scala 88:92]
    node _op_t_18_T_6 = eq(_op_t_18_T_5, UInt<5>("h10")) @[IDU.scala 88:99]
    node _op_t_18_T_7 = and(_op_t_18_T_4, _op_t_18_T_6) @[IDU.scala 88:79]
    op_t[18] <= _op_t_18_T_7 @[IDU.scala 88:12]
    node _op_t_19_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 89:26]
    node _op_t_19_T_1 = eq(_op_t_19_T, UInt<5>("h1b")) @[IDU.scala 89:31]
    node _op_t_19_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 89:60]
    node _op_t_19_T_3 = eq(_op_t_19_T_2, UInt<3>("h5")) @[IDU.scala 89:67]
    node _op_t_19_T_4 = and(_op_t_19_T_1, _op_t_19_T_3) @[IDU.scala 89:47]
    node _op_t_19_T_5 = bits(ID_reg_inst, 31, 26) @[IDU.scala 89:92]
    node _op_t_19_T_6 = eq(_op_t_19_T_5, UInt<5>("h10")) @[IDU.scala 89:99]
    node _op_t_19_T_7 = and(_op_t_19_T_4, _op_t_19_T_6) @[IDU.scala 89:79]
    op_t[19] <= _op_t_19_T_7 @[IDU.scala 89:12]
    node _op_t_20_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 90:26]
    node _op_t_20_T_1 = eq(_op_t_20_T, UInt<6>("h33")) @[IDU.scala 90:31]
    node _op_t_20_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 90:60]
    node _op_t_20_T_3 = eq(_op_t_20_T_2, UInt<3>("h5")) @[IDU.scala 90:67]
    node _op_t_20_T_4 = and(_op_t_20_T_1, _op_t_20_T_3) @[IDU.scala 90:47]
    node _op_t_20_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 90:92]
    node _op_t_20_T_6 = eq(_op_t_20_T_5, UInt<1>("h0")) @[IDU.scala 90:99]
    node _op_t_20_T_7 = and(_op_t_20_T_4, _op_t_20_T_6) @[IDU.scala 90:79]
    op_t[20] <= _op_t_20_T_7 @[IDU.scala 90:12]
    node _op_t_21_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 91:26]
    node _op_t_21_T_1 = eq(_op_t_21_T, UInt<6>("h3b")) @[IDU.scala 91:31]
    node _op_t_21_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 91:60]
    node _op_t_21_T_3 = eq(_op_t_21_T_2, UInt<3>("h5")) @[IDU.scala 91:67]
    node _op_t_21_T_4 = and(_op_t_21_T_1, _op_t_21_T_3) @[IDU.scala 91:47]
    node _op_t_21_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 91:92]
    node _op_t_21_T_6 = eq(_op_t_21_T_5, UInt<1>("h0")) @[IDU.scala 91:99]
    node _op_t_21_T_7 = and(_op_t_21_T_4, _op_t_21_T_6) @[IDU.scala 91:79]
    op_t[21] <= _op_t_21_T_7 @[IDU.scala 91:12]
    node _op_t_22_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 92:26]
    node _op_t_22_T_1 = eq(_op_t_22_T, UInt<5>("h13")) @[IDU.scala 92:31]
    node _op_t_22_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 92:60]
    node _op_t_22_T_3 = eq(_op_t_22_T_2, UInt<3>("h5")) @[IDU.scala 92:67]
    node _op_t_22_T_4 = and(_op_t_22_T_1, _op_t_22_T_3) @[IDU.scala 92:47]
    node _op_t_22_T_5 = bits(ID_reg_inst, 31, 26) @[IDU.scala 92:92]
    node _op_t_22_T_6 = eq(_op_t_22_T_5, UInt<1>("h0")) @[IDU.scala 92:99]
    node _op_t_22_T_7 = and(_op_t_22_T_4, _op_t_22_T_6) @[IDU.scala 92:79]
    op_t[22] <= _op_t_22_T_7 @[IDU.scala 92:12]
    node _op_t_23_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 93:26]
    node _op_t_23_T_1 = eq(_op_t_23_T, UInt<5>("h1b")) @[IDU.scala 93:31]
    node _op_t_23_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 93:60]
    node _op_t_23_T_3 = eq(_op_t_23_T_2, UInt<3>("h5")) @[IDU.scala 93:67]
    node _op_t_23_T_4 = and(_op_t_23_T_1, _op_t_23_T_3) @[IDU.scala 93:47]
    node _op_t_23_T_5 = bits(ID_reg_inst, 31, 26) @[IDU.scala 93:92]
    node _op_t_23_T_6 = eq(_op_t_23_T_5, UInt<1>("h0")) @[IDU.scala 93:99]
    node _op_t_23_T_7 = and(_op_t_23_T_4, _op_t_23_T_6) @[IDU.scala 93:79]
    op_t[23] <= _op_t_23_T_7 @[IDU.scala 93:12]
    node _op_t_24_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 94:26]
    node _op_t_24_T_1 = eq(_op_t_24_T, UInt<6>("h37")) @[IDU.scala 94:31]
    op_t[24] <= _op_t_24_T_1 @[IDU.scala 94:12]
    node _op_t_25_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 95:26]
    node _op_t_25_T_1 = eq(_op_t_25_T, UInt<5>("h17")) @[IDU.scala 95:31]
    op_t[25] <= _op_t_25_T_1 @[IDU.scala 95:12]
    node _op_t_26_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 96:26]
    node _op_t_26_T_1 = eq(_op_t_26_T, UInt<6>("h33")) @[IDU.scala 96:31]
    node _op_t_26_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 96:60]
    node _op_t_26_T_3 = eq(_op_t_26_T_2, UInt<2>("h2")) @[IDU.scala 96:67]
    node _op_t_26_T_4 = and(_op_t_26_T_1, _op_t_26_T_3) @[IDU.scala 96:47]
    node _op_t_26_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 96:92]
    node _op_t_26_T_6 = eq(_op_t_26_T_5, UInt<1>("h0")) @[IDU.scala 96:99]
    node _op_t_26_T_7 = and(_op_t_26_T_4, _op_t_26_T_6) @[IDU.scala 96:79]
    op_t[26] <= _op_t_26_T_7 @[IDU.scala 96:12]
    node _op_t_27_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 97:26]
    node _op_t_27_T_1 = eq(_op_t_27_T, UInt<6>("h33")) @[IDU.scala 97:31]
    node _op_t_27_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 97:60]
    node _op_t_27_T_3 = eq(_op_t_27_T_2, UInt<2>("h3")) @[IDU.scala 97:67]
    node _op_t_27_T_4 = and(_op_t_27_T_1, _op_t_27_T_3) @[IDU.scala 97:47]
    node _op_t_27_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 97:92]
    node _op_t_27_T_6 = eq(_op_t_27_T_5, UInt<1>("h0")) @[IDU.scala 97:99]
    node _op_t_27_T_7 = and(_op_t_27_T_4, _op_t_27_T_6) @[IDU.scala 97:79]
    op_t[27] <= _op_t_27_T_7 @[IDU.scala 97:12]
    node _op_t_28_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 98:26]
    node _op_t_28_T_1 = eq(_op_t_28_T, UInt<5>("h13")) @[IDU.scala 98:31]
    node _op_t_28_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 98:60]
    node _op_t_28_T_3 = eq(_op_t_28_T_2, UInt<2>("h2")) @[IDU.scala 98:67]
    node _op_t_28_T_4 = and(_op_t_28_T_1, _op_t_28_T_3) @[IDU.scala 98:47]
    op_t[28] <= _op_t_28_T_4 @[IDU.scala 98:12]
    node _op_t_29_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 99:26]
    node _op_t_29_T_1 = eq(_op_t_29_T, UInt<5>("h13")) @[IDU.scala 99:31]
    node _op_t_29_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 99:60]
    node _op_t_29_T_3 = eq(_op_t_29_T_2, UInt<2>("h3")) @[IDU.scala 99:67]
    node _op_t_29_T_4 = and(_op_t_29_T_1, _op_t_29_T_3) @[IDU.scala 99:47]
    op_t[29] <= _op_t_29_T_4 @[IDU.scala 99:12]
    node _op_t_30_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 100:26]
    node _op_t_30_T_1 = eq(_op_t_30_T, UInt<7>("h63")) @[IDU.scala 100:31]
    node _op_t_30_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 100:60]
    node _op_t_30_T_3 = eq(_op_t_30_T_2, UInt<1>("h0")) @[IDU.scala 100:67]
    node _op_t_30_T_4 = and(_op_t_30_T_1, _op_t_30_T_3) @[IDU.scala 100:47]
    op_t[30] <= _op_t_30_T_4 @[IDU.scala 100:12]
    node _op_t_31_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 101:26]
    node _op_t_31_T_1 = eq(_op_t_31_T, UInt<7>("h63")) @[IDU.scala 101:31]
    node _op_t_31_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 101:60]
    node _op_t_31_T_3 = eq(_op_t_31_T_2, UInt<1>("h1")) @[IDU.scala 101:67]
    node _op_t_31_T_4 = and(_op_t_31_T_1, _op_t_31_T_3) @[IDU.scala 101:47]
    op_t[31] <= _op_t_31_T_4 @[IDU.scala 101:12]
    node _op_t_32_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 102:26]
    node _op_t_32_T_1 = eq(_op_t_32_T, UInt<7>("h63")) @[IDU.scala 102:31]
    node _op_t_32_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 102:60]
    node _op_t_32_T_3 = eq(_op_t_32_T_2, UInt<3>("h5")) @[IDU.scala 102:67]
    node _op_t_32_T_4 = and(_op_t_32_T_1, _op_t_32_T_3) @[IDU.scala 102:47]
    op_t[32] <= _op_t_32_T_4 @[IDU.scala 102:12]
    node _op_t_33_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 103:26]
    node _op_t_33_T_1 = eq(_op_t_33_T, UInt<7>("h63")) @[IDU.scala 103:31]
    node _op_t_33_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 103:60]
    node _op_t_33_T_3 = eq(_op_t_33_T_2, UInt<3>("h7")) @[IDU.scala 103:67]
    node _op_t_33_T_4 = and(_op_t_33_T_1, _op_t_33_T_3) @[IDU.scala 103:47]
    op_t[33] <= _op_t_33_T_4 @[IDU.scala 103:12]
    node _op_t_34_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 104:26]
    node _op_t_34_T_1 = eq(_op_t_34_T, UInt<7>("h63")) @[IDU.scala 104:31]
    node _op_t_34_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 104:60]
    node _op_t_34_T_3 = eq(_op_t_34_T_2, UInt<3>("h4")) @[IDU.scala 104:67]
    node _op_t_34_T_4 = and(_op_t_34_T_1, _op_t_34_T_3) @[IDU.scala 104:47]
    op_t[34] <= _op_t_34_T_4 @[IDU.scala 104:12]
    node _op_t_35_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 105:26]
    node _op_t_35_T_1 = eq(_op_t_35_T, UInt<7>("h63")) @[IDU.scala 105:31]
    node _op_t_35_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 105:60]
    node _op_t_35_T_3 = eq(_op_t_35_T_2, UInt<3>("h6")) @[IDU.scala 105:67]
    node _op_t_35_T_4 = and(_op_t_35_T_1, _op_t_35_T_3) @[IDU.scala 105:47]
    op_t[35] <= _op_t_35_T_4 @[IDU.scala 105:12]
    node _op_t_36_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 106:26]
    node _op_t_36_T_1 = eq(_op_t_36_T, UInt<7>("h6f")) @[IDU.scala 106:31]
    op_t[36] <= _op_t_36_T_1 @[IDU.scala 106:12]
    node _op_t_37_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 107:26]
    node _op_t_37_T_1 = eq(_op_t_37_T, UInt<7>("h67")) @[IDU.scala 107:31]
    node _op_t_37_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 107:60]
    node _op_t_37_T_3 = eq(_op_t_37_T_2, UInt<1>("h0")) @[IDU.scala 107:67]
    node _op_t_37_T_4 = and(_op_t_37_T_1, _op_t_37_T_3) @[IDU.scala 107:47]
    op_t[37] <= _op_t_37_T_4 @[IDU.scala 107:12]
    node _op_t_38_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 108:26]
    node _op_t_38_T_1 = eq(_op_t_38_T, UInt<2>("h3")) @[IDU.scala 108:31]
    node _op_t_38_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 108:60]
    node _op_t_38_T_3 = eq(_op_t_38_T_2, UInt<1>("h0")) @[IDU.scala 108:67]
    node _op_t_38_T_4 = and(_op_t_38_T_1, _op_t_38_T_3) @[IDU.scala 108:47]
    op_t[38] <= _op_t_38_T_4 @[IDU.scala 108:12]
    node _op_t_39_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 109:26]
    node _op_t_39_T_1 = eq(_op_t_39_T, UInt<2>("h3")) @[IDU.scala 109:31]
    node _op_t_39_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 109:60]
    node _op_t_39_T_3 = eq(_op_t_39_T_2, UInt<1>("h1")) @[IDU.scala 109:67]
    node _op_t_39_T_4 = and(_op_t_39_T_1, _op_t_39_T_3) @[IDU.scala 109:47]
    op_t[39] <= _op_t_39_T_4 @[IDU.scala 109:12]
    node _op_t_40_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 110:26]
    node _op_t_40_T_1 = eq(_op_t_40_T, UInt<2>("h3")) @[IDU.scala 110:31]
    node _op_t_40_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 110:60]
    node _op_t_40_T_3 = eq(_op_t_40_T_2, UInt<2>("h2")) @[IDU.scala 110:67]
    node _op_t_40_T_4 = and(_op_t_40_T_1, _op_t_40_T_3) @[IDU.scala 110:47]
    op_t[40] <= _op_t_40_T_4 @[IDU.scala 110:12]
    node _op_t_41_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 111:26]
    node _op_t_41_T_1 = eq(_op_t_41_T, UInt<2>("h3")) @[IDU.scala 111:31]
    node _op_t_41_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 111:60]
    node _op_t_41_T_3 = eq(_op_t_41_T_2, UInt<2>("h3")) @[IDU.scala 111:67]
    node _op_t_41_T_4 = and(_op_t_41_T_1, _op_t_41_T_3) @[IDU.scala 111:47]
    op_t[41] <= _op_t_41_T_4 @[IDU.scala 111:12]
    node _op_t_42_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 112:26]
    node _op_t_42_T_1 = eq(_op_t_42_T, UInt<6>("h23")) @[IDU.scala 112:31]
    node _op_t_42_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 112:60]
    node _op_t_42_T_3 = eq(_op_t_42_T_2, UInt<1>("h0")) @[IDU.scala 112:67]
    node _op_t_42_T_4 = and(_op_t_42_T_1, _op_t_42_T_3) @[IDU.scala 112:47]
    op_t[42] <= _op_t_42_T_4 @[IDU.scala 112:12]
    node _op_t_43_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 113:26]
    node _op_t_43_T_1 = eq(_op_t_43_T, UInt<6>("h23")) @[IDU.scala 113:31]
    node _op_t_43_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 113:60]
    node _op_t_43_T_3 = eq(_op_t_43_T_2, UInt<1>("h1")) @[IDU.scala 113:67]
    node _op_t_43_T_4 = and(_op_t_43_T_1, _op_t_43_T_3) @[IDU.scala 113:47]
    op_t[43] <= _op_t_43_T_4 @[IDU.scala 113:12]
    node _op_t_44_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 114:26]
    node _op_t_44_T_1 = eq(_op_t_44_T, UInt<6>("h23")) @[IDU.scala 114:31]
    node _op_t_44_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 114:60]
    node _op_t_44_T_3 = eq(_op_t_44_T_2, UInt<2>("h2")) @[IDU.scala 114:67]
    node _op_t_44_T_4 = and(_op_t_44_T_1, _op_t_44_T_3) @[IDU.scala 114:47]
    op_t[44] <= _op_t_44_T_4 @[IDU.scala 114:12]
    node _op_t_45_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 115:26]
    node _op_t_45_T_1 = eq(_op_t_45_T, UInt<6>("h23")) @[IDU.scala 115:31]
    node _op_t_45_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 115:60]
    node _op_t_45_T_3 = eq(_op_t_45_T_2, UInt<2>("h3")) @[IDU.scala 115:67]
    node _op_t_45_T_4 = and(_op_t_45_T_1, _op_t_45_T_3) @[IDU.scala 115:47]
    op_t[45] <= _op_t_45_T_4 @[IDU.scala 115:12]
    node _op_t_46_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 116:26]
    node _op_t_46_T_1 = eq(_op_t_46_T, UInt<2>("h3")) @[IDU.scala 116:31]
    node _op_t_46_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 116:60]
    node _op_t_46_T_3 = eq(_op_t_46_T_2, UInt<3>("h4")) @[IDU.scala 116:67]
    node _op_t_46_T_4 = and(_op_t_46_T_1, _op_t_46_T_3) @[IDU.scala 116:47]
    op_t[46] <= _op_t_46_T_4 @[IDU.scala 116:12]
    node _op_t_47_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 117:26]
    node _op_t_47_T_1 = eq(_op_t_47_T, UInt<2>("h3")) @[IDU.scala 117:31]
    node _op_t_47_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 117:60]
    node _op_t_47_T_3 = eq(_op_t_47_T_2, UInt<3>("h5")) @[IDU.scala 117:67]
    node _op_t_47_T_4 = and(_op_t_47_T_1, _op_t_47_T_3) @[IDU.scala 117:47]
    op_t[47] <= _op_t_47_T_4 @[IDU.scala 117:12]
    node _op_t_48_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 118:26]
    node _op_t_48_T_1 = eq(_op_t_48_T, UInt<2>("h3")) @[IDU.scala 118:31]
    node _op_t_48_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 118:60]
    node _op_t_48_T_3 = eq(_op_t_48_T_2, UInt<3>("h6")) @[IDU.scala 118:67]
    node _op_t_48_T_4 = and(_op_t_48_T_1, _op_t_48_T_3) @[IDU.scala 118:47]
    op_t[48] <= _op_t_48_T_4 @[IDU.scala 118:12]
    node _op_t_49_T = eq(ID_reg_inst, UInt<21>("h100073")) @[IDU.scala 119:26]
    op_t[49] <= _op_t_49_T @[IDU.scala 119:12]
    node _op_t_50_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 122:26]
    node _op_t_50_T_1 = eq(_op_t_50_T, UInt<6>("h33")) @[IDU.scala 122:31]
    node _op_t_50_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 122:60]
    node _op_t_50_T_3 = eq(_op_t_50_T_2, UInt<1>("h0")) @[IDU.scala 122:67]
    node _op_t_50_T_4 = and(_op_t_50_T_1, _op_t_50_T_3) @[IDU.scala 122:47]
    node _op_t_50_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 122:92]
    node _op_t_50_T_6 = eq(_op_t_50_T_5, UInt<1>("h1")) @[IDU.scala 122:99]
    node _op_t_50_T_7 = and(_op_t_50_T_4, _op_t_50_T_6) @[IDU.scala 122:79]
    op_t[50] <= _op_t_50_T_7 @[IDU.scala 122:12]
    node _op_t_51_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 123:26]
    node _op_t_51_T_1 = eq(_op_t_51_T, UInt<6>("h3b")) @[IDU.scala 123:31]
    node _op_t_51_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 123:60]
    node _op_t_51_T_3 = eq(_op_t_51_T_2, UInt<1>("h0")) @[IDU.scala 123:67]
    node _op_t_51_T_4 = and(_op_t_51_T_1, _op_t_51_T_3) @[IDU.scala 123:47]
    node _op_t_51_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 123:92]
    node _op_t_51_T_6 = eq(_op_t_51_T_5, UInt<1>("h1")) @[IDU.scala 123:99]
    node _op_t_51_T_7 = and(_op_t_51_T_4, _op_t_51_T_6) @[IDU.scala 123:79]
    op_t[51] <= _op_t_51_T_7 @[IDU.scala 123:12]
    node _op_t_52_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 124:26]
    node _op_t_52_T_1 = eq(_op_t_52_T, UInt<6>("h33")) @[IDU.scala 124:31]
    node _op_t_52_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 124:60]
    node _op_t_52_T_3 = eq(_op_t_52_T_2, UInt<1>("h1")) @[IDU.scala 124:67]
    node _op_t_52_T_4 = and(_op_t_52_T_1, _op_t_52_T_3) @[IDU.scala 124:47]
    node _op_t_52_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 124:92]
    node _op_t_52_T_6 = eq(_op_t_52_T_5, UInt<1>("h1")) @[IDU.scala 124:99]
    node _op_t_52_T_7 = and(_op_t_52_T_4, _op_t_52_T_6) @[IDU.scala 124:79]
    op_t[52] <= _op_t_52_T_7 @[IDU.scala 124:12]
    node _op_t_53_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 125:26]
    node _op_t_53_T_1 = eq(_op_t_53_T, UInt<6>("h33")) @[IDU.scala 125:31]
    node _op_t_53_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 125:60]
    node _op_t_53_T_3 = eq(_op_t_53_T_2, UInt<2>("h3")) @[IDU.scala 125:67]
    node _op_t_53_T_4 = and(_op_t_53_T_1, _op_t_53_T_3) @[IDU.scala 125:47]
    node _op_t_53_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 125:92]
    node _op_t_53_T_6 = eq(_op_t_53_T_5, UInt<1>("h1")) @[IDU.scala 125:99]
    node _op_t_53_T_7 = and(_op_t_53_T_4, _op_t_53_T_6) @[IDU.scala 125:79]
    op_t[53] <= _op_t_53_T_7 @[IDU.scala 125:12]
    node _op_t_54_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 126:26]
    node _op_t_54_T_1 = eq(_op_t_54_T, UInt<6>("h33")) @[IDU.scala 126:31]
    node _op_t_54_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 126:60]
    node _op_t_54_T_3 = eq(_op_t_54_T_2, UInt<2>("h2")) @[IDU.scala 126:67]
    node _op_t_54_T_4 = and(_op_t_54_T_1, _op_t_54_T_3) @[IDU.scala 126:47]
    node _op_t_54_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 126:92]
    node _op_t_54_T_6 = eq(_op_t_54_T_5, UInt<1>("h1")) @[IDU.scala 126:99]
    node _op_t_54_T_7 = and(_op_t_54_T_4, _op_t_54_T_6) @[IDU.scala 126:79]
    op_t[54] <= _op_t_54_T_7 @[IDU.scala 126:12]
    node _op_t_55_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 127:26]
    node _op_t_55_T_1 = eq(_op_t_55_T, UInt<6>("h33")) @[IDU.scala 127:31]
    node _op_t_55_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 127:60]
    node _op_t_55_T_3 = eq(_op_t_55_T_2, UInt<3>("h4")) @[IDU.scala 127:67]
    node _op_t_55_T_4 = and(_op_t_55_T_1, _op_t_55_T_3) @[IDU.scala 127:47]
    node _op_t_55_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 127:92]
    node _op_t_55_T_6 = eq(_op_t_55_T_5, UInt<1>("h1")) @[IDU.scala 127:99]
    node _op_t_55_T_7 = and(_op_t_55_T_4, _op_t_55_T_6) @[IDU.scala 127:79]
    op_t[55] <= _op_t_55_T_7 @[IDU.scala 127:12]
    node _op_t_56_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 128:26]
    node _op_t_56_T_1 = eq(_op_t_56_T, UInt<6>("h3b")) @[IDU.scala 128:31]
    node _op_t_56_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 128:60]
    node _op_t_56_T_3 = eq(_op_t_56_T_2, UInt<3>("h4")) @[IDU.scala 128:67]
    node _op_t_56_T_4 = and(_op_t_56_T_1, _op_t_56_T_3) @[IDU.scala 128:47]
    node _op_t_56_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 128:92]
    node _op_t_56_T_6 = eq(_op_t_56_T_5, UInt<1>("h1")) @[IDU.scala 128:99]
    node _op_t_56_T_7 = and(_op_t_56_T_4, _op_t_56_T_6) @[IDU.scala 128:79]
    op_t[56] <= _op_t_56_T_7 @[IDU.scala 128:12]
    node _op_t_57_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 129:26]
    node _op_t_57_T_1 = eq(_op_t_57_T, UInt<6>("h33")) @[IDU.scala 129:31]
    node _op_t_57_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 129:60]
    node _op_t_57_T_3 = eq(_op_t_57_T_2, UInt<3>("h5")) @[IDU.scala 129:67]
    node _op_t_57_T_4 = and(_op_t_57_T_1, _op_t_57_T_3) @[IDU.scala 129:47]
    node _op_t_57_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 129:92]
    node _op_t_57_T_6 = eq(_op_t_57_T_5, UInt<1>("h1")) @[IDU.scala 129:99]
    node _op_t_57_T_7 = and(_op_t_57_T_4, _op_t_57_T_6) @[IDU.scala 129:79]
    op_t[57] <= _op_t_57_T_7 @[IDU.scala 129:12]
    node _op_t_58_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 130:26]
    node _op_t_58_T_1 = eq(_op_t_58_T, UInt<6>("h3b")) @[IDU.scala 130:31]
    node _op_t_58_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 130:60]
    node _op_t_58_T_3 = eq(_op_t_58_T_2, UInt<3>("h5")) @[IDU.scala 130:67]
    node _op_t_58_T_4 = and(_op_t_58_T_1, _op_t_58_T_3) @[IDU.scala 130:47]
    node _op_t_58_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 130:92]
    node _op_t_58_T_6 = eq(_op_t_58_T_5, UInt<1>("h1")) @[IDU.scala 130:99]
    node _op_t_58_T_7 = and(_op_t_58_T_4, _op_t_58_T_6) @[IDU.scala 130:79]
    op_t[58] <= _op_t_58_T_7 @[IDU.scala 130:12]
    node _op_t_59_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 131:26]
    node _op_t_59_T_1 = eq(_op_t_59_T, UInt<6>("h33")) @[IDU.scala 131:31]
    node _op_t_59_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 131:60]
    node _op_t_59_T_3 = eq(_op_t_59_T_2, UInt<3>("h6")) @[IDU.scala 131:67]
    node _op_t_59_T_4 = and(_op_t_59_T_1, _op_t_59_T_3) @[IDU.scala 131:47]
    node _op_t_59_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 131:92]
    node _op_t_59_T_6 = eq(_op_t_59_T_5, UInt<1>("h1")) @[IDU.scala 131:99]
    node _op_t_59_T_7 = and(_op_t_59_T_4, _op_t_59_T_6) @[IDU.scala 131:79]
    op_t[59] <= _op_t_59_T_7 @[IDU.scala 131:12]
    node _op_t_60_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 132:26]
    node _op_t_60_T_1 = eq(_op_t_60_T, UInt<6>("h3b")) @[IDU.scala 132:31]
    node _op_t_60_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 132:60]
    node _op_t_60_T_3 = eq(_op_t_60_T_2, UInt<3>("h6")) @[IDU.scala 132:67]
    node _op_t_60_T_4 = and(_op_t_60_T_1, _op_t_60_T_3) @[IDU.scala 132:47]
    node _op_t_60_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 132:92]
    node _op_t_60_T_6 = eq(_op_t_60_T_5, UInt<1>("h1")) @[IDU.scala 132:99]
    node _op_t_60_T_7 = and(_op_t_60_T_4, _op_t_60_T_6) @[IDU.scala 132:79]
    op_t[60] <= _op_t_60_T_7 @[IDU.scala 132:12]
    node _op_t_61_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 133:26]
    node _op_t_61_T_1 = eq(_op_t_61_T, UInt<6>("h33")) @[IDU.scala 133:31]
    node _op_t_61_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 133:60]
    node _op_t_61_T_3 = eq(_op_t_61_T_2, UInt<3>("h7")) @[IDU.scala 133:67]
    node _op_t_61_T_4 = and(_op_t_61_T_1, _op_t_61_T_3) @[IDU.scala 133:47]
    node _op_t_61_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 133:92]
    node _op_t_61_T_6 = eq(_op_t_61_T_5, UInt<1>("h1")) @[IDU.scala 133:99]
    node _op_t_61_T_7 = and(_op_t_61_T_4, _op_t_61_T_6) @[IDU.scala 133:79]
    op_t[61] <= _op_t_61_T_7 @[IDU.scala 133:12]
    node _op_t_62_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 134:26]
    node _op_t_62_T_1 = eq(_op_t_62_T, UInt<6>("h3b")) @[IDU.scala 134:31]
    node _op_t_62_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 134:60]
    node _op_t_62_T_3 = eq(_op_t_62_T_2, UInt<3>("h7")) @[IDU.scala 134:67]
    node _op_t_62_T_4 = and(_op_t_62_T_1, _op_t_62_T_3) @[IDU.scala 134:47]
    node _op_t_62_T_5 = bits(ID_reg_inst, 31, 25) @[IDU.scala 134:92]
    node _op_t_62_T_6 = eq(_op_t_62_T_5, UInt<1>("h1")) @[IDU.scala 134:99]
    node _op_t_62_T_7 = and(_op_t_62_T_4, _op_t_62_T_6) @[IDU.scala 134:79]
    op_t[62] <= _op_t_62_T_7 @[IDU.scala 134:12]
    node _op_t_63_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 137:26]
    node _op_t_63_T_1 = eq(_op_t_63_T, UInt<7>("h73")) @[IDU.scala 137:31]
    node _op_t_63_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 137:60]
    node _op_t_63_T_3 = eq(_op_t_63_T_2, UInt<1>("h1")) @[IDU.scala 137:67]
    node _op_t_63_T_4 = and(_op_t_63_T_1, _op_t_63_T_3) @[IDU.scala 137:47]
    op_t[63] <= _op_t_63_T_4 @[IDU.scala 137:12]
    node _op_t_64_T = bits(ID_reg_inst, 6, 0) @[IDU.scala 138:26]
    node _op_t_64_T_1 = eq(_op_t_64_T, UInt<7>("h73")) @[IDU.scala 138:31]
    node _op_t_64_T_2 = bits(ID_reg_inst, 14, 12) @[IDU.scala 138:60]
    node _op_t_64_T_3 = eq(_op_t_64_T_2, UInt<2>("h2")) @[IDU.scala 138:67]
    node _op_t_64_T_4 = and(_op_t_64_T_1, _op_t_64_T_3) @[IDU.scala 138:47]
    op_t[64] <= _op_t_64_T_4 @[IDU.scala 138:12]
    node _op_t_65_T = eq(ID_reg_inst, UInt<7>("h73")) @[IDU.scala 139:26]
    op_t[65] <= _op_t_65_T @[IDU.scala 139:12]
    node _op_t_66_T = eq(ID_reg_inst, UInt<30>("h30200073")) @[IDU.scala 140:26]
    op_t[66] <= _op_t_66_T @[IDU.scala 140:12]
    wire op : UInt<80> @[IDU.scala 142:15]
    node op_lo_lo_lo_lo_lo = cat(op_t[1], op_t[0]) @[IDU.scala 143:13]
    node op_lo_lo_lo_lo_hi_hi = cat(op_t[4], op_t[3]) @[IDU.scala 143:13]
    node op_lo_lo_lo_lo_hi = cat(op_lo_lo_lo_lo_hi_hi, op_t[2]) @[IDU.scala 143:13]
    node op_lo_lo_lo_lo = cat(op_lo_lo_lo_lo_hi, op_lo_lo_lo_lo_lo) @[IDU.scala 143:13]
    node op_lo_lo_lo_hi_lo = cat(op_t[6], op_t[5]) @[IDU.scala 143:13]
    node op_lo_lo_lo_hi_hi_hi = cat(op_t[9], op_t[8]) @[IDU.scala 143:13]
    node op_lo_lo_lo_hi_hi = cat(op_lo_lo_lo_hi_hi_hi, op_t[7]) @[IDU.scala 143:13]
    node op_lo_lo_lo_hi = cat(op_lo_lo_lo_hi_hi, op_lo_lo_lo_hi_lo) @[IDU.scala 143:13]
    node op_lo_lo_lo = cat(op_lo_lo_lo_hi, op_lo_lo_lo_lo) @[IDU.scala 143:13]
    node op_lo_lo_hi_lo_lo = cat(op_t[11], op_t[10]) @[IDU.scala 143:13]
    node op_lo_lo_hi_lo_hi_hi = cat(op_t[14], op_t[13]) @[IDU.scala 143:13]
    node op_lo_lo_hi_lo_hi = cat(op_lo_lo_hi_lo_hi_hi, op_t[12]) @[IDU.scala 143:13]
    node op_lo_lo_hi_lo = cat(op_lo_lo_hi_lo_hi, op_lo_lo_hi_lo_lo) @[IDU.scala 143:13]
    node op_lo_lo_hi_hi_lo = cat(op_t[16], op_t[15]) @[IDU.scala 143:13]
    node op_lo_lo_hi_hi_hi_hi = cat(op_t[19], op_t[18]) @[IDU.scala 143:13]
    node op_lo_lo_hi_hi_hi = cat(op_lo_lo_hi_hi_hi_hi, op_t[17]) @[IDU.scala 143:13]
    node op_lo_lo_hi_hi = cat(op_lo_lo_hi_hi_hi, op_lo_lo_hi_hi_lo) @[IDU.scala 143:13]
    node op_lo_lo_hi = cat(op_lo_lo_hi_hi, op_lo_lo_hi_lo) @[IDU.scala 143:13]
    node op_lo_lo = cat(op_lo_lo_hi, op_lo_lo_lo) @[IDU.scala 143:13]
    node op_lo_hi_lo_lo_lo = cat(op_t[21], op_t[20]) @[IDU.scala 143:13]
    node op_lo_hi_lo_lo_hi_hi = cat(op_t[24], op_t[23]) @[IDU.scala 143:13]
    node op_lo_hi_lo_lo_hi = cat(op_lo_hi_lo_lo_hi_hi, op_t[22]) @[IDU.scala 143:13]
    node op_lo_hi_lo_lo = cat(op_lo_hi_lo_lo_hi, op_lo_hi_lo_lo_lo) @[IDU.scala 143:13]
    node op_lo_hi_lo_hi_lo = cat(op_t[26], op_t[25]) @[IDU.scala 143:13]
    node op_lo_hi_lo_hi_hi_hi = cat(op_t[29], op_t[28]) @[IDU.scala 143:13]
    node op_lo_hi_lo_hi_hi = cat(op_lo_hi_lo_hi_hi_hi, op_t[27]) @[IDU.scala 143:13]
    node op_lo_hi_lo_hi = cat(op_lo_hi_lo_hi_hi, op_lo_hi_lo_hi_lo) @[IDU.scala 143:13]
    node op_lo_hi_lo = cat(op_lo_hi_lo_hi, op_lo_hi_lo_lo) @[IDU.scala 143:13]
    node op_lo_hi_hi_lo_lo = cat(op_t[31], op_t[30]) @[IDU.scala 143:13]
    node op_lo_hi_hi_lo_hi_hi = cat(op_t[34], op_t[33]) @[IDU.scala 143:13]
    node op_lo_hi_hi_lo_hi = cat(op_lo_hi_hi_lo_hi_hi, op_t[32]) @[IDU.scala 143:13]
    node op_lo_hi_hi_lo = cat(op_lo_hi_hi_lo_hi, op_lo_hi_hi_lo_lo) @[IDU.scala 143:13]
    node op_lo_hi_hi_hi_lo = cat(op_t[36], op_t[35]) @[IDU.scala 143:13]
    node op_lo_hi_hi_hi_hi_hi = cat(op_t[39], op_t[38]) @[IDU.scala 143:13]
    node op_lo_hi_hi_hi_hi = cat(op_lo_hi_hi_hi_hi_hi, op_t[37]) @[IDU.scala 143:13]
    node op_lo_hi_hi_hi = cat(op_lo_hi_hi_hi_hi, op_lo_hi_hi_hi_lo) @[IDU.scala 143:13]
    node op_lo_hi_hi = cat(op_lo_hi_hi_hi, op_lo_hi_hi_lo) @[IDU.scala 143:13]
    node op_lo_hi = cat(op_lo_hi_hi, op_lo_hi_lo) @[IDU.scala 143:13]
    node op_lo = cat(op_lo_hi, op_lo_lo) @[IDU.scala 143:13]
    node op_hi_lo_lo_lo_lo = cat(op_t[41], op_t[40]) @[IDU.scala 143:13]
    node op_hi_lo_lo_lo_hi_hi = cat(op_t[44], op_t[43]) @[IDU.scala 143:13]
    node op_hi_lo_lo_lo_hi = cat(op_hi_lo_lo_lo_hi_hi, op_t[42]) @[IDU.scala 143:13]
    node op_hi_lo_lo_lo = cat(op_hi_lo_lo_lo_hi, op_hi_lo_lo_lo_lo) @[IDU.scala 143:13]
    node op_hi_lo_lo_hi_lo = cat(op_t[46], op_t[45]) @[IDU.scala 143:13]
    node op_hi_lo_lo_hi_hi_hi = cat(op_t[49], op_t[48]) @[IDU.scala 143:13]
    node op_hi_lo_lo_hi_hi = cat(op_hi_lo_lo_hi_hi_hi, op_t[47]) @[IDU.scala 143:13]
    node op_hi_lo_lo_hi = cat(op_hi_lo_lo_hi_hi, op_hi_lo_lo_hi_lo) @[IDU.scala 143:13]
    node op_hi_lo_lo = cat(op_hi_lo_lo_hi, op_hi_lo_lo_lo) @[IDU.scala 143:13]
    node op_hi_lo_hi_lo_lo = cat(op_t[51], op_t[50]) @[IDU.scala 143:13]
    node op_hi_lo_hi_lo_hi_hi = cat(op_t[54], op_t[53]) @[IDU.scala 143:13]
    node op_hi_lo_hi_lo_hi = cat(op_hi_lo_hi_lo_hi_hi, op_t[52]) @[IDU.scala 143:13]
    node op_hi_lo_hi_lo = cat(op_hi_lo_hi_lo_hi, op_hi_lo_hi_lo_lo) @[IDU.scala 143:13]
    node op_hi_lo_hi_hi_lo = cat(op_t[56], op_t[55]) @[IDU.scala 143:13]
    node op_hi_lo_hi_hi_hi_hi = cat(op_t[59], op_t[58]) @[IDU.scala 143:13]
    node op_hi_lo_hi_hi_hi = cat(op_hi_lo_hi_hi_hi_hi, op_t[57]) @[IDU.scala 143:13]
    node op_hi_lo_hi_hi = cat(op_hi_lo_hi_hi_hi, op_hi_lo_hi_hi_lo) @[IDU.scala 143:13]
    node op_hi_lo_hi = cat(op_hi_lo_hi_hi, op_hi_lo_hi_lo) @[IDU.scala 143:13]
    node op_hi_lo = cat(op_hi_lo_hi, op_hi_lo_lo) @[IDU.scala 143:13]
    node op_hi_hi_lo_lo_lo = cat(op_t[61], op_t[60]) @[IDU.scala 143:13]
    node op_hi_hi_lo_lo_hi_hi = cat(op_t[64], op_t[63]) @[IDU.scala 143:13]
    node op_hi_hi_lo_lo_hi = cat(op_hi_hi_lo_lo_hi_hi, op_t[62]) @[IDU.scala 143:13]
    node op_hi_hi_lo_lo = cat(op_hi_hi_lo_lo_hi, op_hi_hi_lo_lo_lo) @[IDU.scala 143:13]
    node op_hi_hi_lo_hi_lo = cat(op_t[66], op_t[65]) @[IDU.scala 143:13]
    node op_hi_hi_lo_hi_hi_hi = cat(op_t[69], op_t[68]) @[IDU.scala 143:13]
    node op_hi_hi_lo_hi_hi = cat(op_hi_hi_lo_hi_hi_hi, op_t[67]) @[IDU.scala 143:13]
    node op_hi_hi_lo_hi = cat(op_hi_hi_lo_hi_hi, op_hi_hi_lo_hi_lo) @[IDU.scala 143:13]
    node op_hi_hi_lo = cat(op_hi_hi_lo_hi, op_hi_hi_lo_lo) @[IDU.scala 143:13]
    node op_hi_hi_hi_lo_lo = cat(op_t[71], op_t[70]) @[IDU.scala 143:13]
    node op_hi_hi_hi_lo_hi_hi = cat(op_t[74], op_t[73]) @[IDU.scala 143:13]
    node op_hi_hi_hi_lo_hi = cat(op_hi_hi_hi_lo_hi_hi, op_t[72]) @[IDU.scala 143:13]
    node op_hi_hi_hi_lo = cat(op_hi_hi_hi_lo_hi, op_hi_hi_hi_lo_lo) @[IDU.scala 143:13]
    node op_hi_hi_hi_hi_lo = cat(op_t[76], op_t[75]) @[IDU.scala 143:13]
    node op_hi_hi_hi_hi_hi_hi = cat(op_t[79], op_t[78]) @[IDU.scala 143:13]
    node op_hi_hi_hi_hi_hi = cat(op_hi_hi_hi_hi_hi_hi, op_t[77]) @[IDU.scala 143:13]
    node op_hi_hi_hi_hi = cat(op_hi_hi_hi_hi_hi, op_hi_hi_hi_hi_lo) @[IDU.scala 143:13]
    node op_hi_hi_hi = cat(op_hi_hi_hi_hi, op_hi_hi_hi_lo) @[IDU.scala 143:13]
    node op_hi_hi = cat(op_hi_hi_hi, op_hi_hi_lo) @[IDU.scala 143:13]
    node op_hi = cat(op_hi_hi, op_hi_lo) @[IDU.scala 143:13]
    node _op_T = cat(op_hi, op_lo) @[IDU.scala 143:13]
    op <= _op_T @[IDU.scala 143:6]
    node _io_out_bits_op_T = bits(RAW, 0, 0) @[IDU.scala 145:29]
    node _io_out_bits_op_T_1 = not(_io_out_bits_op_T) @[IDU.scala 145:24]
    node _io_out_bits_op_T_2 = mux(_io_out_bits_op_T_1, op, UInt<1>("h0")) @[IDU.scala 145:23]
    io.out.bits.op <= _io_out_bits_op_T_2 @[IDU.scala 145:18]
    node _io_out_bits_rd_T = bits(RAW, 0, 0) @[IDU.scala 146:29]
    node _io_out_bits_rd_T_1 = not(_io_out_bits_rd_T) @[IDU.scala 146:24]
    node _io_out_bits_rd_T_2 = bits(ID_reg_inst, 11, 7) @[IDU.scala 146:47]
    node _io_out_bits_rd_T_3 = mux(_io_out_bits_rd_T_1, _io_out_bits_rd_T_2, UInt<1>("h0")) @[IDU.scala 146:23]
    io.out.bits.rd <= _io_out_bits_rd_T_3 @[IDU.scala 146:18]
    node _io_out_bits_rs1_T = bits(RAW, 0, 0) @[IDU.scala 147:30]
    node _io_out_bits_rs1_T_1 = not(_io_out_bits_rs1_T) @[IDU.scala 147:25]
    node _io_out_bits_rs1_T_2 = bits(ID_reg_inst, 19, 15) @[IDU.scala 147:48]
    node _io_out_bits_rs1_T_3 = mux(_io_out_bits_rs1_T_1, _io_out_bits_rs1_T_2, UInt<1>("h0")) @[IDU.scala 147:24]
    io.out.bits.rs1 <= _io_out_bits_rs1_T_3 @[IDU.scala 147:19]
    node _io_out_bits_rs2_T = bits(RAW, 0, 0) @[IDU.scala 148:30]
    node _io_out_bits_rs2_T_1 = not(_io_out_bits_rs2_T) @[IDU.scala 148:25]
    node _io_out_bits_rs2_T_2 = bits(ID_reg_inst, 24, 20) @[IDU.scala 148:48]
    node _io_out_bits_rs2_T_3 = mux(_io_out_bits_rs2_T_1, _io_out_bits_rs2_T_2, UInt<1>("h0")) @[IDU.scala 148:24]
    io.out.bits.rs2 <= _io_out_bits_rs2_T_3 @[IDU.scala 148:19]
    wire typ_t : UInt<1>[6] @[IDU.scala 157:21]
    typ_t[0] <= UInt<1>("h0") @[IDU.scala 157:21]
    typ_t[1] <= UInt<1>("h0") @[IDU.scala 157:21]
    typ_t[2] <= UInt<1>("h0") @[IDU.scala 157:21]
    typ_t[3] <= UInt<1>("h0") @[IDU.scala 157:21]
    typ_t[4] <= UInt<1>("h0") @[IDU.scala 157:21]
    typ_t[5] <= UInt<1>("h0") @[IDU.scala 157:21]
    node _typ_t_0_T = bits(op, 2, 2) @[IDU.scala 158:18]
    node _typ_t_0_T_1 = bits(op, 3, 3) @[IDU.scala 158:24]
    node _typ_t_0_T_2 = or(_typ_t_0_T, _typ_t_0_T_1) @[IDU.scala 158:21]
    node _typ_t_0_T_3 = bits(op, 7, 7) @[IDU.scala 158:30]
    node _typ_t_0_T_4 = or(_typ_t_0_T_2, _typ_t_0_T_3) @[IDU.scala 158:27]
    node _typ_t_0_T_5 = bits(op, 9, 9) @[IDU.scala 158:36]
    node _typ_t_0_T_6 = or(_typ_t_0_T_4, _typ_t_0_T_5) @[IDU.scala 158:33]
    node _typ_t_0_T_7 = bits(op, 11, 11) @[IDU.scala 158:42]
    node _typ_t_0_T_8 = or(_typ_t_0_T_6, _typ_t_0_T_7) @[IDU.scala 158:39]
    node _typ_t_0_T_9 = bits(op, 14, 14) @[IDU.scala 158:49]
    node _typ_t_0_T_10 = or(_typ_t_0_T_8, _typ_t_0_T_9) @[IDU.scala 158:46]
    node _typ_t_0_T_11 = bits(op, 15, 15) @[IDU.scala 158:56]
    node _typ_t_0_T_12 = or(_typ_t_0_T_10, _typ_t_0_T_11) @[IDU.scala 158:53]
    node _typ_t_0_T_13 = bits(op, 18, 18) @[IDU.scala 158:63]
    node _typ_t_0_T_14 = or(_typ_t_0_T_12, _typ_t_0_T_13) @[IDU.scala 158:60]
    node _typ_t_0_T_15 = bits(op, 19, 19) @[IDU.scala 158:70]
    node _typ_t_0_T_16 = or(_typ_t_0_T_14, _typ_t_0_T_15) @[IDU.scala 158:67]
    node _typ_t_0_T_17 = bits(op, 22, 22) @[IDU.scala 158:77]
    node _typ_t_0_T_18 = or(_typ_t_0_T_16, _typ_t_0_T_17) @[IDU.scala 158:74]
    node _typ_t_0_T_19 = bits(op, 23, 23) @[IDU.scala 158:84]
    node _typ_t_0_T_20 = or(_typ_t_0_T_18, _typ_t_0_T_19) @[IDU.scala 158:81]
    node _typ_t_0_T_21 = bits(op, 28, 28) @[IDU.scala 158:91]
    node _typ_t_0_T_22 = or(_typ_t_0_T_20, _typ_t_0_T_21) @[IDU.scala 158:88]
    node _typ_t_0_T_23 = bits(op, 29, 29) @[IDU.scala 158:98]
    node _typ_t_0_T_24 = or(_typ_t_0_T_22, _typ_t_0_T_23) @[IDU.scala 158:95]
    node _typ_t_0_T_25 = bits(op, 37, 37) @[IDU.scala 158:105]
    node _typ_t_0_T_26 = or(_typ_t_0_T_24, _typ_t_0_T_25) @[IDU.scala 158:102]
    node _typ_t_0_T_27 = bits(op, 38, 38) @[IDU.scala 158:112]
    node _typ_t_0_T_28 = or(_typ_t_0_T_26, _typ_t_0_T_27) @[IDU.scala 158:109]
    node _typ_t_0_T_29 = bits(op, 39, 39) @[IDU.scala 158:119]
    node _typ_t_0_T_30 = or(_typ_t_0_T_28, _typ_t_0_T_29) @[IDU.scala 158:116]
    node _typ_t_0_T_31 = bits(op, 40, 40) @[IDU.scala 158:126]
    node _typ_t_0_T_32 = or(_typ_t_0_T_30, _typ_t_0_T_31) @[IDU.scala 158:123]
    node _typ_t_0_T_33 = bits(op, 41, 41) @[IDU.scala 158:133]
    node _typ_t_0_T_34 = or(_typ_t_0_T_32, _typ_t_0_T_33) @[IDU.scala 158:130]
    node _typ_t_0_T_35 = bits(op, 46, 46) @[IDU.scala 158:140]
    node _typ_t_0_T_36 = or(_typ_t_0_T_34, _typ_t_0_T_35) @[IDU.scala 158:137]
    node _typ_t_0_T_37 = bits(op, 47, 47) @[IDU.scala 158:147]
    node _typ_t_0_T_38 = or(_typ_t_0_T_36, _typ_t_0_T_37) @[IDU.scala 158:144]
    node _typ_t_0_T_39 = bits(op, 48, 48) @[IDU.scala 158:154]
    node _typ_t_0_T_40 = or(_typ_t_0_T_38, _typ_t_0_T_39) @[IDU.scala 158:151]
    node _typ_t_0_T_41 = bits(op, 63, 63) @[IDU.scala 158:161]
    node _typ_t_0_T_42 = or(_typ_t_0_T_40, _typ_t_0_T_41) @[IDU.scala 158:158]
    node _typ_t_0_T_43 = bits(op, 64, 64) @[IDU.scala 158:168]
    node _typ_t_0_T_44 = or(_typ_t_0_T_42, _typ_t_0_T_43) @[IDU.scala 158:165]
    typ_t[0] <= _typ_t_0_T_44 @[IDU.scala 158:12]
    node _typ_t_1_T = bits(op, 24, 24) @[IDU.scala 159:18]
    node _typ_t_1_T_1 = bits(op, 25, 25) @[IDU.scala 159:25]
    node _typ_t_1_T_2 = or(_typ_t_1_T, _typ_t_1_T_1) @[IDU.scala 159:22]
    typ_t[1] <= _typ_t_1_T_2 @[IDU.scala 159:12]
    node _typ_t_2_T = bits(op, 42, 42) @[IDU.scala 160:18]
    node _typ_t_2_T_1 = bits(op, 43, 43) @[IDU.scala 160:25]
    node _typ_t_2_T_2 = or(_typ_t_2_T, _typ_t_2_T_1) @[IDU.scala 160:22]
    node _typ_t_2_T_3 = bits(op, 44, 44) @[IDU.scala 160:32]
    node _typ_t_2_T_4 = or(_typ_t_2_T_2, _typ_t_2_T_3) @[IDU.scala 160:29]
    node _typ_t_2_T_5 = bits(op, 45, 45) @[IDU.scala 160:39]
    node _typ_t_2_T_6 = or(_typ_t_2_T_4, _typ_t_2_T_5) @[IDU.scala 160:36]
    typ_t[2] <= _typ_t_2_T_6 @[IDU.scala 160:12]
    node _typ_t_3_T = bits(op, 36, 36) @[IDU.scala 161:18]
    typ_t[3] <= _typ_t_3_T @[IDU.scala 161:12]
    node _typ_t_4_T = bits(op, 30, 30) @[IDU.scala 162:18]
    node _typ_t_4_T_1 = bits(op, 31, 31) @[IDU.scala 162:25]
    node _typ_t_4_T_2 = or(_typ_t_4_T, _typ_t_4_T_1) @[IDU.scala 162:22]
    node _typ_t_4_T_3 = bits(op, 32, 32) @[IDU.scala 162:32]
    node _typ_t_4_T_4 = or(_typ_t_4_T_2, _typ_t_4_T_3) @[IDU.scala 162:29]
    node _typ_t_4_T_5 = bits(op, 33, 33) @[IDU.scala 162:39]
    node _typ_t_4_T_6 = or(_typ_t_4_T_4, _typ_t_4_T_5) @[IDU.scala 162:36]
    node _typ_t_4_T_7 = bits(op, 34, 34) @[IDU.scala 162:46]
    node _typ_t_4_T_8 = or(_typ_t_4_T_6, _typ_t_4_T_7) @[IDU.scala 162:43]
    node _typ_t_4_T_9 = bits(op, 35, 35) @[IDU.scala 162:53]
    node _typ_t_4_T_10 = or(_typ_t_4_T_8, _typ_t_4_T_9) @[IDU.scala 162:50]
    typ_t[4] <= _typ_t_4_T_10 @[IDU.scala 162:12]
    node _typ_t_5_T = bits(op, 0, 0) @[IDU.scala 163:18]
    node _typ_t_5_T_1 = bits(op, 1, 1) @[IDU.scala 163:24]
    node _typ_t_5_T_2 = or(_typ_t_5_T, _typ_t_5_T_1) @[IDU.scala 163:21]
    node _typ_t_5_T_3 = bits(op, 4, 4) @[IDU.scala 163:30]
    node _typ_t_5_T_4 = or(_typ_t_5_T_2, _typ_t_5_T_3) @[IDU.scala 163:27]
    node _typ_t_5_T_5 = bits(op, 5, 5) @[IDU.scala 163:36]
    node _typ_t_5_T_6 = or(_typ_t_5_T_4, _typ_t_5_T_5) @[IDU.scala 163:33]
    node _typ_t_5_T_7 = bits(op, 6, 6) @[IDU.scala 163:42]
    node _typ_t_5_T_8 = or(_typ_t_5_T_6, _typ_t_5_T_7) @[IDU.scala 163:39]
    node _typ_t_5_T_9 = bits(op, 8, 8) @[IDU.scala 163:48]
    node _typ_t_5_T_10 = or(_typ_t_5_T_8, _typ_t_5_T_9) @[IDU.scala 163:45]
    node _typ_t_5_T_11 = bits(op, 10, 10) @[IDU.scala 163:54]
    node _typ_t_5_T_12 = or(_typ_t_5_T_10, _typ_t_5_T_11) @[IDU.scala 163:51]
    node _typ_t_5_T_13 = bits(op, 12, 12) @[IDU.scala 163:61]
    node _typ_t_5_T_14 = or(_typ_t_5_T_12, _typ_t_5_T_13) @[IDU.scala 163:58]
    node _typ_t_5_T_15 = bits(op, 13, 13) @[IDU.scala 163:68]
    node _typ_t_5_T_16 = or(_typ_t_5_T_14, _typ_t_5_T_15) @[IDU.scala 163:65]
    node _typ_t_5_T_17 = bits(op, 16, 16) @[IDU.scala 163:75]
    node _typ_t_5_T_18 = or(_typ_t_5_T_16, _typ_t_5_T_17) @[IDU.scala 163:72]
    node _typ_t_5_T_19 = bits(op, 17, 17) @[IDU.scala 163:82]
    node _typ_t_5_T_20 = or(_typ_t_5_T_18, _typ_t_5_T_19) @[IDU.scala 163:79]
    node _typ_t_5_T_21 = bits(op, 20, 20) @[IDU.scala 163:89]
    node _typ_t_5_T_22 = or(_typ_t_5_T_20, _typ_t_5_T_21) @[IDU.scala 163:86]
    node _typ_t_5_T_23 = bits(op, 21, 21) @[IDU.scala 163:96]
    node _typ_t_5_T_24 = or(_typ_t_5_T_22, _typ_t_5_T_23) @[IDU.scala 163:93]
    node _typ_t_5_T_25 = bits(op, 26, 26) @[IDU.scala 163:103]
    node _typ_t_5_T_26 = or(_typ_t_5_T_24, _typ_t_5_T_25) @[IDU.scala 163:100]
    node _typ_t_5_T_27 = bits(op, 27, 27) @[IDU.scala 163:110]
    node _typ_t_5_T_28 = or(_typ_t_5_T_26, _typ_t_5_T_27) @[IDU.scala 163:107]
    node _typ_t_5_T_29 = bits(op, 50, 50) @[IDU.scala 163:117]
    node _typ_t_5_T_30 = or(_typ_t_5_T_28, _typ_t_5_T_29) @[IDU.scala 163:114]
    node _typ_t_5_T_31 = bits(op, 51, 51) @[IDU.scala 163:124]
    node _typ_t_5_T_32 = or(_typ_t_5_T_30, _typ_t_5_T_31) @[IDU.scala 163:121]
    node _typ_t_5_T_33 = bits(op, 52, 52) @[IDU.scala 163:131]
    node _typ_t_5_T_34 = or(_typ_t_5_T_32, _typ_t_5_T_33) @[IDU.scala 163:128]
    node _typ_t_5_T_35 = bits(op, 53, 53) @[IDU.scala 163:138]
    node _typ_t_5_T_36 = or(_typ_t_5_T_34, _typ_t_5_T_35) @[IDU.scala 163:135]
    node _typ_t_5_T_37 = bits(op, 54, 54) @[IDU.scala 163:145]
    node _typ_t_5_T_38 = or(_typ_t_5_T_36, _typ_t_5_T_37) @[IDU.scala 163:142]
    node _typ_t_5_T_39 = bits(op, 55, 55) @[IDU.scala 163:152]
    node _typ_t_5_T_40 = or(_typ_t_5_T_38, _typ_t_5_T_39) @[IDU.scala 163:149]
    node _typ_t_5_T_41 = bits(op, 56, 56) @[IDU.scala 163:159]
    node _typ_t_5_T_42 = or(_typ_t_5_T_40, _typ_t_5_T_41) @[IDU.scala 163:156]
    node _typ_t_5_T_43 = bits(op, 57, 57) @[IDU.scala 163:166]
    node _typ_t_5_T_44 = or(_typ_t_5_T_42, _typ_t_5_T_43) @[IDU.scala 163:163]
    node _typ_t_5_T_45 = bits(op, 58, 58) @[IDU.scala 163:173]
    node _typ_t_5_T_46 = or(_typ_t_5_T_44, _typ_t_5_T_45) @[IDU.scala 163:170]
    node _typ_t_5_T_47 = bits(op, 59, 59) @[IDU.scala 163:180]
    node _typ_t_5_T_48 = or(_typ_t_5_T_46, _typ_t_5_T_47) @[IDU.scala 163:177]
    node _typ_t_5_T_49 = bits(op, 60, 60) @[IDU.scala 163:187]
    node _typ_t_5_T_50 = or(_typ_t_5_T_48, _typ_t_5_T_49) @[IDU.scala 163:184]
    node _typ_t_5_T_51 = bits(op, 61, 61) @[IDU.scala 163:194]
    node _typ_t_5_T_52 = or(_typ_t_5_T_50, _typ_t_5_T_51) @[IDU.scala 163:191]
    node _typ_t_5_T_53 = bits(op, 62, 62) @[IDU.scala 163:201]
    node _typ_t_5_T_54 = or(_typ_t_5_T_52, _typ_t_5_T_53) @[IDU.scala 163:198]
    typ_t[5] <= _typ_t_5_T_54 @[IDU.scala 163:12]
    wire typ : UInt<6> @[IDU.scala 164:16]
    node typ_lo_hi = cat(typ_t[2], typ_t[1]) @[IDU.scala 165:15]
    node typ_lo = cat(typ_lo_hi, typ_t[0]) @[IDU.scala 165:15]
    node typ_hi_hi = cat(typ_t[5], typ_t[4]) @[IDU.scala 165:15]
    node typ_hi = cat(typ_hi_hi, typ_t[3]) @[IDU.scala 165:15]
    node _typ_T = cat(typ_hi, typ_lo) @[IDU.scala 165:15]
    typ <= _typ_T @[IDU.scala 165:7]
    node _io_out_bits_typ_T = bits(RAW, 0, 0) @[IDU.scala 167:30]
    node _io_out_bits_typ_T_1 = not(_io_out_bits_typ_T) @[IDU.scala 167:25]
    node _io_out_bits_typ_T_2 = mux(_io_out_bits_typ_T_1, typ, UInt<1>("h0")) @[IDU.scala 167:24]
    io.out.bits.typ <= _io_out_bits_typ_T_2 @[IDU.scala 167:19]
    node _io_out_bits_imm_T = bits(typ, 0, 0) @[IDU.scala 170:29]
    node _io_out_bits_imm_T_1 = bits(ID_reg_inst, 31, 31) @[IDU.scala 170:56]
    node _io_out_bits_imm_T_2 = bits(_io_out_bits_imm_T_1, 0, 0) @[Bitwise.scala 77:15]
    node _io_out_bits_imm_T_3 = mux(_io_out_bits_imm_T_2, UInt<52>("hfffffffffffff"), UInt<52>("h0")) @[Bitwise.scala 77:12]
    node _io_out_bits_imm_T_4 = bits(ID_reg_inst, 31, 20) @[IDU.scala 170:73]
    node _io_out_bits_imm_T_5 = cat(_io_out_bits_imm_T_3, _io_out_bits_imm_T_4) @[Cat.scala 33:92]
    node _io_out_bits_imm_T_6 = bits(typ, 1, 1) @[IDU.scala 171:29]
    node _io_out_bits_imm_T_7 = bits(ID_reg_inst, 31, 31) @[IDU.scala 171:56]
    node _io_out_bits_imm_T_8 = bits(_io_out_bits_imm_T_7, 0, 0) @[Bitwise.scala 77:15]
    node _io_out_bits_imm_T_9 = mux(_io_out_bits_imm_T_8, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 77:12]
    node _io_out_bits_imm_T_10 = bits(ID_reg_inst, 31, 12) @[IDU.scala 171:77]
    node _io_out_bits_imm_T_11 = mux(UInt<1>("h0"), UInt<12>("hfff"), UInt<12>("h0")) @[Bitwise.scala 77:12]
    node _io_out_bits_imm_T_12 = cat(_io_out_bits_imm_T_10, _io_out_bits_imm_T_11) @[Cat.scala 33:92]
    node _io_out_bits_imm_T_13 = cat(_io_out_bits_imm_T_9, _io_out_bits_imm_T_12) @[Cat.scala 33:92]
    node _io_out_bits_imm_T_14 = bits(typ, 2, 2) @[IDU.scala 172:29]
    node _io_out_bits_imm_T_15 = bits(ID_reg_inst, 31, 31) @[IDU.scala 172:56]
    node _io_out_bits_imm_T_16 = bits(_io_out_bits_imm_T_15, 0, 0) @[Bitwise.scala 77:15]
    node _io_out_bits_imm_T_17 = mux(_io_out_bits_imm_T_16, UInt<52>("hfffffffffffff"), UInt<52>("h0")) @[Bitwise.scala 77:12]
    node _io_out_bits_imm_T_18 = bits(ID_reg_inst, 31, 25) @[IDU.scala 172:77]
    node _io_out_bits_imm_T_19 = bits(ID_reg_inst, 11, 7) @[IDU.scala 172:96]
    node _io_out_bits_imm_T_20 = cat(_io_out_bits_imm_T_18, _io_out_bits_imm_T_19) @[Cat.scala 33:92]
    node _io_out_bits_imm_T_21 = cat(_io_out_bits_imm_T_17, _io_out_bits_imm_T_20) @[Cat.scala 33:92]
    node _io_out_bits_imm_T_22 = bits(typ, 3, 3) @[IDU.scala 173:29]
    node _io_out_bits_imm_T_23 = bits(ID_reg_inst, 31, 31) @[IDU.scala 173:56]
    node _io_out_bits_imm_T_24 = bits(_io_out_bits_imm_T_23, 0, 0) @[Bitwise.scala 77:15]
    node _io_out_bits_imm_T_25 = mux(_io_out_bits_imm_T_24, UInt<43>("h7ffffffffff"), UInt<43>("h0")) @[Bitwise.scala 77:12]
    node _io_out_bits_imm_T_26 = bits(ID_reg_inst, 31, 31) @[IDU.scala 173:77]
    node _io_out_bits_imm_T_27 = bits(ID_reg_inst, 19, 12) @[IDU.scala 173:97]
    node _io_out_bits_imm_T_28 = bits(ID_reg_inst, 20, 20) @[IDU.scala 173:120]
    node _io_out_bits_imm_T_29 = bits(ID_reg_inst, 30, 21) @[IDU.scala 173:140]
    node _io_out_bits_imm_T_30 = cat(_io_out_bits_imm_T_29, UInt<1>("h0")) @[Cat.scala 33:92]
    node _io_out_bits_imm_T_31 = cat(_io_out_bits_imm_T_28, _io_out_bits_imm_T_30) @[Cat.scala 33:92]
    node _io_out_bits_imm_T_32 = cat(_io_out_bits_imm_T_27, _io_out_bits_imm_T_31) @[Cat.scala 33:92]
    node _io_out_bits_imm_T_33 = cat(_io_out_bits_imm_T_26, _io_out_bits_imm_T_32) @[Cat.scala 33:92]
    node _io_out_bits_imm_T_34 = cat(_io_out_bits_imm_T_25, _io_out_bits_imm_T_33) @[Cat.scala 33:92]
    node _io_out_bits_imm_T_35 = bits(typ, 4, 4) @[IDU.scala 174:29]
    node _io_out_bits_imm_T_36 = bits(ID_reg_inst, 31, 31) @[IDU.scala 174:56]
    node _io_out_bits_imm_T_37 = bits(_io_out_bits_imm_T_36, 0, 0) @[Bitwise.scala 77:15]
    node _io_out_bits_imm_T_38 = mux(_io_out_bits_imm_T_37, UInt<51>("h7ffffffffffff"), UInt<51>("h0")) @[Bitwise.scala 77:12]
    node _io_out_bits_imm_T_39 = bits(ID_reg_inst, 31, 31) @[IDU.scala 174:77]
    node _io_out_bits_imm_T_40 = bits(ID_reg_inst, 7, 7) @[IDU.scala 174:97]
    node _io_out_bits_imm_T_41 = bits(ID_reg_inst, 30, 25) @[IDU.scala 174:116]
    node _io_out_bits_imm_T_42 = bits(ID_reg_inst, 11, 8) @[IDU.scala 174:139]
    node _io_out_bits_imm_T_43 = cat(_io_out_bits_imm_T_42, UInt<1>("h0")) @[Cat.scala 33:92]
    node _io_out_bits_imm_T_44 = cat(_io_out_bits_imm_T_41, _io_out_bits_imm_T_43) @[Cat.scala 33:92]
    node _io_out_bits_imm_T_45 = cat(_io_out_bits_imm_T_40, _io_out_bits_imm_T_44) @[Cat.scala 33:92]
    node _io_out_bits_imm_T_46 = cat(_io_out_bits_imm_T_39, _io_out_bits_imm_T_45) @[Cat.scala 33:92]
    node _io_out_bits_imm_T_47 = cat(_io_out_bits_imm_T_38, _io_out_bits_imm_T_46) @[Cat.scala 33:92]
    node _io_out_bits_imm_T_48 = mux(_io_out_bits_imm_T_35, _io_out_bits_imm_T_47, UInt<1>("h0")) @[IDU.scala 174:25]
    node _io_out_bits_imm_T_49 = mux(_io_out_bits_imm_T_22, _io_out_bits_imm_T_34, _io_out_bits_imm_T_48) @[IDU.scala 173:25]
    node _io_out_bits_imm_T_50 = mux(_io_out_bits_imm_T_14, _io_out_bits_imm_T_21, _io_out_bits_imm_T_49) @[IDU.scala 172:25]
    node _io_out_bits_imm_T_51 = mux(_io_out_bits_imm_T_6, _io_out_bits_imm_T_13, _io_out_bits_imm_T_50) @[IDU.scala 171:25]
    node _io_out_bits_imm_T_52 = mux(_io_out_bits_imm_T, _io_out_bits_imm_T_5, _io_out_bits_imm_T_51) @[IDU.scala 170:25]
    io.out.bits.imm <= _io_out_bits_imm_T_52 @[IDU.scala 170:19]
    node _io_sb_lookidx1_T = bits(typ, 0, 0) @[IDU.scala 178:27]
    node _io_sb_lookidx1_T_1 = bits(typ, 2, 2) @[IDU.scala 178:34]
    node _io_sb_lookidx1_T_2 = or(_io_sb_lookidx1_T, _io_sb_lookidx1_T_1) @[IDU.scala 178:30]
    node _io_sb_lookidx1_T_3 = bits(typ, 4, 4) @[IDU.scala 178:41]
    node _io_sb_lookidx1_T_4 = or(_io_sb_lookidx1_T_2, _io_sb_lookidx1_T_3) @[IDU.scala 178:37]
    node _io_sb_lookidx1_T_5 = bits(typ, 5, 5) @[IDU.scala 178:48]
    node _io_sb_lookidx1_T_6 = or(_io_sb_lookidx1_T_4, _io_sb_lookidx1_T_5) @[IDU.scala 178:44]
    node _io_sb_lookidx1_T_7 = bits(ID_reg_inst, 19, 15) @[IDU.scala 178:63]
    node _io_sb_lookidx1_T_8 = mux(_io_sb_lookidx1_T_6, _io_sb_lookidx1_T_7, UInt<1>("h0")) @[IDU.scala 178:23]
    io.sb.lookidx1 <= _io_sb_lookidx1_T_8 @[IDU.scala 178:18]
    node _io_sb_lookidx2_T = bits(typ, 2, 2) @[IDU.scala 179:27]
    node _io_sb_lookidx2_T_1 = bits(typ, 4, 4) @[IDU.scala 179:34]
    node _io_sb_lookidx2_T_2 = or(_io_sb_lookidx2_T, _io_sb_lookidx2_T_1) @[IDU.scala 179:30]
    node _io_sb_lookidx2_T_3 = bits(typ, 5, 5) @[IDU.scala 179:41]
    node _io_sb_lookidx2_T_4 = or(_io_sb_lookidx2_T_2, _io_sb_lookidx2_T_3) @[IDU.scala 179:37]
    node _io_sb_lookidx2_T_5 = bits(ID_reg_inst, 24, 20) @[IDU.scala 179:56]
    node _io_sb_lookidx2_T_6 = mux(_io_sb_lookidx2_T_4, _io_sb_lookidx2_T_5, UInt<1>("h0")) @[IDU.scala 179:23]
    io.sb.lookidx2 <= _io_sb_lookidx2_T_6 @[IDU.scala 179:18]
    node _io_sb_setidx_T = bits(typ, 0, 0) @[IDU.scala 180:26]
    node _io_sb_setidx_T_1 = bits(typ, 1, 1) @[IDU.scala 180:33]
    node _io_sb_setidx_T_2 = or(_io_sb_setidx_T, _io_sb_setidx_T_1) @[IDU.scala 180:29]
    node _io_sb_setidx_T_3 = bits(typ, 3, 3) @[IDU.scala 180:40]
    node _io_sb_setidx_T_4 = or(_io_sb_setidx_T_2, _io_sb_setidx_T_3) @[IDU.scala 180:36]
    node _io_sb_setidx_T_5 = bits(typ, 5, 5) @[IDU.scala 180:47]
    node _io_sb_setidx_T_6 = or(_io_sb_setidx_T_4, _io_sb_setidx_T_5) @[IDU.scala 180:43]
    node _io_sb_setidx_T_7 = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    node _io_sb_setidx_T_8 = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    node _io_sb_setidx_T_9 = and(_io_sb_setidx_T_7, _io_sb_setidx_T_8) @[IDU.scala 180:64]
    node _io_sb_setidx_T_10 = and(_io_sb_setidx_T_6, _io_sb_setidx_T_9) @[IDU.scala 180:51]
    node _io_sb_setidx_T_11 = eq(RAW, UInt<1>("h0")) @[IDU.scala 180:78]
    node _io_sb_setidx_T_12 = and(_io_sb_setidx_T_10, _io_sb_setidx_T_11) @[IDU.scala 180:76]
    node _io_sb_setidx_T_13 = bits(ID_reg_inst, 11, 7) @[IDU.scala 180:95]
    node _io_sb_setidx_T_14 = mux(_io_sb_setidx_T_12, _io_sb_setidx_T_13, UInt<1>("h0")) @[IDU.scala 180:21]
    io.sb.setidx <= _io_sb_setidx_T_14 @[IDU.scala 180:16]
    node _io_out_bits_clearidx_T = bits(RAW, 0, 0) @[IDU.scala 181:35]
    node _io_out_bits_clearidx_T_1 = not(_io_out_bits_clearidx_T) @[IDU.scala 181:30]
    node _io_out_bits_clearidx_T_2 = mux(_io_out_bits_clearidx_T_1, io.sb.setidx, UInt<1>("h0")) @[IDU.scala 181:29]
    io.out.bits.clearidx <= _io_out_bits_clearidx_T_2 @[IDU.scala 181:24]
    RAW <= UInt<1>("h0") @[IDU.scala 182:7]

  module LSU :
    input clock : Clock
    input reset : Reset
    output io : { flip ls : { in : { flip ready : UInt<1>, valid : UInt<1>, bits : { raddr : UInt<32>, waddr : UInt<32>, wdata : UInt<64>, wmask : UInt<8>}}, flip out : { flip ready : UInt<1>, valid : UInt<1>, bits : { rdata : UInt<64>}}}, flip en_r : UInt<1>, flip en_w : UInt<1>, lm : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}}, flip flush : UInt<1>}

    reg rstate : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[LSU.scala 15:23]
    node _rstate_T = bits(io.flush, 0, 0) @[LSU.scala 17:29]
    node _rstate_T_1 = and(io.lm.ar.ready, io.lm.ar.valid) @[Decoupled.scala 52:35]
    node _rstate_T_2 = mux(_rstate_T_1, UInt<2>("h1"), UInt<2>("h0")) @[LSU.scala 17:46]
    node _rstate_T_3 = mux(_rstate_T, UInt<2>("h0"), _rstate_T_2) @[LSU.scala 17:19]
    node _rstate_T_4 = bits(io.flush, 0, 0) @[LSU.scala 18:29]
    node _rstate_T_5 = and(io.lm.r.ready, io.lm.r.valid) @[Decoupled.scala 52:35]
    node _rstate_T_6 = mux(_rstate_T_5, UInt<2>("h0"), UInt<2>("h1")) @[LSU.scala 18:46]
    node _rstate_T_7 = mux(_rstate_T_4, UInt<2>("h0"), _rstate_T_6) @[LSU.scala 18:19]
    node _rstate_T_8 = eq(UInt<2>("h0"), rstate) @[Mux.scala 81:61]
    node _rstate_T_9 = mux(_rstate_T_8, _rstate_T_3, UInt<2>("h0")) @[Mux.scala 81:58]
    node _rstate_T_10 = eq(UInt<2>("h1"), rstate) @[Mux.scala 81:61]
    node _rstate_T_11 = mux(_rstate_T_10, _rstate_T_7, _rstate_T_9) @[Mux.scala 81:58]
    rstate <= _rstate_T_11 @[LSU.scala 16:10]
    reg wstate : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[LSU.scala 20:23]
    node _wstate_T = bits(io.flush, 0, 0) @[LSU.scala 22:29]
    node _wstate_T_1 = and(io.lm.aw.ready, io.lm.aw.valid) @[Decoupled.scala 52:35]
    node _wstate_T_2 = and(io.lm.w.ready, io.lm.w.valid) @[Decoupled.scala 52:35]
    node _wstate_T_3 = and(_wstate_T_1, _wstate_T_2) @[LSU.scala 22:61]
    node _wstate_T_4 = mux(_wstate_T_3, UInt<2>("h1"), UInt<2>("h0")) @[LSU.scala 22:46]
    node _wstate_T_5 = mux(_wstate_T, UInt<2>("h0"), _wstate_T_4) @[LSU.scala 22:19]
    node _wstate_T_6 = bits(io.flush, 0, 0) @[LSU.scala 23:29]
    node _wstate_T_7 = and(io.lm.b.ready, io.lm.b.valid) @[Decoupled.scala 52:35]
    node _wstate_T_8 = mux(_wstate_T_7, UInt<2>("h0"), UInt<2>("h1")) @[LSU.scala 23:46]
    node _wstate_T_9 = mux(_wstate_T_6, UInt<2>("h0"), _wstate_T_8) @[LSU.scala 23:19]
    node _wstate_T_10 = eq(UInt<2>("h0"), wstate) @[Mux.scala 81:61]
    node _wstate_T_11 = mux(_wstate_T_10, _wstate_T_5, UInt<2>("h0")) @[Mux.scala 81:58]
    node _wstate_T_12 = eq(UInt<2>("h1"), wstate) @[Mux.scala 81:61]
    node _wstate_T_13 = mux(_wstate_T_12, _wstate_T_9, _wstate_T_11) @[Mux.scala 81:58]
    wstate <= _wstate_T_13 @[LSU.scala 21:10]
    io.lm.ar.bits.addr <= io.ls.in.bits.raddr @[LSU.scala 26:21]
    node _io_lm_ar_valid_T = eq(rstate, UInt<2>("h0")) @[LSU.scala 27:27]
    node _io_lm_ar_valid_T_1 = asUInt(reset) @[LSU.scala 27:47]
    node _io_lm_ar_valid_T_2 = not(_io_lm_ar_valid_T_1) @[LSU.scala 27:40]
    node _io_lm_ar_valid_T_3 = and(_io_lm_ar_valid_T, _io_lm_ar_valid_T_2) @[LSU.scala 27:38]
    node _io_lm_ar_valid_T_4 = and(_io_lm_ar_valid_T_3, io.ls.in.valid) @[LSU.scala 27:54]
    node _io_lm_ar_valid_T_5 = and(_io_lm_ar_valid_T_4, io.en_r) @[LSU.scala 27:71]
    io.lm.ar.valid <= _io_lm_ar_valid_T_5 @[LSU.scala 27:17]
    io.lm.r.ready <= UInt<1>("h1") @[LSU.scala 28:16]
    io.lm.aw.bits.addr <= io.ls.in.bits.waddr @[LSU.scala 29:21]
    node _io_lm_aw_valid_T = eq(wstate, UInt<2>("h0")) @[LSU.scala 30:27]
    node _io_lm_aw_valid_T_1 = asUInt(reset) @[LSU.scala 30:47]
    node _io_lm_aw_valid_T_2 = not(_io_lm_aw_valid_T_1) @[LSU.scala 30:40]
    node _io_lm_aw_valid_T_3 = and(_io_lm_aw_valid_T, _io_lm_aw_valid_T_2) @[LSU.scala 30:38]
    node _io_lm_aw_valid_T_4 = and(_io_lm_aw_valid_T_3, io.ls.in.valid) @[LSU.scala 30:54]
    node _io_lm_aw_valid_T_5 = and(_io_lm_aw_valid_T_4, io.en_w) @[LSU.scala 30:71]
    io.lm.aw.valid <= _io_lm_aw_valid_T_5 @[LSU.scala 30:17]
    io.lm.w.bits.data <= io.ls.in.bits.wdata @[LSU.scala 31:20]
    io.lm.w.bits.strb <= io.ls.in.bits.wmask @[LSU.scala 32:20]
    node _io_lm_w_valid_T = eq(wstate, UInt<2>("h0")) @[LSU.scala 33:26]
    node _io_lm_w_valid_T_1 = asUInt(reset) @[LSU.scala 33:46]
    node _io_lm_w_valid_T_2 = not(_io_lm_w_valid_T_1) @[LSU.scala 33:39]
    node _io_lm_w_valid_T_3 = and(_io_lm_w_valid_T, _io_lm_w_valid_T_2) @[LSU.scala 33:37]
    node _io_lm_w_valid_T_4 = and(_io_lm_w_valid_T_3, io.ls.in.valid) @[LSU.scala 33:53]
    node _io_lm_w_valid_T_5 = and(_io_lm_w_valid_T_4, io.en_w) @[LSU.scala 33:70]
    io.lm.w.valid <= _io_lm_w_valid_T_5 @[LSU.scala 33:16]
    io.lm.b.ready <= UInt<1>("h1") @[LSU.scala 34:16]
    node _rdata_T = and(io.lm.r.ready, io.lm.r.valid) @[Decoupled.scala 52:35]
    reg rdata : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[Reg.scala 35:20]
    when _rdata_T : @[Reg.scala 36:18]
      rdata <= io.lm.r.bits.data @[Reg.scala 36:22]
    node _io_ls_out_bits_rdata_T = and(io.lm.r.ready, io.lm.r.valid) @[Decoupled.scala 52:35]
    node _io_ls_out_bits_rdata_T_1 = mux(_io_ls_out_bits_rdata_T, io.lm.r.bits.data, rdata) @[LSU.scala 38:28]
    io.ls.out.bits.rdata <= _io_ls_out_bits_rdata_T_1 @[LSU.scala 38:23]
    node _io_ls_out_valid_T = and(io.lm.r.ready, io.lm.r.valid) @[Decoupled.scala 52:35]
    node _io_ls_out_valid_T_1 = and(io.lm.b.ready, io.lm.b.valid) @[Decoupled.scala 52:35]
    node _io_ls_out_valid_T_2 = or(_io_ls_out_valid_T, _io_ls_out_valid_T_1) @[LSU.scala 39:33]
    io.ls.out.valid <= _io_ls_out_valid_T_2 @[LSU.scala 39:18]
    node _io_ls_in_ready_T = eq(rstate, UInt<2>("h0")) @[LSU.scala 40:27]
    node _io_ls_in_ready_T_1 = eq(wstate, UInt<2>("h0")) @[LSU.scala 40:50]
    node _io_ls_in_ready_T_2 = and(_io_ls_in_ready_T, _io_ls_in_ready_T_1) @[LSU.scala 40:39]
    io.ls.in.ready <= _io_ls_in_ready_T_2 @[LSU.scala 40:17]

  module base_mul :
    input clock : Clock
    input reset : Reset
    output io : { flip mul_valid : UInt<1>, flip flush : UInt<1>, flip mulw : UInt<1>, flip mul_signed : UInt<2>, flip multiplicand : UInt<64>, flip multiplier : UInt<64>, mul_ready : UInt<1>, out_valid : UInt<1>, result_hi : UInt<64>, result_lo : UInt<64>}

    reg state : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[base_mul.scala 21:24]
    wire s : UInt<130> @[base_mul.scala 23:15]
    wire last : UInt<1> @[base_mul.scala 24:20]
    node _state_T = bits(io.flush, 0, 0) @[base_mul.scala 27:32]
    node _state_T_1 = bits(io.mul_valid, 0, 0) @[base_mul.scala 27:63]
    node _state_T_2 = mux(_state_T_1, UInt<1>("h1"), UInt<1>("h0")) @[base_mul.scala 27:49]
    node _state_T_3 = mux(_state_T, UInt<1>("h0"), _state_T_2) @[base_mul.scala 27:22]
    node _state_T_4 = bits(io.flush, 0, 0) @[base_mul.scala 28:32]
    node _state_T_5 = bits(last, 0, 0) @[base_mul.scala 28:55]
    node _state_T_6 = mux(_state_T_5, UInt<1>("h0"), UInt<1>("h1")) @[base_mul.scala 28:49]
    node _state_T_7 = mux(_state_T_4, UInt<1>("h0"), _state_T_6) @[base_mul.scala 28:22]
    node _state_T_8 = eq(UInt<1>("h1"), state) @[Mux.scala 81:61]
    node _state_T_9 = mux(_state_T_8, _state_T_7, _state_T_3) @[Mux.scala 81:58]
    state <= _state_T_9 @[base_mul.scala 26:11]
    wire mulbits : UInt<6> @[base_mul.scala 30:23]
    reg mulBits : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[base_mul.scala 31:26]
    wire next_valid : UInt<1> @[base_mul.scala 33:26]
    node _next_valid_T = bits(io.mul_valid, 0, 0) @[base_mul.scala 34:31]
    node _next_valid_T_1 = eq(state, UInt<1>("h0")) @[base_mul.scala 34:47]
    node _next_valid_T_2 = and(_next_valid_T, _next_valid_T_1) @[base_mul.scala 34:38]
    next_valid <= _next_valid_T_2 @[base_mul.scala 34:15]
    wire running : UInt<1> @[base_mul.scala 35:23]
    node _running_T = eq(state, UInt<1>("h1")) @[base_mul.scala 36:22]
    running <= _running_T @[base_mul.scala 36:12]
    node _mulbits_T = bits(io.mulw, 0, 0) @[base_mul.scala 38:28]
    node _mulbits_T_1 = mux(_mulbits_T, UInt<5>("h1f"), UInt<6>("h3f")) @[base_mul.scala 38:19]
    mulbits <= _mulbits_T_1 @[base_mul.scala 38:13]
    node _mulBits_T = eq(state, UInt<1>("h0")) @[base_mul.scala 39:26]
    node _mulBits_T_1 = bits(io.mul_valid, 0, 0) @[base_mul.scala 39:53]
    node _mulBits_T_2 = and(_mulBits_T, _mulBits_T_1) @[base_mul.scala 39:37]
    node _mulBits_T_3 = mux(_mulBits_T_2, mulbits, mulBits) @[base_mul.scala 39:19]
    mulBits <= _mulBits_T_3 @[base_mul.scala 39:13]
    reg a : UInt<129>, clock with :
      reset => (reset, UInt<129>("h0")) @[base_mul.scala 41:20]
    reg b : UInt<129>, clock with :
      reset => (reset, UInt<129>("h0")) @[base_mul.scala 42:20]
    reg result : UInt<130>, clock with :
      reset => (reset, UInt<130>("h0")) @[base_mul.scala 43:25]
    reg cnt : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[base_mul.scala 44:22]
    node _a_T = dshl(a, UInt<1>("h1")) @[base_mul.scala 46:24]
    node _a_T_1 = eq(next_valid, UInt<1>("h0")) @[base_mul.scala 47:13]
    node _a_T_2 = bits(io.mul_signed, 1, 1) @[base_mul.scala 48:26]
    node _a_T_3 = dshr(io.multiplicand, mulbits) @[base_mul.scala 48:49]
    node _a_T_4 = bits(_a_T_3, 0, 0) @[base_mul.scala 48:49]
    node _a_T_5 = cat(_a_T_4, io.multiplicand) @[Cat.scala 33:92]
    node _a_T_6 = cat(UInt<1>("h0"), io.multiplicand) @[Cat.scala 33:92]
    node _a_T_7 = mux(_a_T_2, _a_T_5, _a_T_6) @[base_mul.scala 48:12]
    node _a_T_8 = mux(_a_T_1, a, _a_T_7) @[base_mul.scala 47:12]
    node _a_T_9 = mux(running, _a_T, _a_T_8) @[base_mul.scala 46:12]
    a <= _a_T_9 @[base_mul.scala 46:7]
    node _b_T = dshr(b, UInt<1>("h1")) @[base_mul.scala 51:24]
    node _b_T_1 = eq(next_valid, UInt<1>("h0")) @[base_mul.scala 52:13]
    node _b_T_2 = bits(io.mul_signed, 0, 0) @[base_mul.scala 53:26]
    node _b_T_3 = dshr(io.multiplicand, mulbits) @[base_mul.scala 53:49]
    node _b_T_4 = bits(_b_T_3, 0, 0) @[base_mul.scala 53:49]
    node _b_T_5 = cat(_b_T_4, io.multiplier) @[Cat.scala 33:92]
    node _b_T_6 = cat(UInt<1>("h0"), io.multiplier) @[Cat.scala 33:92]
    node _b_T_7 = mux(_b_T_2, _b_T_5, _b_T_6) @[base_mul.scala 53:12]
    node _b_T_8 = mux(_b_T_1, b, _b_T_7) @[base_mul.scala 52:12]
    node _b_T_9 = mux(running, _b_T, _b_T_8) @[base_mul.scala 51:12]
    b <= _b_T_9 @[base_mul.scala 51:7]
    node _cnt_T = neq(state, UInt<1>("h1")) @[base_mul.scala 56:23]
    node _cnt_T_1 = eq(b, UInt<1>("h0")) @[base_mul.scala 57:20]
    node _cnt_T_2 = neq(cnt, mulBits) @[base_mul.scala 57:36]
    node _cnt_T_3 = and(_cnt_T_1, _cnt_T_2) @[base_mul.scala 57:29]
    node _cnt_T_4 = add(cnt, UInt<1>("h1")) @[base_mul.scala 58:17]
    node _cnt_T_5 = tail(_cnt_T_4, 1) @[base_mul.scala 58:17]
    node _cnt_T_6 = mux(_cnt_T_3, mulBits, _cnt_T_5) @[base_mul.scala 57:16]
    node _cnt_T_7 = mux(_cnt_T, UInt<1>("h0"), _cnt_T_6) @[base_mul.scala 56:16]
    cnt <= _cnt_T_7 @[base_mul.scala 56:8]
    node _last_T = eq(cnt, mulBits) @[base_mul.scala 60:18]
    last <= _last_T @[base_mul.scala 60:10]
    node _s_T = bits(b, 0, 0) @[base_mul.scala 61:21]
    node _s_T_1 = and(last, _s_T) @[base_mul.scala 61:17]
    node _s_T_2 = sub(result, a) @[base_mul.scala 61:32]
    node _s_T_3 = tail(_s_T_2, 1) @[base_mul.scala 61:32]
    node _s_T_4 = bits(b, 0, 0) @[base_mul.scala 62:14]
    node _s_T_5 = add(result, a) @[base_mul.scala 62:24]
    node _s_T_6 = tail(_s_T_5, 1) @[base_mul.scala 62:24]
    node _s_T_7 = mux(_s_T_4, _s_T_6, result) @[base_mul.scala 62:12]
    node _s_T_8 = mux(_s_T_1, _s_T_3, _s_T_7) @[base_mul.scala 61:11]
    s <= _s_T_8 @[base_mul.scala 61:6]
    node _result_T = eq(state, UInt<1>("h1")) @[base_mul.scala 64:23]
    node _result_T_1 = mux(_result_T, s, UInt<1>("h0")) @[base_mul.scala 64:16]
    result <= _result_T_1 @[base_mul.scala 64:11]
    node _io_out_valid_T = add(mulBits, UInt<1>("h1")) @[base_mul.scala 66:36]
    node _io_out_valid_T_1 = eq(cnt, _io_out_valid_T) @[base_mul.scala 66:25]
    io.out_valid <= _io_out_valid_T_1 @[base_mul.scala 66:17]
    node _io_mul_ready_T = eq(state, UInt<1>("h0")) @[base_mul.scala 67:27]
    io.mul_ready <= _io_mul_ready_T @[base_mul.scala 67:17]
    node _io_result_lo_T = bits(result, 63, 0) @[base_mul.scala 68:26]
    io.result_lo <= _io_result_lo_T @[base_mul.scala 68:17]
    node _io_result_hi_T = bits(result, 127, 64) @[base_mul.scala 69:26]
    io.result_hi <= _io_result_hi_T @[base_mul.scala 69:17]

  module mul :
    input clock : Clock
    input reset : Reset
    output io : { flip mul_valid : UInt<1>, flip flush : UInt<1>, flip mulw : UInt<1>, flip mul_signed : UInt<2>, flip multiplicand : UInt<64>, flip multiplier : UInt<64>, mul_ready : UInt<1>, out_valid : UInt<1>, result_hi : UInt<64>, result_lo : UInt<64>, flip sel : UInt<1>, mul_num : UInt<64>}

    inst base_mul of base_mul @[mul_switch.scala 21:24]
    base_mul.clock <= clock
    base_mul.reset <= reset
    base_mul.io.mul_valid <= io.mul_valid @[mul_switch.scala 24:21]
    base_mul.io.flush <= io.flush @[mul_switch.scala 25:17]
    base_mul.io.mulw <= io.mulw @[mul_switch.scala 26:16]
    base_mul.io.mul_signed <= io.mul_signed @[mul_switch.scala 27:22]
    base_mul.io.multiplicand <= io.multiplicand @[mul_switch.scala 28:24]
    base_mul.io.multiplier <= io.multiplier @[mul_switch.scala 29:22]
    io.mul_ready <= base_mul.io.mul_ready @[mul_switch.scala 38:15]
    io.out_valid <= base_mul.io.out_valid @[mul_switch.scala 39:15]
    io.result_hi <= base_mul.io.result_hi @[mul_switch.scala 40:15]
    io.result_lo <= base_mul.io.result_lo @[mul_switch.scala 41:15]
    reg mul_num : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[mul_switch.scala 43:24]
    node _T = eq(io.mul_valid, UInt<1>("h1")) @[mul_switch.scala 44:20]
    when _T : @[mul_switch.scala 44:27]
      node _mul_num_T = add(mul_num, UInt<1>("h1")) @[mul_switch.scala 45:24]
      node _mul_num_T_1 = tail(_mul_num_T, 1) @[mul_switch.scala 45:24]
      mul_num <= _mul_num_T_1 @[mul_switch.scala 45:13]
    io.mul_num <= mul_num @[mul_switch.scala 47:14]

  module div :
    input clock : Clock
    input reset : Reset
    output io : { flip dividend : UInt<64>, flip divisor : UInt<64>, flip div_valid : UInt<1>, flip divw : UInt<1>, flip div_signed : UInt<1>, flip flush : UInt<1>, div_ready : UInt<1>, out_valid : UInt<1>, quotient : UInt<64>, remainder : UInt<64>, div_num : UInt<64>}

    reg div_num : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[div.scala 19:24]
    node _T = eq(io.div_valid, UInt<1>("h1")) @[div.scala 20:20]
    when _T : @[div.scala 20:27]
      node _div_num_T = add(div_num, UInt<1>("h1")) @[div.scala 21:24]
      node _div_num_T_1 = tail(_div_num_T, 1) @[div.scala 21:24]
      div_num <= _div_num_T_1 @[div.scala 21:13]
    io.div_num <= div_num @[div.scala 23:14]
    node _dividend_abs_T = bits(io.dividend, 63, 63) @[div.scala 25:54]
    node _dividend_abs_T_1 = bits(_dividend_abs_T, 0, 0) @[div.scala 25:69]
    node _dividend_abs_T_2 = and(io.div_signed, _dividend_abs_T_1) @[div.scala 25:40]
    node _dividend_abs_T_3 = not(io.dividend) @[div.scala 26:27]
    node _dividend_abs_T_4 = add(_dividend_abs_T_3, UInt<1>("h1")) @[div.scala 26:48]
    node _dividend_abs_T_5 = tail(_dividend_abs_T_4, 1) @[div.scala 26:48]
    node dividend_abs = mux(_dividend_abs_T_2, _dividend_abs_T_5, io.dividend) @[div.scala 25:25]
    node _divisor_abs_T = bits(io.divisor, 63, 63) @[div.scala 27:52]
    node _divisor_abs_T_1 = bits(_divisor_abs_T, 0, 0) @[div.scala 27:67]
    node _divisor_abs_T_2 = and(io.div_signed, _divisor_abs_T_1) @[div.scala 27:39]
    node _divisor_abs_T_3 = not(io.divisor) @[div.scala 28:26]
    node _divisor_abs_T_4 = add(_divisor_abs_T_3, UInt<1>("h1")) @[div.scala 28:46]
    node _divisor_abs_T_5 = tail(_divisor_abs_T_4, 1) @[div.scala 28:46]
    node divisor_abs = mux(_divisor_abs_T_2, _divisor_abs_T_5, io.divisor) @[div.scala 27:24]
    reg quotient : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[div.scala 30:25]
    reg remainder : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[div.scala 31:26]
    reg dividend : UInt<128>, clock with :
      reset => (reset, UInt<128>("h0")) @[div.scala 32:25]
    reg divisor : UInt<65>, clock with :
      reset => (reset, UInt<65>("h0")) @[div.scala 33:24]
    reg shift_count : UInt<7>, clock with :
      reset => (reset, UInt<7>("h40")) @[div.scala 35:28]
    reg is_dividing : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[div.scala 37:28]
    reg is_dividing_divw : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[div.scala 38:33]
    reg is_dividing_signed : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[div.scala 39:35]
    wire sub : UInt<65> @[div.scala 41:16]
    node _dividend_sign_T = bits(io.dividend, 63, 63) @[div.scala 43:34]
    node dividend_sign = and(_dividend_sign_T, is_dividing_signed) @[div.scala 43:43]
    node _divisor_sign_T = bits(io.divisor, 63, 63) @[div.scala 44:32]
    node divisor_sign = and(_divisor_sign_T, is_dividing_signed) @[div.scala 44:41]
    reg quotient_sign : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[div.scala 45:30]
    reg remainder_sign : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[div.scala 46:31]
    reg out_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[div.scala 47:26]
    node _sub_T = bits(dividend, 127, 63) @[div.scala 49:18]
    node _sub_T_1 = sub(_sub_T, divisor) @[div.scala 49:36]
    node _sub_T_2 = tail(_sub_T_1, 1) @[div.scala 49:36]
    sub <= _sub_T_2 @[div.scala 49:7]
    node _io_div_ready_T = eq(is_dividing, UInt<1>("h0")) @[div.scala 51:19]
    io.div_ready <= _io_div_ready_T @[div.scala 51:16]
    when io.flush : @[div.scala 53:18]
      is_dividing <= UInt<1>("h0") @[div.scala 54:17]
      shift_count <= UInt<7>("h40") @[div.scala 55:17]
      out_valid <= UInt<1>("h0") @[div.scala 56:15]
    else :
      node _T_1 = eq(is_dividing, UInt<1>("h0")) @[div.scala 57:30]
      node _T_2 = and(io.div_valid, _T_1) @[div.scala 57:27]
      when _T_2 : @[div.scala 57:44]
        is_dividing <= UInt<1>("h1") @[div.scala 58:17]
        is_dividing_divw <= io.divw @[div.scala 59:22]
        is_dividing_signed <= io.div_signed @[div.scala 60:24]
        node _dividend_T = cat(UInt<64>("h0"), dividend_abs) @[Cat.scala 33:92]
        dividend <= _dividend_T @[div.scala 61:14]
        node _divisor_T = cat(UInt<1>("h0"), divisor_abs) @[Cat.scala 33:92]
        divisor <= _divisor_T @[div.scala 62:13]
        quotient <= UInt<1>("h0") @[div.scala 63:14]
        remainder <= UInt<1>("h0") @[div.scala 64:15]
        shift_count <= UInt<7>("h40") @[div.scala 65:17]
        node _quotient_sign_T = xor(dividend_sign, divisor_sign) @[div.scala 66:36]
        quotient_sign <= _quotient_sign_T @[div.scala 66:19]
        remainder_sign <= dividend_sign @[div.scala 67:20]
        out_valid <= UInt<1>("h0") @[div.scala 68:15]
      else :
        when is_dividing : @[div.scala 69:27]
          node _T_3 = eq(shift_count, UInt<1>("h0")) @[div.scala 70:22]
          when _T_3 : @[div.scala 70:30]
            is_dividing <= UInt<1>("h0") @[div.scala 71:19]
            node _quotient_T = not(quotient) @[div.scala 74:39]
            node _quotient_T_1 = add(_quotient_T, UInt<1>("h1")) @[div.scala 74:57]
            node _quotient_T_2 = tail(_quotient_T_1, 1) @[div.scala 74:57]
            node _quotient_T_3 = mux(quotient_sign, _quotient_T_2, quotient) @[div.scala 74:22]
            quotient <= _quotient_T_3 @[div.scala 74:16]
            node _remainder_T = bits(dividend, 127, 64) @[div.scala 75:50]
            node _remainder_T_1 = not(_remainder_T) @[div.scala 75:41]
            node _remainder_T_2 = add(_remainder_T_1, UInt<1>("h1")) @[div.scala 75:75]
            node _remainder_T_3 = tail(_remainder_T_2, 1) @[div.scala 75:75]
            node _remainder_T_4 = bits(dividend, 127, 64) @[div.scala 75:90]
            node _remainder_T_5 = mux(remainder_sign, _remainder_T_3, _remainder_T_4) @[div.scala 75:23]
            remainder <= _remainder_T_5 @[div.scala 75:17]
            out_valid <= UInt<1>("h1") @[div.scala 77:17]
          else :
            node _T_4 = bits(sub, 64, 64) @[div.scala 79:19]
            node _T_5 = bits(_T_4, 0, 0) @[div.scala 79:26]
            when _T_5 : @[div.scala 79:33]
              node _dividend_T_1 = dshl(dividend, UInt<1>("h1")) @[div.scala 80:28]
              dividend <= _dividend_T_1 @[div.scala 80:16]
              node _quotient_T_4 = dshl(quotient, UInt<1>("h1")) @[div.scala 81:28]
              quotient <= _quotient_T_4 @[div.scala 81:16]
            else :
              node _quotient_T_5 = dshl(quotient, UInt<1>("h1")) @[div.scala 83:29]
              node _quotient_T_6 = or(_quotient_T_5, UInt<1>("h1")) @[div.scala 83:37]
              quotient <= _quotient_T_6 @[div.scala 83:16]
              node _dividend_T_2 = bits(dividend, 62, 0) @[div.scala 84:35]
              node _dividend_T_3 = cat(sub, _dividend_T_2) @[Cat.scala 33:92]
              node _dividend_T_4 = shl(_dividend_T_3, 1) @[div.scala 84:47]
              dividend <= _dividend_T_4 @[div.scala 84:16]
          node _shift_count_T = sub(shift_count, UInt<1>("h1")) @[div.scala 87:32]
          node _shift_count_T_1 = tail(_shift_count_T, 1) @[div.scala 87:32]
          shift_count <= _shift_count_T_1 @[div.scala 87:17]
        else :
          out_valid <= UInt<1>("h0") @[div.scala 90:15]
    io.out_valid <= out_valid @[div.scala 98:16]
    io.quotient <= quotient @[div.scala 99:15]
    io.remainder <= remainder @[div.scala 100:16]

  module ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip src1 : UInt<64>, flip src2 : UInt<64>, flip op : UInt<19>, result : UInt<64>, flip validin : UInt<1>, readyin : UInt<1>, validout : UInt<1>, busy : UInt<1>, flip flush : UInt<1>, flip mul_sel : UInt<1>, mul_num : UInt<64>, div_num : UInt<64>}

    wire adder_a : UInt<64> @[ALU.scala 21:21]
    wire adder_b : UInt<64> @[ALU.scala 22:21]
    wire adder_cin : UInt<1> @[ALU.scala 23:23]
    wire adder_cout : UInt<1> @[ALU.scala 24:24]
    wire adder_result : UInt<64> @[ALU.scala 25:26]
    wire sum : UInt<65> @[ALU.scala 26:17]
    wire slt_result : UInt<64> @[ALU.scala 27:24]
    wire sltu_result : UInt<64> @[ALU.scala 28:25]
    wire eql_result : UInt<64> @[ALU.scala 29:24]
    adder_a <= io.src1 @[ALU.scala 30:12]
    node _adder_b_T = bits(io.op, 1, 1) @[ALU.scala 31:23]
    node _adder_b_T_1 = bits(io.op, 8, 8) @[ALU.scala 31:32]
    node _adder_b_T_2 = or(_adder_b_T, _adder_b_T_1) @[ALU.scala 31:26]
    node _adder_b_T_3 = bits(io.op, 9, 9) @[ALU.scala 31:41]
    node _adder_b_T_4 = or(_adder_b_T_2, _adder_b_T_3) @[ALU.scala 31:35]
    node _adder_b_T_5 = bits(io.op, 11, 11) @[ALU.scala 31:50]
    node _adder_b_T_6 = or(_adder_b_T_4, _adder_b_T_5) @[ALU.scala 31:44]
    node _adder_b_T_7 = not(io.src2) @[ALU.scala 31:55]
    node _adder_b_T_8 = mux(_adder_b_T_6, _adder_b_T_7, io.src2) @[ALU.scala 31:17]
    adder_b <= _adder_b_T_8 @[ALU.scala 31:12]
    node _adder_cin_T = bits(io.op, 1, 1) @[ALU.scala 32:25]
    node _adder_cin_T_1 = bits(io.op, 8, 8) @[ALU.scala 32:34]
    node _adder_cin_T_2 = or(_adder_cin_T, _adder_cin_T_1) @[ALU.scala 32:28]
    node _adder_cin_T_3 = bits(io.op, 9, 9) @[ALU.scala 32:43]
    node _adder_cin_T_4 = or(_adder_cin_T_2, _adder_cin_T_3) @[ALU.scala 32:37]
    node _adder_cin_T_5 = bits(io.op, 11, 11) @[ALU.scala 32:52]
    node _adder_cin_T_6 = or(_adder_cin_T_4, _adder_cin_T_5) @[ALU.scala 32:46]
    node _adder_cin_T_7 = mux(_adder_cin_T_6, UInt<1>("h1"), UInt<1>("h0")) @[ALU.scala 32:19]
    adder_cin <= _adder_cin_T_7 @[ALU.scala 32:14]
    node _sum_T = add(adder_a, adder_b) @[ALU.scala 33:17]
    node _sum_T_1 = add(_sum_T, adder_cin) @[ALU.scala 33:26]
    sum <= _sum_T_1 @[ALU.scala 33:8]
    node _adder_cout_T = bits(sum, 64, 64) @[ALU.scala 34:20]
    adder_cout <= _adder_cout_T @[ALU.scala 34:15]
    node _adder_result_T = bits(sum, 63, 0) @[ALU.scala 35:22]
    adder_result <= _adder_result_T @[ALU.scala 35:17]
    node _slt_result_T = mux(UInt<1>("h0"), UInt<63>("h7fffffffffffffff"), UInt<63>("h0")) @[Bitwise.scala 77:12]
    node _slt_result_T_1 = bits(io.src1, 63, 63) @[ALU.scala 37:42]
    node _slt_result_T_2 = bits(io.src2, 63, 63) @[ALU.scala 37:56]
    node _slt_result_T_3 = not(_slt_result_T_2) @[ALU.scala 37:48]
    node _slt_result_T_4 = and(_slt_result_T_1, _slt_result_T_3) @[ALU.scala 37:46]
    node _slt_result_T_5 = bits(io.src1, 63, 63) @[ALU.scala 37:73]
    node _slt_result_T_6 = bits(io.src2, 63, 63) @[ALU.scala 37:85]
    node _slt_result_T_7 = xor(_slt_result_T_5, _slt_result_T_6) @[ALU.scala 37:77]
    node _slt_result_T_8 = not(_slt_result_T_7) @[ALU.scala 37:64]
    node _slt_result_T_9 = bits(adder_result, 63, 63) @[ALU.scala 37:104]
    node _slt_result_T_10 = and(_slt_result_T_8, _slt_result_T_9) @[ALU.scala 37:91]
    node _slt_result_T_11 = or(_slt_result_T_4, _slt_result_T_10) @[ALU.scala 37:61]
    node _slt_result_T_12 = cat(_slt_result_T, _slt_result_T_11) @[Cat.scala 33:92]
    slt_result <= _slt_result_T_12 @[ALU.scala 37:15]
    node _sltu_result_T = mux(UInt<1>("h0"), UInt<63>("h7fffffffffffffff"), UInt<63>("h0")) @[Bitwise.scala 77:12]
    node _sltu_result_T_1 = not(adder_cout) @[ALU.scala 38:35]
    node _sltu_result_T_2 = cat(_sltu_result_T, _sltu_result_T_1) @[Cat.scala 33:92]
    sltu_result <= _sltu_result_T_2 @[ALU.scala 38:16]
    node _eql_result_T = mux(UInt<1>("h0"), UInt<63>("h7fffffffffffffff"), UInt<63>("h0")) @[Bitwise.scala 77:12]
    node _eql_result_T_1 = eq(adder_result, UInt<1>("h0")) @[ALU.scala 39:46]
    node _eql_result_T_2 = cat(_eql_result_T, _eql_result_T_1) @[Cat.scala 33:92]
    eql_result <= _eql_result_T_2 @[ALU.scala 39:15]
    inst mul of mul @[ALU.scala 42:19]
    mul.clock <= clock
    mul.reset <= reset
    node _T = bits(io.op, 12, 12) @[ALU.scala 43:28]
    node _T_1 = bits(io.op, 13, 13) @[ALU.scala 43:38]
    node _T_2 = or(_T, _T_1) @[ALU.scala 43:32]
    node _T_3 = bits(io.op, 14, 14) @[ALU.scala 43:48]
    node _T_4 = or(_T_2, _T_3) @[ALU.scala 43:42]
    node _T_5 = and(_T_4, io.validin) @[ALU.scala 43:53]
    mul.io.mul_valid <= _T_5 @[ALU.scala 43:19]
    mul.io.flush <= io.flush @[ALU.scala 44:15]
    node _T_6 = bits(io.op, 13, 13) @[ALU.scala 45:31]
    node _T_7 = bits(io.op, 14, 14) @[ALU.scala 45:41]
    node _T_8 = or(_T_6, _T_7) @[ALU.scala 45:35]
    node _T_9 = bits(io.op, 13, 13) @[ALU.scala 45:51]
    node _T_10 = cat(_T_8, _T_9) @[Cat.scala 33:92]
    mul.io.mul_signed <= _T_10 @[ALU.scala 45:19]
    mul.io.multiplicand <= io.src1 @[ALU.scala 46:21]
    mul.io.multiplier <= io.src2 @[ALU.scala 47:19]
    mul.io.mulw <= UInt<1>("h0") @[ALU.scala 48:13]
    mul.io.sel <= io.mul_sel @[ALU.scala 49:13]
    inst div of div @[ALU.scala 53:19]
    div.clock <= clock
    div.reset <= reset
    node _T_11 = bits(io.op, 15, 15) @[ALU.scala 54:28]
    node _T_12 = bits(io.op, 16, 16) @[ALU.scala 54:38]
    node _T_13 = or(_T_11, _T_12) @[ALU.scala 54:32]
    node _T_14 = bits(io.op, 17, 17) @[ALU.scala 54:48]
    node _T_15 = or(_T_13, _T_14) @[ALU.scala 54:42]
    node _T_16 = bits(io.op, 18, 18) @[ALU.scala 54:58]
    node _T_17 = or(_T_15, _T_16) @[ALU.scala 54:52]
    node _T_18 = and(_T_17, io.validin) @[ALU.scala 54:63]
    div.io.div_valid <= _T_18 @[ALU.scala 54:19]
    div.io.flush <= io.flush @[ALU.scala 55:15]
    node _T_19 = bits(io.op, 15, 15) @[ALU.scala 56:26]
    node _T_20 = bits(io.op, 17, 17) @[ALU.scala 56:36]
    node _T_21 = or(_T_19, _T_20) @[ALU.scala 56:30]
    div.io.div_signed <= _T_21 @[ALU.scala 56:19]
    div.io.dividend <= io.src1 @[ALU.scala 57:17]
    div.io.divisor <= io.src2 @[ALU.scala 58:16]
    div.io.divw <= UInt<1>("h0") @[ALU.scala 59:13]
    node _io_busy_T = not(mul.io.mul_ready) @[ALU.scala 61:16]
    node _io_busy_T_1 = not(div.io.div_ready) @[ALU.scala 61:35]
    node _io_busy_T_2 = or(_io_busy_T, _io_busy_T_1) @[ALU.scala 61:32]
    io.busy <= _io_busy_T_2 @[ALU.scala 61:12]
    node _io_readyin_T = and(mul.io.mul_ready, div.io.div_ready) @[ALU.scala 62:32]
    io.readyin <= _io_readyin_T @[ALU.scala 62:15]
    node _io_validout_T = or(mul.io.out_valid, div.io.out_valid) @[ALU.scala 64:33]
    io.validout <= _io_validout_T @[ALU.scala 64:16]
    node _io_result_T = bits(io.op, 0, 0) @[ALU.scala 66:25]
    node _io_result_T_1 = bits(io.op, 1, 1) @[ALU.scala 66:34]
    node _io_result_T_2 = or(_io_result_T, _io_result_T_1) @[ALU.scala 66:28]
    node _io_result_T_3 = bits(io.op, 2, 2) @[ALU.scala 67:25]
    node _io_result_T_4 = and(io.src1, io.src2) @[ALU.scala 67:36]
    node _io_result_T_5 = bits(io.op, 3, 3) @[ALU.scala 68:25]
    node _io_result_T_6 = or(io.src1, io.src2) @[ALU.scala 68:36]
    node _io_result_T_7 = bits(io.op, 4, 4) @[ALU.scala 69:25]
    node _io_result_T_8 = xor(io.src1, io.src2) @[ALU.scala 69:36]
    node _io_result_T_9 = bits(io.op, 5, 5) @[ALU.scala 70:25]
    node _io_result_T_10 = bits(io.src2, 5, 0) @[ALU.scala 70:46]
    node _io_result_T_11 = dshl(io.src1, _io_result_T_10) @[ALU.scala 70:37]
    node _io_result_T_12 = bits(_io_result_T_11, 63, 0) @[ALU.scala 70:52]
    node _io_result_T_13 = bits(io.op, 6, 6) @[ALU.scala 71:25]
    node _io_result_T_14 = bits(io.src2, 5, 0) @[ALU.scala 71:46]
    node _io_result_T_15 = dshr(io.src1, _io_result_T_14) @[ALU.scala 71:36]
    node _io_result_T_16 = bits(io.op, 7, 7) @[ALU.scala 72:25]
    node _io_result_T_17 = asSInt(io.src1) @[ALU.scala 72:38]
    node _io_result_T_18 = bits(io.src2, 5, 0) @[ALU.scala 72:54]
    node _io_result_T_19 = dshr(_io_result_T_17, _io_result_T_18) @[ALU.scala 72:44]
    node _io_result_T_20 = asUInt(_io_result_T_19) @[ALU.scala 72:62]
    node _io_result_T_21 = bits(io.op, 8, 8) @[ALU.scala 73:25]
    node _io_result_T_22 = bits(io.op, 9, 9) @[ALU.scala 74:25]
    node _io_result_T_23 = bits(io.op, 10, 10) @[ALU.scala 75:25]
    node _io_result_T_24 = not(UInt<64>("h1")) @[ALU.scala 75:44]
    node _io_result_T_25 = and(adder_result, _io_result_T_24) @[ALU.scala 75:42]
    node _io_result_T_26 = bits(io.op, 11, 11) @[ALU.scala 76:25]
    node _io_result_T_27 = bits(io.op, 12, 12) @[ALU.scala 77:25]
    node _io_result_T_28 = bits(io.op, 13, 13) @[ALU.scala 77:35]
    node _io_result_T_29 = or(_io_result_T_27, _io_result_T_28) @[ALU.scala 77:29]
    node _io_result_T_30 = bits(io.op, 14, 14) @[ALU.scala 77:45]
    node _io_result_T_31 = or(_io_result_T_29, _io_result_T_30) @[ALU.scala 77:39]
    node _io_result_T_32 = bits(io.op, 15, 15) @[ALU.scala 78:25]
    node _io_result_T_33 = bits(io.op, 16, 16) @[ALU.scala 78:35]
    node _io_result_T_34 = or(_io_result_T_32, _io_result_T_33) @[ALU.scala 78:29]
    node _io_result_T_35 = bits(io.op, 17, 17) @[ALU.scala 79:25]
    node _io_result_T_36 = bits(io.op, 18, 18) @[ALU.scala 79:35]
    node _io_result_T_37 = or(_io_result_T_35, _io_result_T_36) @[ALU.scala 79:29]
    node _io_result_T_38 = mux(_io_result_T_37, div.io.remainder, UInt<1>("h0")) @[ALU.scala 79:19]
    node _io_result_T_39 = mux(_io_result_T_34, div.io.quotient, _io_result_T_38) @[ALU.scala 78:19]
    node _io_result_T_40 = mux(_io_result_T_31, mul.io.result_lo, _io_result_T_39) @[ALU.scala 77:19]
    node _io_result_T_41 = mux(_io_result_T_26, eql_result, _io_result_T_40) @[ALU.scala 76:19]
    node _io_result_T_42 = mux(_io_result_T_23, _io_result_T_25, _io_result_T_41) @[ALU.scala 75:19]
    node _io_result_T_43 = mux(_io_result_T_22, sltu_result, _io_result_T_42) @[ALU.scala 74:19]
    node _io_result_T_44 = mux(_io_result_T_21, slt_result, _io_result_T_43) @[ALU.scala 73:19]
    node _io_result_T_45 = mux(_io_result_T_16, _io_result_T_20, _io_result_T_44) @[ALU.scala 72:19]
    node _io_result_T_46 = mux(_io_result_T_13, _io_result_T_15, _io_result_T_45) @[ALU.scala 71:19]
    node _io_result_T_47 = mux(_io_result_T_9, _io_result_T_12, _io_result_T_46) @[ALU.scala 70:19]
    node _io_result_T_48 = mux(_io_result_T_7, _io_result_T_8, _io_result_T_47) @[ALU.scala 69:19]
    node _io_result_T_49 = mux(_io_result_T_5, _io_result_T_6, _io_result_T_48) @[ALU.scala 68:19]
    node _io_result_T_50 = mux(_io_result_T_3, _io_result_T_4, _io_result_T_49) @[ALU.scala 67:19]
    node _io_result_T_51 = mux(_io_result_T_2, adder_result, _io_result_T_50) @[ALU.scala 66:19]
    io.result <= _io_result_T_51 @[ALU.scala 66:14]
    io.mul_num <= mul.io.mul_num @[ALU.scala 85:16]
    io.div_num <= div.io.div_num @[ALU.scala 86:16]

  extmodule ebreak :
    input en_break : UInt<1>
    input clk : Clock
    defname = ebreak

  module EXU :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { pc : UInt<32>, inst : UInt<32>, rs1 : UInt<5>, rs2 : UInt<5>, rd : UInt<5>, imm : UInt<64>, op : UInt<80>, typ : UInt<6>, isJump : UInt<1>, clearidx : UInt<5>}}, out : { flip ready : UInt<1>, valid : UInt<1>, bits : { pc : UInt<32>, inst : UInt<32>, pc_dnpc : UInt<64>, gpr : { idx_w : UInt<5>, en_w : UInt<1>, val_w : UInt<64>}, csr : { en_w : UInt<1>, idx_w : UInt<12>, val_w : UInt<64>, no : UInt<64>, epc : UInt<64>}, isJump : UInt<1>, clearidx : UInt<5>}}, flip gpr : { flip idx_r1 : UInt<5>, flip idx_r2 : UInt<5>, flip en_r1 : UInt<1>, flip en_r2 : UInt<1>, val_r1 : UInt<64>, val_r2 : UInt<64>}, flip csr : { flip idx_r : UInt<12>, flip en_r : UInt<1>, val_r : UInt<64>}, lm : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}}, flip mul_sel : UInt<1>, flip flush : UInt<1>, flip bypass_idx : UInt<5>, flip bypass_data : UInt<64>, p_error : UInt<1>, mul_num : UInt<64>, div_num : UInt<64>}

    reg EXE_reg_flush : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EXU.scala 34:34]
    EXE_reg_flush <= io.flush @[EXU.scala 35:22]
    wire flush : UInt<1> @[EXU.scala 36:25]
    node _flush_T = or(EXE_reg_flush, io.flush) @[EXU.scala 37:32]
    flush <= _flush_T @[EXU.scala 37:15]
    node _gpr_val_r1_T = eq(io.bypass_idx, io.gpr.idx_r1) @[EXU.scala 40:45]
    node _gpr_val_r1_T_1 = neq(io.bypass_idx, UInt<1>("h0")) @[EXU.scala 40:82]
    node _gpr_val_r1_T_2 = and(_gpr_val_r1_T, _gpr_val_r1_T_1) @[EXU.scala 40:64]
    node gpr_val_r1 = mux(_gpr_val_r1_T_2, io.bypass_data, io.gpr.val_r1) @[EXU.scala 40:29]
    node _gpr_val_r2_T = eq(io.bypass_idx, io.gpr.idx_r2) @[EXU.scala 41:45]
    node _gpr_val_r2_T_1 = neq(io.bypass_idx, UInt<1>("h0")) @[EXU.scala 41:82]
    node _gpr_val_r2_T_2 = and(_gpr_val_r2_T, _gpr_val_r2_T_1) @[EXU.scala 41:64]
    node gpr_val_r2 = mux(_gpr_val_r2_T_2, io.bypass_data, io.gpr.val_r2) @[EXU.scala 41:29]
    node _EXE_reg_pc_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg EXE_reg_pc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg.scala 35:20]
    when _EXE_reg_pc_T : @[Reg.scala 36:18]
      EXE_reg_pc <= io.in.bits.pc @[Reg.scala 36:22]
    node _EXE_reg_inst_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg EXE_reg_inst : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg.scala 35:20]
    when _EXE_reg_inst_T : @[Reg.scala 36:18]
      EXE_reg_inst <= io.in.bits.inst @[Reg.scala 36:22]
    node _EXE_reg_rs1_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg EXE_reg_rs1 : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Reg.scala 35:20]
    when _EXE_reg_rs1_T : @[Reg.scala 36:18]
      EXE_reg_rs1 <= io.in.bits.rs1 @[Reg.scala 36:22]
    node _EXE_reg_rs2_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg EXE_reg_rs2 : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Reg.scala 35:20]
    when _EXE_reg_rs2_T : @[Reg.scala 36:18]
      EXE_reg_rs2 <= io.in.bits.rs2 @[Reg.scala 36:22]
    node _EXE_reg_rd_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg EXE_reg_rd : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Reg.scala 35:20]
    when _EXE_reg_rd_T : @[Reg.scala 36:18]
      EXE_reg_rd <= io.in.bits.rd @[Reg.scala 36:22]
    node _EXE_reg_imm_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg EXE_reg_imm : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[Reg.scala 35:20]
    when _EXE_reg_imm_T : @[Reg.scala 36:18]
      EXE_reg_imm <= io.in.bits.imm @[Reg.scala 36:22]
    node _EXE_reg_op_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg EXE_reg_op : UInt<80>, clock with :
      reset => (reset, UInt<80>("h0")) @[Reg.scala 35:20]
    when _EXE_reg_op_T : @[Reg.scala 36:18]
      EXE_reg_op <= io.in.bits.op @[Reg.scala 36:22]
    node _EXE_reg_typ_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg EXE_reg_typ : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[Reg.scala 35:20]
    when _EXE_reg_typ_T : @[Reg.scala 36:18]
      EXE_reg_typ <= io.in.bits.typ @[Reg.scala 36:22]
    node _EXE_reg_isJump_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg EXE_reg_isJump : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when _EXE_reg_isJump_T : @[Reg.scala 36:18]
      EXE_reg_isJump <= io.in.bits.isJump @[Reg.scala 36:22]
    node _EXE_reg_clearidx_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg EXE_reg_clearidx : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Reg.scala 35:20]
    when _EXE_reg_clearidx_T : @[Reg.scala 36:18]
      EXE_reg_clearidx <= io.in.bits.clearidx @[Reg.scala 36:22]
    reg EXE_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[EXU.scala 53:34]
    node _io_p_error_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    node _io_p_error_T_1 = neq(io.out.bits.pc_dnpc, io.in.bits.pc) @[EXU.scala 58:56]
    node _io_p_error_T_2 = and(_io_p_error_T, _io_p_error_T_1) @[EXU.scala 58:33]
    node _io_p_error_T_3 = neq(EXE_reg_pc, UInt<1>("h0")) @[EXU.scala 58:89]
    node _io_p_error_T_4 = and(_io_p_error_T_2, _io_p_error_T_3) @[EXU.scala 58:75]
    node _io_p_error_T_5 = not(EXE_reg_isJump) @[EXU.scala 58:101]
    node _io_p_error_T_6 = and(_io_p_error_T_4, _io_p_error_T_5) @[EXU.scala 58:98]
    io.p_error <= _io_p_error_T_6 @[EXU.scala 58:19]
    io.out.bits.isJump <= EXE_reg_isJump @[EXU.scala 60:27]
    io.out.bits.clearidx <= EXE_reg_clearidx @[EXU.scala 61:29]
    inst lsu of LSU @[EXU.scala 63:25]
    lsu.clock <= clock
    lsu.reset <= reset
    wire op_r : UInt<1> @[EXU.scala 65:22]
    wire op_w : UInt<1> @[EXU.scala 66:22]
    wire op_mul : UInt<1> @[EXU.scala 67:24]
    wire op_div : UInt<1> @[EXU.scala 68:24]
    wire op_wait : UInt<1> @[EXU.scala 69:25]
    wire op_rw : UInt<1> @[EXU.scala 70:23]
    wire op_alu : UInt<1> @[EXU.scala 71:24]
    node _op_r_T = bits(EXE_reg_op, 38, 38) @[EXU.scala 72:25]
    node _op_r_T_1 = bits(EXE_reg_op, 39, 39) @[EXU.scala 72:41]
    node _op_r_T_2 = or(_op_r_T, _op_r_T_1) @[EXU.scala 72:30]
    node _op_r_T_3 = bits(EXE_reg_op, 40, 40) @[EXU.scala 72:57]
    node _op_r_T_4 = or(_op_r_T_2, _op_r_T_3) @[EXU.scala 72:46]
    node _op_r_T_5 = bits(EXE_reg_op, 41, 41) @[EXU.scala 72:73]
    node _op_r_T_6 = or(_op_r_T_4, _op_r_T_5) @[EXU.scala 72:62]
    node _op_r_T_7 = bits(EXE_reg_op, 46, 46) @[EXU.scala 72:89]
    node _op_r_T_8 = or(_op_r_T_6, _op_r_T_7) @[EXU.scala 72:78]
    node _op_r_T_9 = bits(EXE_reg_op, 47, 47) @[EXU.scala 72:105]
    node _op_r_T_10 = or(_op_r_T_8, _op_r_T_9) @[EXU.scala 72:94]
    node _op_r_T_11 = bits(EXE_reg_op, 48, 48) @[EXU.scala 72:121]
    node _op_r_T_12 = or(_op_r_T_10, _op_r_T_11) @[EXU.scala 72:110]
    op_r <= _op_r_T_12 @[EXU.scala 72:13]
    node _op_w_T = bits(EXE_reg_op, 42, 42) @[EXU.scala 73:25]
    node _op_w_T_1 = bits(EXE_reg_op, 43, 43) @[EXU.scala 73:41]
    node _op_w_T_2 = or(_op_w_T, _op_w_T_1) @[EXU.scala 73:30]
    node _op_w_T_3 = bits(EXE_reg_op, 44, 44) @[EXU.scala 73:57]
    node _op_w_T_4 = or(_op_w_T_2, _op_w_T_3) @[EXU.scala 73:46]
    node _op_w_T_5 = bits(EXE_reg_op, 45, 45) @[EXU.scala 73:73]
    node _op_w_T_6 = or(_op_w_T_4, _op_w_T_5) @[EXU.scala 73:62]
    op_w <= _op_w_T_6 @[EXU.scala 73:13]
    node _op_mul_T = bits(EXE_reg_op, 50, 50) @[EXU.scala 74:27]
    node _op_mul_T_1 = bits(EXE_reg_op, 51, 51) @[EXU.scala 74:42]
    node _op_mul_T_2 = or(_op_mul_T, _op_mul_T_1) @[EXU.scala 74:31]
    node _op_mul_T_3 = bits(EXE_reg_op, 52, 52) @[EXU.scala 74:57]
    node _op_mul_T_4 = or(_op_mul_T_2, _op_mul_T_3) @[EXU.scala 74:46]
    node _op_mul_T_5 = bits(EXE_reg_op, 53, 53) @[EXU.scala 74:72]
    node _op_mul_T_6 = or(_op_mul_T_4, _op_mul_T_5) @[EXU.scala 74:61]
    node _op_mul_T_7 = bits(EXE_reg_op, 54, 54) @[EXU.scala 74:87]
    node _op_mul_T_8 = or(_op_mul_T_6, _op_mul_T_7) @[EXU.scala 74:76]
    op_mul <= _op_mul_T_8 @[EXU.scala 74:15]
    node _op_div_T = bits(EXE_reg_op, 55, 55) @[EXU.scala 75:27]
    node _op_div_T_1 = bits(EXE_reg_op, 56, 56) @[EXU.scala 75:42]
    node _op_div_T_2 = or(_op_div_T, _op_div_T_1) @[EXU.scala 75:31]
    node _op_div_T_3 = bits(EXE_reg_op, 57, 57) @[EXU.scala 75:57]
    node _op_div_T_4 = or(_op_div_T_2, _op_div_T_3) @[EXU.scala 75:46]
    node _op_div_T_5 = bits(EXE_reg_op, 58, 58) @[EXU.scala 75:72]
    node _op_div_T_6 = or(_op_div_T_4, _op_div_T_5) @[EXU.scala 75:61]
    node _op_div_T_7 = bits(EXE_reg_op, 59, 59) @[EXU.scala 75:87]
    node _op_div_T_8 = or(_op_div_T_6, _op_div_T_7) @[EXU.scala 75:76]
    node _op_div_T_9 = bits(EXE_reg_op, 60, 60) @[EXU.scala 75:102]
    node _op_div_T_10 = or(_op_div_T_8, _op_div_T_9) @[EXU.scala 75:91]
    node _op_div_T_11 = bits(EXE_reg_op, 61, 61) @[EXU.scala 75:117]
    node _op_div_T_12 = or(_op_div_T_10, _op_div_T_11) @[EXU.scala 75:106]
    node _op_div_T_13 = bits(EXE_reg_op, 62, 62) @[EXU.scala 75:132]
    node _op_div_T_14 = or(_op_div_T_12, _op_div_T_13) @[EXU.scala 75:121]
    op_div <= _op_div_T_14 @[EXU.scala 75:15]
    node _op_wait_T = or(op_r, op_w) @[EXU.scala 76:22]
    node _op_wait_T_1 = or(_op_wait_T, op_mul) @[EXU.scala 76:27]
    node _op_wait_T_2 = or(_op_wait_T_1, op_div) @[EXU.scala 76:34]
    op_wait <= _op_wait_T_2 @[EXU.scala 76:16]
    node _op_rw_T = bits(io.in.bits.op, 38, 38) @[EXU.scala 77:29]
    node _op_rw_T_1 = bits(io.in.bits.op, 39, 39) @[EXU.scala 77:48]
    node _op_rw_T_2 = or(_op_rw_T, _op_rw_T_1) @[EXU.scala 77:34]
    node _op_rw_T_3 = bits(io.in.bits.op, 40, 40) @[EXU.scala 77:67]
    node _op_rw_T_4 = or(_op_rw_T_2, _op_rw_T_3) @[EXU.scala 77:53]
    node _op_rw_T_5 = bits(io.in.bits.op, 41, 41) @[EXU.scala 77:86]
    node _op_rw_T_6 = or(_op_rw_T_4, _op_rw_T_5) @[EXU.scala 77:72]
    node _op_rw_T_7 = bits(io.in.bits.op, 46, 46) @[EXU.scala 77:105]
    node _op_rw_T_8 = or(_op_rw_T_6, _op_rw_T_7) @[EXU.scala 77:91]
    node _op_rw_T_9 = bits(io.in.bits.op, 47, 47) @[EXU.scala 77:124]
    node _op_rw_T_10 = or(_op_rw_T_8, _op_rw_T_9) @[EXU.scala 77:110]
    node _op_rw_T_11 = bits(io.in.bits.op, 48, 48) @[EXU.scala 77:143]
    node _op_rw_T_12 = or(_op_rw_T_10, _op_rw_T_11) @[EXU.scala 77:129]
    node _op_rw_T_13 = bits(io.in.bits.op, 42, 42) @[EXU.scala 77:161]
    node _op_rw_T_14 = or(_op_rw_T_12, _op_rw_T_13) @[EXU.scala 77:147]
    node _op_rw_T_15 = bits(io.in.bits.op, 43, 43) @[EXU.scala 77:180]
    node _op_rw_T_16 = or(_op_rw_T_14, _op_rw_T_15) @[EXU.scala 77:166]
    node _op_rw_T_17 = bits(io.in.bits.op, 44, 44) @[EXU.scala 77:199]
    node _op_rw_T_18 = or(_op_rw_T_16, _op_rw_T_17) @[EXU.scala 77:185]
    node _op_rw_T_19 = bits(io.in.bits.op, 45, 45) @[EXU.scala 77:218]
    node _op_rw_T_20 = or(_op_rw_T_18, _op_rw_T_19) @[EXU.scala 77:204]
    op_rw <= _op_rw_T_20 @[EXU.scala 77:14]
    node _op_alu_T = bits(io.in.bits.op, 50, 50) @[EXU.scala 78:30]
    node _op_alu_T_1 = bits(io.in.bits.op, 51, 51) @[EXU.scala 78:48]
    node _op_alu_T_2 = or(_op_alu_T, _op_alu_T_1) @[EXU.scala 78:34]
    node _op_alu_T_3 = bits(io.in.bits.op, 52, 52) @[EXU.scala 78:66]
    node _op_alu_T_4 = or(_op_alu_T_2, _op_alu_T_3) @[EXU.scala 78:52]
    node _op_alu_T_5 = bits(io.in.bits.op, 53, 53) @[EXU.scala 78:84]
    node _op_alu_T_6 = or(_op_alu_T_4, _op_alu_T_5) @[EXU.scala 78:70]
    node _op_alu_T_7 = bits(io.in.bits.op, 54, 54) @[EXU.scala 78:102]
    node _op_alu_T_8 = or(_op_alu_T_6, _op_alu_T_7) @[EXU.scala 78:88]
    node _op_alu_T_9 = bits(io.in.bits.op, 55, 55) @[EXU.scala 78:120]
    node _op_alu_T_10 = or(_op_alu_T_8, _op_alu_T_9) @[EXU.scala 78:106]
    node _op_alu_T_11 = bits(io.in.bits.op, 56, 56) @[EXU.scala 78:138]
    node _op_alu_T_12 = or(_op_alu_T_10, _op_alu_T_11) @[EXU.scala 78:124]
    node _op_alu_T_13 = bits(io.in.bits.op, 57, 57) @[EXU.scala 78:156]
    node _op_alu_T_14 = or(_op_alu_T_12, _op_alu_T_13) @[EXU.scala 78:142]
    node _op_alu_T_15 = bits(io.in.bits.op, 58, 58) @[EXU.scala 78:174]
    node _op_alu_T_16 = or(_op_alu_T_14, _op_alu_T_15) @[EXU.scala 78:160]
    node _op_alu_T_17 = bits(io.in.bits.op, 59, 59) @[EXU.scala 78:192]
    node _op_alu_T_18 = or(_op_alu_T_16, _op_alu_T_17) @[EXU.scala 78:178]
    node _op_alu_T_19 = bits(io.in.bits.op, 60, 60) @[EXU.scala 78:210]
    node _op_alu_T_20 = or(_op_alu_T_18, _op_alu_T_19) @[EXU.scala 78:196]
    node _op_alu_T_21 = bits(io.in.bits.op, 61, 61) @[EXU.scala 78:228]
    node _op_alu_T_22 = or(_op_alu_T_20, _op_alu_T_21) @[EXU.scala 78:214]
    node _op_alu_T_23 = bits(io.in.bits.op, 62, 62) @[EXU.scala 78:246]
    node _op_alu_T_24 = or(_op_alu_T_22, _op_alu_T_23) @[EXU.scala 78:232]
    op_alu <= _op_alu_T_24 @[EXU.scala 78:15]
    wire src1 : UInt<64> @[EXU.scala 80:22]
    wire src2 : UInt<64> @[EXU.scala 81:22]
    wire dest : UInt<64> @[EXU.scala 82:22]
    node _src1_T = bits(EXE_reg_typ, 0, 0) @[EXU.scala 83:31]
    node _src1_T_1 = bits(EXE_reg_typ, 2, 2) @[EXU.scala 83:46]
    node _src1_T_2 = or(_src1_T, _src1_T_1) @[EXU.scala 83:34]
    node _src1_T_3 = bits(EXE_reg_typ, 4, 4) @[EXU.scala 83:61]
    node _src1_T_4 = or(_src1_T_2, _src1_T_3) @[EXU.scala 83:49]
    node _src1_T_5 = bits(EXE_reg_typ, 5, 5) @[EXU.scala 83:76]
    node _src1_T_6 = or(_src1_T_4, _src1_T_5) @[EXU.scala 83:64]
    node _src1_T_7 = bits(EXE_reg_typ, 1, 1) @[EXU.scala 84:29]
    node _src1_T_8 = bits(EXE_reg_typ, 3, 3) @[EXU.scala 84:44]
    node _src1_T_9 = or(_src1_T_7, _src1_T_8) @[EXU.scala 84:32]
    node _src1_T_10 = mux(_src1_T_9, EXE_reg_imm, UInt<1>("h0")) @[EXU.scala 84:16]
    node _src1_T_11 = mux(_src1_T_6, gpr_val_r1, _src1_T_10) @[EXU.scala 83:18]
    src1 <= _src1_T_11 @[EXU.scala 83:13]
    node _src2_T = bits(EXE_reg_typ, 2, 2) @[EXU.scala 87:31]
    node _src2_T_1 = bits(EXE_reg_typ, 4, 4) @[EXU.scala 87:46]
    node _src2_T_2 = or(_src2_T, _src2_T_1) @[EXU.scala 87:34]
    node _src2_T_3 = bits(EXE_reg_typ, 5, 5) @[EXU.scala 87:61]
    node _src2_T_4 = or(_src2_T_2, _src2_T_3) @[EXU.scala 87:49]
    node _src2_T_5 = bits(EXE_reg_typ, 0, 0) @[EXU.scala 88:28]
    node _src2_T_6 = mux(_src2_T_5, EXE_reg_imm, UInt<1>("h0")) @[EXU.scala 88:16]
    node _src2_T_7 = mux(_src2_T_4, gpr_val_r2, _src2_T_6) @[EXU.scala 87:18]
    src2 <= _src2_T_7 @[EXU.scala 87:13]
    node _dest_T = bits(EXE_reg_typ, 2, 2) @[EXU.scala 91:31]
    node _dest_T_1 = bits(EXE_reg_typ, 4, 4) @[EXU.scala 91:46]
    node _dest_T_2 = or(_dest_T, _dest_T_1) @[EXU.scala 91:34]
    node _dest_T_3 = mux(_dest_T_2, EXE_reg_imm, EXE_reg_rd) @[EXU.scala 91:18]
    dest <= _dest_T_3 @[EXU.scala 91:13]
    inst alu of ALU @[EXU.scala 94:23]
    alu.clock <= clock
    alu.reset <= reset
    reg lsu_finish : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EXU.scala 96:31]
    reg alu_finish : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EXU.scala 97:31]
    reg alu_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[EXU.scala 98:31]
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[EXU.scala 100:28]
    node _lsu_finish_T = bits(flush, 0, 0) @[EXU.scala 103:33]
    node _lsu_finish_T_1 = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    node _lsu_finish_T_2 = bits(op_rw, 0, 0) @[EXU.scala 104:46]
    node _lsu_finish_T_3 = and(_lsu_finish_T_1, _lsu_finish_T_2) @[EXU.scala 104:38]
    node _lsu_finish_T_4 = and(lsu.io.ls.out.ready, lsu.io.ls.out.valid) @[Decoupled.scala 52:35]
    node _lsu_finish_T_5 = not(op_r) @[EXU.scala 105:50]
    node _lsu_finish_T_6 = not(op_w) @[EXU.scala 105:60]
    node _lsu_finish_T_7 = and(_lsu_finish_T_5, _lsu_finish_T_6) @[EXU.scala 105:57]
    node _lsu_finish_T_8 = bits(_lsu_finish_T_7, 0, 0) @[EXU.scala 105:68]
    node _lsu_finish_T_9 = or(_lsu_finish_T_4, _lsu_finish_T_8) @[EXU.scala 105:46]
    node _lsu_finish_T_10 = mux(_lsu_finish_T_9, UInt<1>("h1"), lsu_finish) @[EXU.scala 105:26]
    node _lsu_finish_T_11 = mux(_lsu_finish_T_3, UInt<1>("h0"), _lsu_finish_T_10) @[EXU.scala 104:26]
    node _lsu_finish_T_12 = mux(_lsu_finish_T, UInt<1>("h1"), _lsu_finish_T_11) @[EXU.scala 103:26]
    lsu_finish <= _lsu_finish_T_12 @[EXU.scala 103:20]
    node _alu_finish_T = bits(flush, 0, 0) @[EXU.scala 106:33]
    node _alu_finish_T_1 = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    node _alu_finish_T_2 = bits(op_alu, 0, 0) @[EXU.scala 107:47]
    node _alu_finish_T_3 = and(_alu_finish_T_1, _alu_finish_T_2) @[EXU.scala 107:38]
    node _alu_finish_T_4 = not(op_mul) @[EXU.scala 108:48]
    node _alu_finish_T_5 = not(op_div) @[EXU.scala 108:60]
    node _alu_finish_T_6 = and(_alu_finish_T_4, _alu_finish_T_5) @[EXU.scala 108:57]
    node _alu_finish_T_7 = or(alu.io.validout, _alu_finish_T_6) @[EXU.scala 108:44]
    node _alu_finish_T_8 = bits(_alu_finish_T_7, 0, 0) @[EXU.scala 108:71]
    node _alu_finish_T_9 = mux(_alu_finish_T_8, UInt<1>("h1"), alu_finish) @[EXU.scala 108:26]
    node _alu_finish_T_10 = mux(_alu_finish_T_3, UInt<1>("h0"), _alu_finish_T_9) @[EXU.scala 107:26]
    node _alu_finish_T_11 = mux(_alu_finish_T, UInt<1>("h1"), _alu_finish_T_10) @[EXU.scala 106:26]
    alu_finish <= _alu_finish_T_11 @[EXU.scala 106:20]
    node _alu_valid_T = bits(flush, 0, 0) @[EXU.scala 109:33]
    node _alu_valid_T_1 = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    node _alu_valid_T_2 = bits(op_alu, 0, 0) @[EXU.scala 110:47]
    node _alu_valid_T_3 = and(_alu_valid_T_1, _alu_valid_T_2) @[EXU.scala 110:38]
    node _alu_valid_T_4 = eq(alu.io.busy, UInt<1>("h0")) @[EXU.scala 111:27]
    node _alu_valid_T_5 = mux(_alu_valid_T_4, UInt<1>("h0"), alu_valid) @[EXU.scala 111:26]
    node _alu_valid_T_6 = mux(_alu_valid_T_3, UInt<1>("h1"), _alu_valid_T_5) @[EXU.scala 110:26]
    node _alu_valid_T_7 = mux(_alu_valid_T, UInt<1>("h0"), _alu_valid_T_6) @[EXU.scala 109:26]
    alu_valid <= _alu_valid_T_7 @[EXU.scala 109:20]
    node _state_T = bits(flush, 0, 0) @[EXU.scala 116:38]
    node _state_T_1 = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    node _state_T_2 = mux(_state_T_1, UInt<2>("h2"), UInt<2>("h0")) @[EXU.scala 116:55]
    node _state_T_3 = mux(_state_T, UInt<2>("h0"), _state_T_2) @[EXU.scala 116:31]
    node _state_T_4 = bits(flush, 0, 0) @[EXU.scala 117:38]
    node _state_T_5 = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    node _state_T_6 = not(_state_T_5) @[EXU.scala 117:58]
    node _state_T_7 = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    node _state_T_8 = not(_state_T_7) @[EXU.scala 117:73]
    node _state_T_9 = or(_state_T_6, _state_T_8) @[EXU.scala 117:71]
    node _state_T_10 = eq(op_wait, UInt<1>("h0")) @[EXU.scala 117:92]
    node _state_T_11 = and(lsu.io.ls.out.ready, lsu.io.ls.out.valid) @[Decoupled.scala 52:35]
    node _state_T_12 = or(_state_T_10, _state_T_11) @[EXU.scala 117:101]
    node _state_T_13 = bits(alu.io.validout, 0, 0) @[EXU.scala 117:137]
    node _state_T_14 = or(_state_T_12, _state_T_13) @[EXU.scala 117:120]
    node _state_T_15 = and(_state_T_9, _state_T_14) @[EXU.scala 117:87]
    node _state_T_16 = mux(_state_T_15, UInt<2>("h0"), UInt<2>("h2")) @[EXU.scala 117:55]
    node _state_T_17 = mux(_state_T_4, UInt<2>("h0"), _state_T_16) @[EXU.scala 117:31]
    node _state_T_18 = eq(UInt<2>("h0"), state) @[Mux.scala 81:61]
    node _state_T_19 = mux(_state_T_18, _state_T_3, UInt<2>("h0")) @[Mux.scala 81:58]
    node _state_T_20 = eq(UInt<2>("h2"), state) @[Mux.scala 81:61]
    node _state_T_21 = mux(_state_T_20, _state_T_17, _state_T_19) @[Mux.scala 81:58]
    state <= _state_T_21 @[EXU.scala 115:14]
    node _lsu_rdata_T = and(lsu.io.ls.out.ready, lsu.io.ls.out.valid) @[Decoupled.scala 52:35]
    reg lsu_rdata : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when _lsu_rdata_T : @[Reg.scala 36:18]
      lsu_rdata <= lsu.io.ls.out.bits.rdata @[Reg.scala 36:22]
    node _alu_res_T = bits(alu.io.validout, 0, 0) @[EXU.scala 121:65]
    reg alu_res : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when _alu_res_T : @[Reg.scala 36:18]
      alu_res <= alu.io.result @[Reg.scala 36:22]
    wire alu_result : UInt<64> @[EXU.scala 122:28]
    node _alu_result_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    node _alu_result_T_1 = mux(_alu_result_T, alu.io.result, alu_res) @[EXU.scala 123:24]
    alu_result <= _alu_result_T_1 @[EXU.scala 123:19]
    node _io_in_ready_T = and(lsu.io.ls.out.ready, lsu.io.ls.out.valid) @[Decoupled.scala 52:35]
    node _io_in_ready_T_1 = or(lsu_finish, _io_in_ready_T) @[EXU.scala 125:49]
    node _io_in_ready_T_2 = and(io.out.ready, _io_in_ready_T_1) @[EXU.scala 125:36]
    node _io_in_ready_T_3 = or(alu_finish, alu.io.validout) @[EXU.scala 125:83]
    node _io_in_ready_T_4 = and(_io_in_ready_T_2, _io_in_ready_T_3) @[EXU.scala 125:70]
    io.in.ready <= _io_in_ready_T_4 @[EXU.scala 125:20]
    node _io_out_valid_T = eq(state, UInt<2>("h2")) @[EXU.scala 126:30]
    node _io_out_valid_T_1 = and(lsu.io.ls.out.ready, lsu.io.ls.out.valid) @[Decoupled.scala 52:35]
    node _io_out_valid_T_2 = or(lsu_finish, _io_out_valid_T_1) @[EXU.scala 126:60]
    node _io_out_valid_T_3 = and(_io_out_valid_T, _io_out_valid_T_2) @[EXU.scala 126:47]
    node _io_out_valid_T_4 = or(alu_finish, alu.io.validout) @[EXU.scala 126:94]
    node _io_out_valid_T_5 = and(_io_out_valid_T_3, _io_out_valid_T_4) @[EXU.scala 126:81]
    node _io_out_valid_T_6 = bits(flush, 0, 0) @[EXU.scala 126:122]
    node _io_out_valid_T_7 = not(_io_out_valid_T_6) @[EXU.scala 126:115]
    node _io_out_valid_T_8 = and(_io_out_valid_T_5, _io_out_valid_T_7) @[EXU.scala 126:112]
    node _io_out_valid_T_9 = and(_io_out_valid_T_8, EXE_reg_valid) @[EXU.scala 126:130]
    io.out.valid <= _io_out_valid_T_9 @[EXU.scala 126:21]
    lsu.io.flush <= flush @[EXU.scala 129:21]
    lsu.io.en_r <= op_r @[EXU.scala 130:20]
    lsu.io.en_w <= op_w @[EXU.scala 131:20]
    lsu.io.ls.out.ready <= io.out.ready @[EXU.scala 132:28]
    node _lsu_io_ls_in_valid_T = eq(state, UInt<2>("h2")) @[EXU.scala 133:36]
    node _lsu_io_ls_in_valid_T_1 = not(lsu_finish) @[EXU.scala 133:55]
    node _lsu_io_ls_in_valid_T_2 = and(_lsu_io_ls_in_valid_T, _lsu_io_ls_in_valid_T_1) @[EXU.scala 133:53]
    node _lsu_io_ls_in_valid_T_3 = and(_lsu_io_ls_in_valid_T_2, EXE_reg_valid) @[EXU.scala 133:68]
    lsu.io.ls.in.valid <= _lsu_io_ls_in_valid_T_3 @[EXU.scala 133:27]
    node _lsu_io_ls_in_bits_raddr_T = bits(EXE_reg_op, 38, 38) @[EXU.scala 134:48]
    node _lsu_io_ls_in_bits_raddr_T_1 = bits(EXE_reg_op, 39, 39) @[EXU.scala 134:63]
    node _lsu_io_ls_in_bits_raddr_T_2 = or(_lsu_io_ls_in_bits_raddr_T, _lsu_io_ls_in_bits_raddr_T_1) @[EXU.scala 134:52]
    node _lsu_io_ls_in_bits_raddr_T_3 = bits(EXE_reg_op, 40, 40) @[EXU.scala 134:78]
    node _lsu_io_ls_in_bits_raddr_T_4 = or(_lsu_io_ls_in_bits_raddr_T_2, _lsu_io_ls_in_bits_raddr_T_3) @[EXU.scala 134:67]
    node _lsu_io_ls_in_bits_raddr_T_5 = bits(EXE_reg_op, 41, 41) @[EXU.scala 134:93]
    node _lsu_io_ls_in_bits_raddr_T_6 = or(_lsu_io_ls_in_bits_raddr_T_4, _lsu_io_ls_in_bits_raddr_T_5) @[EXU.scala 134:82]
    node _lsu_io_ls_in_bits_raddr_T_7 = bits(EXE_reg_op, 46, 46) @[EXU.scala 134:108]
    node _lsu_io_ls_in_bits_raddr_T_8 = or(_lsu_io_ls_in_bits_raddr_T_6, _lsu_io_ls_in_bits_raddr_T_7) @[EXU.scala 134:97]
    node _lsu_io_ls_in_bits_raddr_T_9 = bits(EXE_reg_op, 47, 47) @[EXU.scala 134:123]
    node _lsu_io_ls_in_bits_raddr_T_10 = or(_lsu_io_ls_in_bits_raddr_T_8, _lsu_io_ls_in_bits_raddr_T_9) @[EXU.scala 134:112]
    node _lsu_io_ls_in_bits_raddr_T_11 = bits(EXE_reg_op, 48, 48) @[EXU.scala 134:138]
    node _lsu_io_ls_in_bits_raddr_T_12 = or(_lsu_io_ls_in_bits_raddr_T_10, _lsu_io_ls_in_bits_raddr_T_11) @[EXU.scala 134:127]
    node _lsu_io_ls_in_bits_raddr_T_13 = mux(_lsu_io_ls_in_bits_raddr_T_12, alu.io.result, UInt<1>("h0")) @[EXU.scala 134:37]
    lsu.io.ls.in.bits.raddr <= _lsu_io_ls_in_bits_raddr_T_13 @[EXU.scala 134:32]
    node _lsu_io_ls_in_bits_waddr_T = bits(EXE_reg_op, 42, 42) @[EXU.scala 135:48]
    node _lsu_io_ls_in_bits_waddr_T_1 = bits(EXE_reg_op, 43, 43) @[EXU.scala 135:63]
    node _lsu_io_ls_in_bits_waddr_T_2 = or(_lsu_io_ls_in_bits_waddr_T, _lsu_io_ls_in_bits_waddr_T_1) @[EXU.scala 135:52]
    node _lsu_io_ls_in_bits_waddr_T_3 = bits(EXE_reg_op, 44, 44) @[EXU.scala 135:78]
    node _lsu_io_ls_in_bits_waddr_T_4 = or(_lsu_io_ls_in_bits_waddr_T_2, _lsu_io_ls_in_bits_waddr_T_3) @[EXU.scala 135:67]
    node _lsu_io_ls_in_bits_waddr_T_5 = bits(EXE_reg_op, 45, 45) @[EXU.scala 135:93]
    node _lsu_io_ls_in_bits_waddr_T_6 = or(_lsu_io_ls_in_bits_waddr_T_4, _lsu_io_ls_in_bits_waddr_T_5) @[EXU.scala 135:82]
    node _lsu_io_ls_in_bits_waddr_T_7 = mux(_lsu_io_ls_in_bits_waddr_T_6, alu.io.result, UInt<1>("h0")) @[EXU.scala 135:37]
    lsu.io.ls.in.bits.waddr <= _lsu_io_ls_in_bits_waddr_T_7 @[EXU.scala 135:32]
    node _lsu_io_ls_in_bits_wdata_T = bits(EXE_reg_op, 42, 42) @[EXU.scala 136:48]
    node _lsu_io_ls_in_bits_wdata_T_1 = bits(EXE_reg_op, 43, 43) @[EXU.scala 136:63]
    node _lsu_io_ls_in_bits_wdata_T_2 = or(_lsu_io_ls_in_bits_wdata_T, _lsu_io_ls_in_bits_wdata_T_1) @[EXU.scala 136:52]
    node _lsu_io_ls_in_bits_wdata_T_3 = bits(EXE_reg_op, 44, 44) @[EXU.scala 136:78]
    node _lsu_io_ls_in_bits_wdata_T_4 = or(_lsu_io_ls_in_bits_wdata_T_2, _lsu_io_ls_in_bits_wdata_T_3) @[EXU.scala 136:67]
    node _lsu_io_ls_in_bits_wdata_T_5 = bits(EXE_reg_op, 45, 45) @[EXU.scala 136:93]
    node _lsu_io_ls_in_bits_wdata_T_6 = or(_lsu_io_ls_in_bits_wdata_T_4, _lsu_io_ls_in_bits_wdata_T_5) @[EXU.scala 136:82]
    node _lsu_io_ls_in_bits_wdata_T_7 = mux(_lsu_io_ls_in_bits_wdata_T_6, gpr_val_r2, UInt<1>("h0")) @[EXU.scala 136:37]
    lsu.io.ls.in.bits.wdata <= _lsu_io_ls_in_bits_wdata_T_7 @[EXU.scala 136:32]
    node _lsu_io_ls_in_bits_wmask_T = bits(EXE_reg_op, 42, 42) @[EXU.scala 137:48]
    node _lsu_io_ls_in_bits_wmask_T_1 = mux(UInt<1>("h0"), UInt<7>("h7f"), UInt<7>("h0")) @[Bitwise.scala 77:12]
    node _lsu_io_ls_in_bits_wmask_T_2 = cat(_lsu_io_ls_in_bits_wmask_T_1, UInt<1>("h1")) @[Cat.scala 33:92]
    node _lsu_io_ls_in_bits_wmask_T_3 = bits(EXE_reg_op, 43, 43) @[EXU.scala 138:46]
    node _lsu_io_ls_in_bits_wmask_T_4 = mux(UInt<1>("h0"), UInt<6>("h3f"), UInt<6>("h0")) @[Bitwise.scala 77:12]
    node _lsu_io_ls_in_bits_wmask_T_5 = mux(UInt<1>("h1"), UInt<2>("h3"), UInt<2>("h0")) @[Bitwise.scala 77:12]
    node _lsu_io_ls_in_bits_wmask_T_6 = cat(_lsu_io_ls_in_bits_wmask_T_4, _lsu_io_ls_in_bits_wmask_T_5) @[Cat.scala 33:92]
    node _lsu_io_ls_in_bits_wmask_T_7 = bits(EXE_reg_op, 44, 44) @[EXU.scala 139:46]
    node _lsu_io_ls_in_bits_wmask_T_8 = mux(UInt<1>("h0"), UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node _lsu_io_ls_in_bits_wmask_T_9 = mux(UInt<1>("h1"), UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 77:12]
    node _lsu_io_ls_in_bits_wmask_T_10 = cat(_lsu_io_ls_in_bits_wmask_T_8, _lsu_io_ls_in_bits_wmask_T_9) @[Cat.scala 33:92]
    node _lsu_io_ls_in_bits_wmask_T_11 = bits(EXE_reg_op, 45, 45) @[EXU.scala 140:46]
    node _lsu_io_ls_in_bits_wmask_T_12 = mux(UInt<1>("h1"), UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node _lsu_io_ls_in_bits_wmask_T_13 = mux(_lsu_io_ls_in_bits_wmask_T_11, _lsu_io_ls_in_bits_wmask_T_12, UInt<1>("h0")) @[EXU.scala 140:35]
    node _lsu_io_ls_in_bits_wmask_T_14 = mux(_lsu_io_ls_in_bits_wmask_T_7, _lsu_io_ls_in_bits_wmask_T_10, _lsu_io_ls_in_bits_wmask_T_13) @[EXU.scala 139:35]
    node _lsu_io_ls_in_bits_wmask_T_15 = mux(_lsu_io_ls_in_bits_wmask_T_3, _lsu_io_ls_in_bits_wmask_T_6, _lsu_io_ls_in_bits_wmask_T_14) @[EXU.scala 138:35]
    node _lsu_io_ls_in_bits_wmask_T_16 = mux(_lsu_io_ls_in_bits_wmask_T, _lsu_io_ls_in_bits_wmask_T_2, _lsu_io_ls_in_bits_wmask_T_15) @[EXU.scala 137:37]
    lsu.io.ls.in.bits.wmask <= _lsu_io_ls_in_bits_wmask_T_16 @[EXU.scala 137:32]
    lsu.io.lm.b <= io.lm.b @[EXU.scala 144:14]
    io.lm.w.bits <= lsu.io.lm.w.bits @[EXU.scala 144:14]
    io.lm.w.valid <= lsu.io.lm.w.valid @[EXU.scala 144:14]
    lsu.io.lm.w.ready <= io.lm.w.ready @[EXU.scala 144:14]
    io.lm.aw.bits <= lsu.io.lm.aw.bits @[EXU.scala 144:14]
    io.lm.aw.valid <= lsu.io.lm.aw.valid @[EXU.scala 144:14]
    lsu.io.lm.aw.ready <= io.lm.aw.ready @[EXU.scala 144:14]
    lsu.io.lm.r <= io.lm.r @[EXU.scala 144:14]
    io.lm.ar.bits <= lsu.io.lm.ar.bits @[EXU.scala 144:14]
    io.lm.ar.valid <= lsu.io.lm.ar.valid @[EXU.scala 144:14]
    lsu.io.lm.ar.ready <= io.lm.ar.ready @[EXU.scala 144:14]
    inst ebreak1 of ebreak @[EXU.scala 147:27]
    ebreak1.clk is invalid
    ebreak1.en_break is invalid
    node _ebreak1_io_en_break_T = bits(EXE_reg_op, 49, 49) @[EXU.scala 148:40]
    node _ebreak1_io_en_break_T_1 = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    node _ebreak1_io_en_break_T_2 = and(_ebreak1_io_en_break_T, _ebreak1_io_en_break_T_1) @[EXU.scala 148:44]
    ebreak1.en_break <= _ebreak1_io_en_break_T_2 @[EXU.scala 148:28]
    ebreak1.clk <= clock @[EXU.scala 149:23]
    node _io_gpr_en_r1_T = bits(EXE_reg_typ, 0, 0) @[EXU.scala 153:39]
    node _io_gpr_en_r1_T_1 = bits(EXE_reg_typ, 2, 2) @[EXU.scala 153:54]
    node _io_gpr_en_r1_T_2 = or(_io_gpr_en_r1_T, _io_gpr_en_r1_T_1) @[EXU.scala 153:42]
    node _io_gpr_en_r1_T_3 = bits(EXE_reg_typ, 4, 4) @[EXU.scala 153:69]
    node _io_gpr_en_r1_T_4 = or(_io_gpr_en_r1_T_2, _io_gpr_en_r1_T_3) @[EXU.scala 153:57]
    node _io_gpr_en_r1_T_5 = bits(EXE_reg_typ, 5, 5) @[EXU.scala 153:84]
    node _io_gpr_en_r1_T_6 = or(_io_gpr_en_r1_T_4, _io_gpr_en_r1_T_5) @[EXU.scala 153:72]
    node _io_gpr_en_r1_T_7 = mux(_io_gpr_en_r1_T_6, UInt<1>("h1"), UInt<1>("h0")) @[EXU.scala 153:26]
    io.gpr.en_r1 <= _io_gpr_en_r1_T_7 @[EXU.scala 153:21]
    node _io_gpr_en_r2_T = bits(EXE_reg_typ, 2, 2) @[EXU.scala 154:39]
    node _io_gpr_en_r2_T_1 = bits(EXE_reg_typ, 4, 4) @[EXU.scala 154:54]
    node _io_gpr_en_r2_T_2 = or(_io_gpr_en_r2_T, _io_gpr_en_r2_T_1) @[EXU.scala 154:42]
    node _io_gpr_en_r2_T_3 = bits(EXE_reg_typ, 5, 5) @[EXU.scala 154:69]
    node _io_gpr_en_r2_T_4 = or(_io_gpr_en_r2_T_2, _io_gpr_en_r2_T_3) @[EXU.scala 154:57]
    node _io_gpr_en_r2_T_5 = mux(_io_gpr_en_r2_T_4, UInt<1>("h1"), UInt<1>("h0")) @[EXU.scala 154:26]
    io.gpr.en_r2 <= _io_gpr_en_r2_T_5 @[EXU.scala 154:21]
    io.gpr.idx_r1 <= EXE_reg_rs1 @[EXU.scala 155:22]
    io.gpr.idx_r2 <= EXE_reg_rs2 @[EXU.scala 156:22]
    node _io_csr_en_r_T = bits(EXE_reg_op, 63, 63) @[EXU.scala 159:39]
    node _io_csr_en_r_T_1 = bits(EXE_reg_op, 64, 64) @[EXU.scala 159:54]
    node _io_csr_en_r_T_2 = or(_io_csr_en_r_T, _io_csr_en_r_T_1) @[EXU.scala 159:43]
    node _io_csr_en_r_T_3 = bits(EXE_reg_op, 65, 65) @[EXU.scala 159:69]
    node _io_csr_en_r_T_4 = or(_io_csr_en_r_T_2, _io_csr_en_r_T_3) @[EXU.scala 159:58]
    node _io_csr_en_r_T_5 = bits(EXE_reg_op, 66, 66) @[EXU.scala 159:84]
    node _io_csr_en_r_T_6 = or(_io_csr_en_r_T_4, _io_csr_en_r_T_5) @[EXU.scala 159:73]
    node _io_csr_en_r_T_7 = mux(_io_csr_en_r_T_6, UInt<1>("h1"), UInt<1>("h0")) @[EXU.scala 159:28]
    io.csr.en_r <= _io_csr_en_r_T_7 @[EXU.scala 159:20]
    node _io_csr_idx_r_T = bits(EXE_reg_op, 63, 63) @[EXU.scala 160:39]
    node _io_csr_idx_r_T_1 = bits(EXE_reg_op, 64, 64) @[EXU.scala 160:54]
    node _io_csr_idx_r_T_2 = or(_io_csr_idx_r_T, _io_csr_idx_r_T_1) @[EXU.scala 160:43]
    node _io_csr_idx_r_T_3 = bits(EXE_reg_op, 65, 65) @[EXU.scala 161:39]
    node _io_csr_idx_r_T_4 = bits(EXE_reg_op, 66, 66) @[EXU.scala 162:39]
    node _io_csr_idx_r_T_5 = mux(_io_csr_idx_r_T_4, UInt<10>("h341"), UInt<1>("h0")) @[EXU.scala 162:28]
    node _io_csr_idx_r_T_6 = mux(_io_csr_idx_r_T_3, UInt<10>("h305"), _io_csr_idx_r_T_5) @[EXU.scala 161:28]
    node _io_csr_idx_r_T_7 = mux(_io_csr_idx_r_T_2, src2, _io_csr_idx_r_T_6) @[EXU.scala 160:28]
    io.csr.idx_r <= _io_csr_idx_r_T_7 @[EXU.scala 160:21]
    alu.io.mul_sel <= io.mul_sel @[EXU.scala 168:23]
    node _alu_io_validin_T = eq(state, UInt<2>("h2")) @[EXU.scala 169:32]
    node _alu_io_validin_T_1 = or(op_mul, op_div) @[EXU.scala 169:59]
    node _alu_io_validin_T_2 = and(_alu_io_validin_T, _alu_io_validin_T_1) @[EXU.scala 169:49]
    node _alu_io_validin_T_3 = not(alu_finish) @[EXU.scala 169:71]
    node _alu_io_validin_T_4 = and(_alu_io_validin_T_2, _alu_io_validin_T_3) @[EXU.scala 169:69]
    node _alu_io_validin_T_5 = and(_alu_io_validin_T_4, alu_valid) @[EXU.scala 169:83]
    node _alu_io_validin_T_6 = and(_alu_io_validin_T_5, EXE_reg_valid) @[EXU.scala 169:93]
    alu.io.validin <= _alu_io_validin_T_6 @[EXU.scala 169:23]
    alu.io.flush <= flush @[EXU.scala 170:21]
    node _alu_io_src1_T = bits(EXE_reg_op, 13, 13) @[EXU.scala 171:39]
    node _alu_io_src1_T_1 = bits(EXE_reg_op, 21, 21) @[EXU.scala 171:54]
    node _alu_io_src1_T_2 = or(_alu_io_src1_T, _alu_io_src1_T_1) @[EXU.scala 171:43]
    node _alu_io_src1_T_3 = bits(EXE_reg_op, 23, 23) @[EXU.scala 171:69]
    node _alu_io_src1_T_4 = or(_alu_io_src1_T_2, _alu_io_src1_T_3) @[EXU.scala 171:58]
    node _alu_io_src1_T_5 = bits(EXE_reg_op, 56, 56) @[EXU.scala 171:84]
    node _alu_io_src1_T_6 = or(_alu_io_src1_T_4, _alu_io_src1_T_5) @[EXU.scala 171:73]
    node _alu_io_src1_T_7 = bits(EXE_reg_op, 58, 58) @[EXU.scala 171:99]
    node _alu_io_src1_T_8 = or(_alu_io_src1_T_6, _alu_io_src1_T_7) @[EXU.scala 171:88]
    node _alu_io_src1_T_9 = bits(EXE_reg_op, 60, 60) @[EXU.scala 171:114]
    node _alu_io_src1_T_10 = or(_alu_io_src1_T_8, _alu_io_src1_T_9) @[EXU.scala 171:103]
    node _alu_io_src1_T_11 = bits(EXE_reg_op, 62, 62) @[EXU.scala 171:129]
    node _alu_io_src1_T_12 = or(_alu_io_src1_T_10, _alu_io_src1_T_11) @[EXU.scala 171:118]
    node _alu_io_src1_T_13 = mux(UInt<1>("h0"), UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 77:12]
    node _alu_io_src1_T_14 = bits(src1, 31, 0) @[EXU.scala 171:155]
    node _alu_io_src1_T_15 = cat(_alu_io_src1_T_13, _alu_io_src1_T_14) @[Cat.scala 33:92]
    node _alu_io_src1_T_16 = bits(EXE_reg_op, 17, 17) @[EXU.scala 172:39]
    node _alu_io_src1_T_17 = bits(EXE_reg_op, 19, 19) @[EXU.scala 172:54]
    node _alu_io_src1_T_18 = or(_alu_io_src1_T_16, _alu_io_src1_T_17) @[EXU.scala 172:43]
    node _alu_io_src1_T_19 = bits(src1, 31, 31) @[EXU.scala 172:75]
    node _alu_io_src1_T_20 = bits(_alu_io_src1_T_19, 0, 0) @[Bitwise.scala 77:15]
    node _alu_io_src1_T_21 = mux(_alu_io_src1_T_20, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 77:12]
    node _alu_io_src1_T_22 = bits(src1, 31, 0) @[EXU.scala 172:85]
    node _alu_io_src1_T_23 = cat(_alu_io_src1_T_21, _alu_io_src1_T_22) @[Cat.scala 33:92]
    node _alu_io_src1_T_24 = bits(EXE_reg_op, 36, 36) @[EXU.scala 173:39]
    node _alu_io_src1_T_25 = bits(EXE_reg_op, 37, 37) @[EXU.scala 173:54]
    node _alu_io_src1_T_26 = or(_alu_io_src1_T_24, _alu_io_src1_T_25) @[EXU.scala 173:43]
    node _alu_io_src1_T_27 = mux(_alu_io_src1_T_26, EXE_reg_pc, src1) @[EXU.scala 173:28]
    node _alu_io_src1_T_28 = mux(_alu_io_src1_T_18, _alu_io_src1_T_23, _alu_io_src1_T_27) @[EXU.scala 172:28]
    node _alu_io_src1_T_29 = mux(_alu_io_src1_T_12, _alu_io_src1_T_15, _alu_io_src1_T_28) @[EXU.scala 171:28]
    alu.io.src1 <= _alu_io_src1_T_29 @[EXU.scala 171:20]
    node _alu_io_src2_T = bits(EXE_reg_op, 13, 13) @[EXU.scala 175:39]
    node _alu_io_src2_T_1 = bits(EXE_reg_op, 17, 17) @[EXU.scala 175:54]
    node _alu_io_src2_T_2 = or(_alu_io_src2_T, _alu_io_src2_T_1) @[EXU.scala 175:43]
    node _alu_io_src2_T_3 = bits(EXE_reg_op, 21, 21) @[EXU.scala 175:69]
    node _alu_io_src2_T_4 = or(_alu_io_src2_T_2, _alu_io_src2_T_3) @[EXU.scala 175:58]
    node _alu_io_src2_T_5 = mux(UInt<1>("h0"), UInt<59>("h7ffffffffffffff"), UInt<59>("h0")) @[Bitwise.scala 77:12]
    node _alu_io_src2_T_6 = bits(src2, 4, 0) @[EXU.scala 175:95]
    node _alu_io_src2_T_7 = cat(_alu_io_src2_T_5, _alu_io_src2_T_6) @[Cat.scala 33:92]
    node _alu_io_src2_T_8 = bits(EXE_reg_op, 25, 25) @[EXU.scala 176:39]
    node _alu_io_src2_T_9 = bits(EXE_reg_op, 36, 36) @[EXU.scala 177:39]
    node _alu_io_src2_T_10 = bits(EXE_reg_op, 37, 37) @[EXU.scala 177:54]
    node _alu_io_src2_T_11 = or(_alu_io_src2_T_9, _alu_io_src2_T_10) @[EXU.scala 177:43]
    node _alu_io_src2_T_12 = bits(EXE_reg_op, 42, 42) @[EXU.scala 178:39]
    node _alu_io_src2_T_13 = bits(EXE_reg_op, 43, 43) @[EXU.scala 178:54]
    node _alu_io_src2_T_14 = or(_alu_io_src2_T_12, _alu_io_src2_T_13) @[EXU.scala 178:43]
    node _alu_io_src2_T_15 = bits(EXE_reg_op, 44, 44) @[EXU.scala 178:69]
    node _alu_io_src2_T_16 = or(_alu_io_src2_T_14, _alu_io_src2_T_15) @[EXU.scala 178:58]
    node _alu_io_src2_T_17 = bits(EXE_reg_op, 45, 45) @[EXU.scala 178:84]
    node _alu_io_src2_T_18 = or(_alu_io_src2_T_16, _alu_io_src2_T_17) @[EXU.scala 178:73]
    node _alu_io_src2_T_19 = bits(EXE_reg_op, 56, 56) @[EXU.scala 179:39]
    node _alu_io_src2_T_20 = bits(EXE_reg_op, 58, 58) @[EXU.scala 179:54]
    node _alu_io_src2_T_21 = or(_alu_io_src2_T_19, _alu_io_src2_T_20) @[EXU.scala 179:43]
    node _alu_io_src2_T_22 = bits(EXE_reg_op, 60, 60) @[EXU.scala 179:69]
    node _alu_io_src2_T_23 = or(_alu_io_src2_T_21, _alu_io_src2_T_22) @[EXU.scala 179:58]
    node _alu_io_src2_T_24 = bits(EXE_reg_op, 62, 62) @[EXU.scala 179:84]
    node _alu_io_src2_T_25 = or(_alu_io_src2_T_23, _alu_io_src2_T_24) @[EXU.scala 179:73]
    node _alu_io_src2_T_26 = mux(UInt<1>("h0"), UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 77:12]
    node _alu_io_src2_T_27 = bits(src2, 31, 0) @[EXU.scala 179:110]
    node _alu_io_src2_T_28 = cat(_alu_io_src2_T_26, _alu_io_src2_T_27) @[Cat.scala 33:92]
    node _alu_io_src2_T_29 = bits(EXE_reg_op, 64, 64) @[EXU.scala 180:39]
    node _alu_io_src2_T_30 = mux(_alu_io_src2_T_29, io.csr.val_r, src2) @[EXU.scala 180:28]
    node _alu_io_src2_T_31 = mux(_alu_io_src2_T_25, _alu_io_src2_T_28, _alu_io_src2_T_30) @[EXU.scala 179:28]
    node _alu_io_src2_T_32 = mux(_alu_io_src2_T_18, dest, _alu_io_src2_T_31) @[EXU.scala 178:28]
    node _alu_io_src2_T_33 = mux(_alu_io_src2_T_11, UInt<3>("h4"), _alu_io_src2_T_32) @[EXU.scala 177:28]
    node _alu_io_src2_T_34 = mux(_alu_io_src2_T_8, EXE_reg_pc, _alu_io_src2_T_33) @[EXU.scala 176:28]
    node _alu_io_src2_T_35 = mux(_alu_io_src2_T_4, _alu_io_src2_T_7, _alu_io_src2_T_34) @[EXU.scala 175:28]
    alu.io.src2 <= _alu_io_src2_T_35 @[EXU.scala 175:20]
    node _alu_io_op_T = bits(EXE_reg_op, 0, 0) @[EXU.scala 182:39]
    node _alu_io_op_T_1 = bits(EXE_reg_op, 1, 1) @[EXU.scala 182:53]
    node _alu_io_op_T_2 = or(_alu_io_op_T, _alu_io_op_T_1) @[EXU.scala 182:42]
    node _alu_io_op_T_3 = bits(EXE_reg_op, 2, 2) @[EXU.scala 182:67]
    node _alu_io_op_T_4 = or(_alu_io_op_T_2, _alu_io_op_T_3) @[EXU.scala 182:56]
    node _alu_io_op_T_5 = bits(EXE_reg_op, 3, 3) @[EXU.scala 182:81]
    node _alu_io_op_T_6 = or(_alu_io_op_T_4, _alu_io_op_T_5) @[EXU.scala 182:70]
    node _alu_io_op_T_7 = bits(EXE_reg_op, 24, 24) @[EXU.scala 182:95]
    node _alu_io_op_T_8 = or(_alu_io_op_T_6, _alu_io_op_T_7) @[EXU.scala 182:84]
    node _alu_io_op_T_9 = bits(EXE_reg_op, 25, 25) @[EXU.scala 182:110]
    node _alu_io_op_T_10 = or(_alu_io_op_T_8, _alu_io_op_T_9) @[EXU.scala 182:99]
    node _alu_io_op_T_11 = bits(EXE_reg_op, 36, 36) @[EXU.scala 182:125]
    node _alu_io_op_T_12 = or(_alu_io_op_T_10, _alu_io_op_T_11) @[EXU.scala 182:114]
    node _alu_io_op_T_13 = bits(EXE_reg_op, 37, 37) @[EXU.scala 182:140]
    node _alu_io_op_T_14 = or(_alu_io_op_T_12, _alu_io_op_T_13) @[EXU.scala 182:129]
    node _alu_io_op_T_15 = bits(EXE_reg_op, 38, 38) @[EXU.scala 182:155]
    node _alu_io_op_T_16 = or(_alu_io_op_T_14, _alu_io_op_T_15) @[EXU.scala 182:144]
    node _alu_io_op_T_17 = bits(EXE_reg_op, 39, 39) @[EXU.scala 182:170]
    node _alu_io_op_T_18 = or(_alu_io_op_T_16, _alu_io_op_T_17) @[EXU.scala 182:159]
    node _alu_io_op_T_19 = bits(EXE_reg_op, 40, 40) @[EXU.scala 182:185]
    node _alu_io_op_T_20 = or(_alu_io_op_T_18, _alu_io_op_T_19) @[EXU.scala 182:174]
    node _alu_io_op_T_21 = bits(EXE_reg_op, 41, 41) @[EXU.scala 182:200]
    node _alu_io_op_T_22 = or(_alu_io_op_T_20, _alu_io_op_T_21) @[EXU.scala 182:189]
    node _alu_io_op_T_23 = bits(EXE_reg_op, 42, 42) @[EXU.scala 182:215]
    node _alu_io_op_T_24 = or(_alu_io_op_T_22, _alu_io_op_T_23) @[EXU.scala 182:204]
    node _alu_io_op_T_25 = bits(EXE_reg_op, 43, 43) @[EXU.scala 182:230]
    node _alu_io_op_T_26 = or(_alu_io_op_T_24, _alu_io_op_T_25) @[EXU.scala 182:219]
    node _alu_io_op_T_27 = bits(EXE_reg_op, 44, 44) @[EXU.scala 182:245]
    node _alu_io_op_T_28 = or(_alu_io_op_T_26, _alu_io_op_T_27) @[EXU.scala 182:234]
    node _alu_io_op_T_29 = bits(EXE_reg_op, 45, 45) @[EXU.scala 182:260]
    node _alu_io_op_T_30 = or(_alu_io_op_T_28, _alu_io_op_T_29) @[EXU.scala 182:249]
    node _alu_io_op_T_31 = bits(EXE_reg_op, 46, 46) @[EXU.scala 182:275]
    node _alu_io_op_T_32 = or(_alu_io_op_T_30, _alu_io_op_T_31) @[EXU.scala 182:264]
    node _alu_io_op_T_33 = bits(EXE_reg_op, 47, 47) @[EXU.scala 182:290]
    node _alu_io_op_T_34 = or(_alu_io_op_T_32, _alu_io_op_T_33) @[EXU.scala 182:279]
    node _alu_io_op_T_35 = bits(EXE_reg_op, 48, 48) @[EXU.scala 182:305]
    node _alu_io_op_T_36 = or(_alu_io_op_T_34, _alu_io_op_T_35) @[EXU.scala 182:294]
    node _alu_io_op_T_37 = bits(EXE_reg_op, 4, 4) @[EXU.scala 183:39]
    node _alu_io_op_T_38 = bits(EXE_reg_op, 5, 5) @[EXU.scala 183:53]
    node _alu_io_op_T_39 = or(_alu_io_op_T_37, _alu_io_op_T_38) @[EXU.scala 183:42]
    node _alu_io_op_T_40 = bits(EXE_reg_op, 6, 6) @[EXU.scala 184:39]
    node _alu_io_op_T_41 = bits(EXE_reg_op, 7, 7) @[EXU.scala 184:53]
    node _alu_io_op_T_42 = or(_alu_io_op_T_40, _alu_io_op_T_41) @[EXU.scala 184:42]
    node _alu_io_op_T_43 = bits(EXE_reg_op, 8, 8) @[EXU.scala 185:39]
    node _alu_io_op_T_44 = bits(EXE_reg_op, 9, 9) @[EXU.scala 185:53]
    node _alu_io_op_T_45 = or(_alu_io_op_T_43, _alu_io_op_T_44) @[EXU.scala 185:42]
    node _alu_io_op_T_46 = bits(EXE_reg_op, 64, 64) @[EXU.scala 185:67]
    node _alu_io_op_T_47 = or(_alu_io_op_T_45, _alu_io_op_T_46) @[EXU.scala 185:56]
    node _alu_io_op_T_48 = bits(EXE_reg_op, 10, 10) @[EXU.scala 186:39]
    node _alu_io_op_T_49 = bits(EXE_reg_op, 11, 11) @[EXU.scala 186:54]
    node _alu_io_op_T_50 = or(_alu_io_op_T_48, _alu_io_op_T_49) @[EXU.scala 186:43]
    node _alu_io_op_T_51 = bits(EXE_reg_op, 12, 12) @[EXU.scala 187:39]
    node _alu_io_op_T_52 = bits(EXE_reg_op, 13, 13) @[EXU.scala 187:54]
    node _alu_io_op_T_53 = or(_alu_io_op_T_51, _alu_io_op_T_52) @[EXU.scala 187:43]
    node _alu_io_op_T_54 = bits(EXE_reg_op, 14, 14) @[EXU.scala 187:69]
    node _alu_io_op_T_55 = or(_alu_io_op_T_53, _alu_io_op_T_54) @[EXU.scala 187:58]
    node _alu_io_op_T_56 = bits(EXE_reg_op, 15, 15) @[EXU.scala 187:84]
    node _alu_io_op_T_57 = or(_alu_io_op_T_55, _alu_io_op_T_56) @[EXU.scala 187:73]
    node _alu_io_op_T_58 = bits(EXE_reg_op, 20, 20) @[EXU.scala 188:39]
    node _alu_io_op_T_59 = bits(EXE_reg_op, 21, 21) @[EXU.scala 188:54]
    node _alu_io_op_T_60 = or(_alu_io_op_T_58, _alu_io_op_T_59) @[EXU.scala 188:43]
    node _alu_io_op_T_61 = bits(EXE_reg_op, 22, 22) @[EXU.scala 188:69]
    node _alu_io_op_T_62 = or(_alu_io_op_T_60, _alu_io_op_T_61) @[EXU.scala 188:58]
    node _alu_io_op_T_63 = bits(EXE_reg_op, 23, 23) @[EXU.scala 188:84]
    node _alu_io_op_T_64 = or(_alu_io_op_T_62, _alu_io_op_T_63) @[EXU.scala 188:73]
    node _alu_io_op_T_65 = bits(EXE_reg_op, 16, 16) @[EXU.scala 189:39]
    node _alu_io_op_T_66 = bits(EXE_reg_op, 17, 17) @[EXU.scala 189:54]
    node _alu_io_op_T_67 = or(_alu_io_op_T_65, _alu_io_op_T_66) @[EXU.scala 189:43]
    node _alu_io_op_T_68 = bits(EXE_reg_op, 18, 18) @[EXU.scala 189:69]
    node _alu_io_op_T_69 = or(_alu_io_op_T_67, _alu_io_op_T_68) @[EXU.scala 189:58]
    node _alu_io_op_T_70 = bits(EXE_reg_op, 19, 19) @[EXU.scala 189:84]
    node _alu_io_op_T_71 = or(_alu_io_op_T_69, _alu_io_op_T_70) @[EXU.scala 189:73]
    node _alu_io_op_T_72 = bits(EXE_reg_op, 26, 26) @[EXU.scala 190:39]
    node _alu_io_op_T_73 = bits(EXE_reg_op, 28, 28) @[EXU.scala 190:54]
    node _alu_io_op_T_74 = or(_alu_io_op_T_72, _alu_io_op_T_73) @[EXU.scala 190:43]
    node _alu_io_op_T_75 = bits(EXE_reg_op, 32, 32) @[EXU.scala 190:69]
    node _alu_io_op_T_76 = or(_alu_io_op_T_74, _alu_io_op_T_75) @[EXU.scala 190:58]
    node _alu_io_op_T_77 = bits(EXE_reg_op, 34, 34) @[EXU.scala 190:84]
    node _alu_io_op_T_78 = or(_alu_io_op_T_76, _alu_io_op_T_77) @[EXU.scala 190:73]
    node _alu_io_op_T_79 = bits(EXE_reg_op, 27, 27) @[EXU.scala 191:39]
    node _alu_io_op_T_80 = bits(EXE_reg_op, 29, 29) @[EXU.scala 191:54]
    node _alu_io_op_T_81 = or(_alu_io_op_T_79, _alu_io_op_T_80) @[EXU.scala 191:43]
    node _alu_io_op_T_82 = bits(EXE_reg_op, 33, 33) @[EXU.scala 191:69]
    node _alu_io_op_T_83 = or(_alu_io_op_T_81, _alu_io_op_T_82) @[EXU.scala 191:58]
    node _alu_io_op_T_84 = bits(EXE_reg_op, 35, 35) @[EXU.scala 191:84]
    node _alu_io_op_T_85 = or(_alu_io_op_T_83, _alu_io_op_T_84) @[EXU.scala 191:73]
    node _alu_io_op_T_86 = bits(EXE_reg_op, 30, 30) @[EXU.scala 192:39]
    node _alu_io_op_T_87 = bits(EXE_reg_op, 31, 31) @[EXU.scala 192:54]
    node _alu_io_op_T_88 = or(_alu_io_op_T_86, _alu_io_op_T_87) @[EXU.scala 192:43]
    node _alu_io_op_T_89 = bits(EXE_reg_op, 50, 50) @[EXU.scala 193:39]
    node _alu_io_op_T_90 = bits(EXE_reg_op, 51, 51) @[EXU.scala 193:54]
    node _alu_io_op_T_91 = or(_alu_io_op_T_89, _alu_io_op_T_90) @[EXU.scala 193:43]
    node _alu_io_op_T_92 = bits(EXE_reg_op, 53, 53) @[EXU.scala 193:69]
    node _alu_io_op_T_93 = or(_alu_io_op_T_91, _alu_io_op_T_92) @[EXU.scala 193:58]
    node _alu_io_op_T_94 = bits(EXE_reg_op, 52, 52) @[EXU.scala 194:39]
    node _alu_io_op_T_95 = bits(EXE_reg_op, 54, 54) @[EXU.scala 195:39]
    node _alu_io_op_T_96 = bits(EXE_reg_op, 55, 55) @[EXU.scala 196:39]
    node _alu_io_op_T_97 = bits(EXE_reg_op, 56, 56) @[EXU.scala 196:54]
    node _alu_io_op_T_98 = or(_alu_io_op_T_96, _alu_io_op_T_97) @[EXU.scala 196:43]
    node _alu_io_op_T_99 = bits(EXE_reg_op, 57, 57) @[EXU.scala 197:39]
    node _alu_io_op_T_100 = bits(EXE_reg_op, 58, 58) @[EXU.scala 197:54]
    node _alu_io_op_T_101 = or(_alu_io_op_T_99, _alu_io_op_T_100) @[EXU.scala 197:43]
    node _alu_io_op_T_102 = bits(EXE_reg_op, 59, 59) @[EXU.scala 198:39]
    node _alu_io_op_T_103 = bits(EXE_reg_op, 60, 60) @[EXU.scala 198:54]
    node _alu_io_op_T_104 = or(_alu_io_op_T_102, _alu_io_op_T_103) @[EXU.scala 198:43]
    node _alu_io_op_T_105 = bits(EXE_reg_op, 61, 61) @[EXU.scala 199:39]
    node _alu_io_op_T_106 = bits(EXE_reg_op, 62, 62) @[EXU.scala 199:54]
    node _alu_io_op_T_107 = or(_alu_io_op_T_105, _alu_io_op_T_106) @[EXU.scala 199:43]
    node _alu_io_op_T_108 = mux(_alu_io_op_T_107, UInt<19>("h40000"), UInt<1>("h0")) @[EXU.scala 199:28]
    node _alu_io_op_T_109 = mux(_alu_io_op_T_104, UInt<18>("h20000"), _alu_io_op_T_108) @[EXU.scala 198:28]
    node _alu_io_op_T_110 = mux(_alu_io_op_T_101, UInt<17>("h10000"), _alu_io_op_T_109) @[EXU.scala 197:28]
    node _alu_io_op_T_111 = mux(_alu_io_op_T_98, UInt<16>("h8000"), _alu_io_op_T_110) @[EXU.scala 196:28]
    node _alu_io_op_T_112 = mux(_alu_io_op_T_95, UInt<15>("h4000"), _alu_io_op_T_111) @[EXU.scala 195:28]
    node _alu_io_op_T_113 = mux(_alu_io_op_T_94, UInt<14>("h2000"), _alu_io_op_T_112) @[EXU.scala 194:28]
    node _alu_io_op_T_114 = mux(_alu_io_op_T_93, UInt<13>("h1000"), _alu_io_op_T_113) @[EXU.scala 193:28]
    node _alu_io_op_T_115 = mux(_alu_io_op_T_88, UInt<12>("h800"), _alu_io_op_T_114) @[EXU.scala 192:28]
    node _alu_io_op_T_116 = mux(_alu_io_op_T_85, UInt<10>("h200"), _alu_io_op_T_115) @[EXU.scala 191:28]
    node _alu_io_op_T_117 = mux(_alu_io_op_T_78, UInt<9>("h100"), _alu_io_op_T_116) @[EXU.scala 190:28]
    node _alu_io_op_T_118 = mux(_alu_io_op_T_71, UInt<8>("h80"), _alu_io_op_T_117) @[EXU.scala 189:28]
    node _alu_io_op_T_119 = mux(_alu_io_op_T_64, UInt<7>("h40"), _alu_io_op_T_118) @[EXU.scala 188:28]
    node _alu_io_op_T_120 = mux(_alu_io_op_T_57, UInt<6>("h20"), _alu_io_op_T_119) @[EXU.scala 187:28]
    node _alu_io_op_T_121 = mux(_alu_io_op_T_50, UInt<5>("h10"), _alu_io_op_T_120) @[EXU.scala 186:28]
    node _alu_io_op_T_122 = mux(_alu_io_op_T_47, UInt<4>("h8"), _alu_io_op_T_121) @[EXU.scala 185:28]
    node _alu_io_op_T_123 = mux(_alu_io_op_T_42, UInt<3>("h4"), _alu_io_op_T_122) @[EXU.scala 184:28]
    node _alu_io_op_T_124 = mux(_alu_io_op_T_39, UInt<2>("h2"), _alu_io_op_T_123) @[EXU.scala 183:28]
    node _alu_io_op_T_125 = mux(_alu_io_op_T_36, UInt<1>("h1"), _alu_io_op_T_124) @[EXU.scala 182:28]
    alu.io.op <= _alu_io_op_T_125 @[EXU.scala 182:20]
    wire next_pc_src1 : UInt<64> @[EXU.scala 204:30]
    wire next_pc_src2 : UInt<64> @[EXU.scala 205:30]
    wire next_pc_sum : UInt<64> @[EXU.scala 206:30]
    node _next_pc_src1_T = bits(EXE_reg_op, 37, 37) @[EXU.scala 207:37]
    node _next_pc_src1_T_1 = mux(_next_pc_src1_T, src1, EXE_reg_pc) @[EXU.scala 207:26]
    next_pc_src1 <= _next_pc_src1_T_1 @[EXU.scala 207:21]
    node _next_pc_src2_T = bits(EXE_reg_op, 30, 30) @[EXU.scala 208:37]
    node _next_pc_src2_T_1 = bits(alu.io.result, 0, 0) @[EXU.scala 208:55]
    node _next_pc_src2_T_2 = and(_next_pc_src2_T, _next_pc_src2_T_1) @[EXU.scala 208:41]
    node _next_pc_src2_T_3 = bits(EXE_reg_op, 31, 31) @[EXU.scala 209:37]
    node _next_pc_src2_T_4 = bits(alu.io.result, 0, 0) @[EXU.scala 209:57]
    node _next_pc_src2_T_5 = not(_next_pc_src2_T_4) @[EXU.scala 209:43]
    node _next_pc_src2_T_6 = and(_next_pc_src2_T_3, _next_pc_src2_T_5) @[EXU.scala 209:41]
    node _next_pc_src2_T_7 = bits(EXE_reg_op, 32, 32) @[EXU.scala 210:37]
    node _next_pc_src2_T_8 = bits(alu.io.result, 0, 0) @[EXU.scala 210:57]
    node _next_pc_src2_T_9 = not(_next_pc_src2_T_8) @[EXU.scala 210:43]
    node _next_pc_src2_T_10 = and(_next_pc_src2_T_7, _next_pc_src2_T_9) @[EXU.scala 210:41]
    node _next_pc_src2_T_11 = bits(EXE_reg_op, 33, 33) @[EXU.scala 211:37]
    node _next_pc_src2_T_12 = bits(alu.io.result, 0, 0) @[EXU.scala 211:57]
    node _next_pc_src2_T_13 = not(_next_pc_src2_T_12) @[EXU.scala 211:43]
    node _next_pc_src2_T_14 = and(_next_pc_src2_T_11, _next_pc_src2_T_13) @[EXU.scala 211:41]
    node _next_pc_src2_T_15 = bits(EXE_reg_op, 34, 34) @[EXU.scala 212:37]
    node _next_pc_src2_T_16 = bits(alu.io.result, 0, 0) @[EXU.scala 212:55]
    node _next_pc_src2_T_17 = and(_next_pc_src2_T_15, _next_pc_src2_T_16) @[EXU.scala 212:41]
    node _next_pc_src2_T_18 = bits(EXE_reg_op, 35, 35) @[EXU.scala 213:37]
    node _next_pc_src2_T_19 = bits(alu.io.result, 0, 0) @[EXU.scala 213:55]
    node _next_pc_src2_T_20 = and(_next_pc_src2_T_18, _next_pc_src2_T_19) @[EXU.scala 213:41]
    node _next_pc_src2_T_21 = bits(EXE_reg_op, 36, 36) @[EXU.scala 214:37]
    node _next_pc_src2_T_22 = bits(EXE_reg_op, 37, 37) @[EXU.scala 215:37]
    node _next_pc_src2_T_23 = mux(_next_pc_src2_T_22, src2, UInt<3>("h4")) @[EXU.scala 215:26]
    node _next_pc_src2_T_24 = mux(_next_pc_src2_T_21, src1, _next_pc_src2_T_23) @[EXU.scala 214:26]
    node _next_pc_src2_T_25 = mux(_next_pc_src2_T_20, dest, _next_pc_src2_T_24) @[EXU.scala 213:26]
    node _next_pc_src2_T_26 = mux(_next_pc_src2_T_17, dest, _next_pc_src2_T_25) @[EXU.scala 212:26]
    node _next_pc_src2_T_27 = mux(_next_pc_src2_T_14, dest, _next_pc_src2_T_26) @[EXU.scala 211:26]
    node _next_pc_src2_T_28 = mux(_next_pc_src2_T_10, dest, _next_pc_src2_T_27) @[EXU.scala 210:26]
    node _next_pc_src2_T_29 = mux(_next_pc_src2_T_6, dest, _next_pc_src2_T_28) @[EXU.scala 209:26]
    node _next_pc_src2_T_30 = mux(_next_pc_src2_T_2, dest, _next_pc_src2_T_29) @[EXU.scala 208:26]
    next_pc_src2 <= _next_pc_src2_T_30 @[EXU.scala 208:21]
    node _next_pc_sum_T = add(next_pc_src1, next_pc_src2) @[EXU.scala 217:34]
    node _next_pc_sum_T_1 = tail(_next_pc_sum_T, 1) @[EXU.scala 217:34]
    next_pc_sum <= _next_pc_sum_T_1 @[EXU.scala 217:20]
    node _io_out_bits_gpr_en_w_T = bits(flush, 0, 0) @[EXU.scala 222:41]
    node _io_out_bits_gpr_en_w_T_1 = bits(EXE_reg_typ, 0, 0) @[EXU.scala 222:68]
    node _io_out_bits_gpr_en_w_T_2 = bits(EXE_reg_typ, 1, 1) @[EXU.scala 222:83]
    node _io_out_bits_gpr_en_w_T_3 = or(_io_out_bits_gpr_en_w_T_1, _io_out_bits_gpr_en_w_T_2) @[EXU.scala 222:71]
    node _io_out_bits_gpr_en_w_T_4 = bits(EXE_reg_typ, 3, 3) @[EXU.scala 222:98]
    node _io_out_bits_gpr_en_w_T_5 = or(_io_out_bits_gpr_en_w_T_3, _io_out_bits_gpr_en_w_T_4) @[EXU.scala 222:86]
    node _io_out_bits_gpr_en_w_T_6 = bits(EXE_reg_typ, 5, 5) @[EXU.scala 222:113]
    node _io_out_bits_gpr_en_w_T_7 = or(_io_out_bits_gpr_en_w_T_5, _io_out_bits_gpr_en_w_T_6) @[EXU.scala 222:101]
    node _io_out_bits_gpr_en_w_T_8 = mux(_io_out_bits_gpr_en_w_T_7, UInt<1>("h1"), UInt<1>("h0")) @[EXU.scala 222:55]
    node _io_out_bits_gpr_en_w_T_9 = mux(_io_out_bits_gpr_en_w_T, UInt<1>("h0"), _io_out_bits_gpr_en_w_T_8) @[EXU.scala 222:34]
    io.out.bits.gpr.en_w <= _io_out_bits_gpr_en_w_T_9 @[EXU.scala 222:29]
    io.out.bits.gpr.idx_w <= dest @[EXU.scala 223:30]
    node _io_out_bits_csr_en_w_T = bits(EXE_reg_op, 63, 63) @[EXU.scala 225:46]
    node _io_out_bits_csr_en_w_T_1 = mux(_io_out_bits_csr_en_w_T, UInt<1>("h1"), UInt<1>("h0")) @[EXU.scala 225:34]
    io.out.bits.csr.en_w <= _io_out_bits_csr_en_w_T_1 @[EXU.scala 225:29]
    node _io_out_bits_csr_idx_w_T = bits(EXE_reg_op, 63, 63) @[EXU.scala 226:46]
    node _io_out_bits_csr_idx_w_T_1 = bits(EXE_reg_op, 64, 64) @[EXU.scala 226:61]
    node _io_out_bits_csr_idx_w_T_2 = or(_io_out_bits_csr_idx_w_T, _io_out_bits_csr_idx_w_T_1) @[EXU.scala 226:50]
    node _io_out_bits_csr_idx_w_T_3 = mux(_io_out_bits_csr_idx_w_T_2, src2, UInt<1>("h0")) @[EXU.scala 226:35]
    io.out.bits.csr.idx_w <= _io_out_bits_csr_idx_w_T_3 @[EXU.scala 226:30]
    node _io_out_bits_csr_no_T = bits(flush, 0, 0) @[EXU.scala 227:39]
    node _io_out_bits_csr_no_T_1 = bits(EXE_reg_op, 65, 65) @[EXU.scala 228:43]
    node _io_out_bits_csr_no_T_2 = bits(EXE_reg_op, 66, 66) @[EXU.scala 229:43]
    node _io_out_bits_csr_no_T_3 = mux(_io_out_bits_csr_no_T_2, UInt<2>("h2"), UInt<1>("h0")) @[EXU.scala 229:32]
    node _io_out_bits_csr_no_T_4 = mux(_io_out_bits_csr_no_T_1, UInt<1>("h1"), _io_out_bits_csr_no_T_3) @[EXU.scala 228:32]
    node _io_out_bits_csr_no_T_5 = mux(_io_out_bits_csr_no_T, UInt<2>("h3"), _io_out_bits_csr_no_T_4) @[EXU.scala 227:32]
    io.out.bits.csr.no <= _io_out_bits_csr_no_T_5 @[EXU.scala 227:27]
    io.out.bits.csr.epc <= EXE_reg_pc @[EXU.scala 231:28]
    node _io_out_bits_gpr_val_w_T = bits(EXE_reg_op, 1, 1) @[EXU.scala 233:37]
    node _io_out_bits_gpr_val_w_T_1 = bits(EXE_reg_op, 3, 3) @[EXU.scala 233:51]
    node _io_out_bits_gpr_val_w_T_2 = or(_io_out_bits_gpr_val_w_T, _io_out_bits_gpr_val_w_T_1) @[EXU.scala 233:40]
    node _io_out_bits_gpr_val_w_T_3 = bits(EXE_reg_op, 5, 5) @[EXU.scala 233:65]
    node _io_out_bits_gpr_val_w_T_4 = or(_io_out_bits_gpr_val_w_T_2, _io_out_bits_gpr_val_w_T_3) @[EXU.scala 233:54]
    node _io_out_bits_gpr_val_w_T_5 = bits(EXE_reg_op, 13, 13) @[EXU.scala 233:79]
    node _io_out_bits_gpr_val_w_T_6 = or(_io_out_bits_gpr_val_w_T_4, _io_out_bits_gpr_val_w_T_5) @[EXU.scala 233:68]
    node _io_out_bits_gpr_val_w_T_7 = bits(EXE_reg_op, 15, 15) @[EXU.scala 233:94]
    node _io_out_bits_gpr_val_w_T_8 = or(_io_out_bits_gpr_val_w_T_6, _io_out_bits_gpr_val_w_T_7) @[EXU.scala 233:83]
    node _io_out_bits_gpr_val_w_T_9 = bits(EXE_reg_op, 17, 17) @[EXU.scala 233:109]
    node _io_out_bits_gpr_val_w_T_10 = or(_io_out_bits_gpr_val_w_T_8, _io_out_bits_gpr_val_w_T_9) @[EXU.scala 233:98]
    node _io_out_bits_gpr_val_w_T_11 = bits(EXE_reg_op, 21, 21) @[EXU.scala 233:124]
    node _io_out_bits_gpr_val_w_T_12 = or(_io_out_bits_gpr_val_w_T_10, _io_out_bits_gpr_val_w_T_11) @[EXU.scala 233:113]
    node _io_out_bits_gpr_val_w_T_13 = bits(EXE_reg_op, 23, 23) @[EXU.scala 233:139]
    node _io_out_bits_gpr_val_w_T_14 = or(_io_out_bits_gpr_val_w_T_12, _io_out_bits_gpr_val_w_T_13) @[EXU.scala 233:128]
    node _io_out_bits_gpr_val_w_T_15 = bits(alu.io.result, 31, 31) @[EXU.scala 233:169]
    node _io_out_bits_gpr_val_w_T_16 = bits(_io_out_bits_gpr_val_w_T_15, 0, 0) @[Bitwise.scala 77:15]
    node _io_out_bits_gpr_val_w_T_17 = mux(_io_out_bits_gpr_val_w_T_16, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 77:12]
    node _io_out_bits_gpr_val_w_T_18 = bits(alu.io.result, 31, 0) @[EXU.scala 233:188]
    node _io_out_bits_gpr_val_w_T_19 = cat(_io_out_bits_gpr_val_w_T_17, _io_out_bits_gpr_val_w_T_18) @[Cat.scala 33:92]
    node _io_out_bits_gpr_val_w_T_20 = bits(EXE_reg_op, 51, 51) @[EXU.scala 234:37]
    node _io_out_bits_gpr_val_w_T_21 = bits(EXE_reg_op, 56, 56) @[EXU.scala 234:52]
    node _io_out_bits_gpr_val_w_T_22 = or(_io_out_bits_gpr_val_w_T_20, _io_out_bits_gpr_val_w_T_21) @[EXU.scala 234:41]
    node _io_out_bits_gpr_val_w_T_23 = bits(EXE_reg_op, 60, 60) @[EXU.scala 234:67]
    node _io_out_bits_gpr_val_w_T_24 = or(_io_out_bits_gpr_val_w_T_22, _io_out_bits_gpr_val_w_T_23) @[EXU.scala 234:56]
    node _io_out_bits_gpr_val_w_T_25 = bits(EXE_reg_op, 62, 62) @[EXU.scala 234:82]
    node _io_out_bits_gpr_val_w_T_26 = or(_io_out_bits_gpr_val_w_T_24, _io_out_bits_gpr_val_w_T_25) @[EXU.scala 234:71]
    node _io_out_bits_gpr_val_w_T_27 = bits(alu_result, 31, 31) @[EXU.scala 234:109]
    node _io_out_bits_gpr_val_w_T_28 = bits(_io_out_bits_gpr_val_w_T_27, 0, 0) @[Bitwise.scala 77:15]
    node _io_out_bits_gpr_val_w_T_29 = mux(_io_out_bits_gpr_val_w_T_28, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 77:12]
    node _io_out_bits_gpr_val_w_T_30 = bits(alu_result, 31, 0) @[EXU.scala 234:125]
    node _io_out_bits_gpr_val_w_T_31 = cat(_io_out_bits_gpr_val_w_T_29, _io_out_bits_gpr_val_w_T_30) @[Cat.scala 33:92]
    node _io_out_bits_gpr_val_w_T_32 = bits(EXE_reg_op, 52, 52) @[EXU.scala 235:37]
    node _io_out_bits_gpr_val_w_T_33 = bits(EXE_reg_op, 53, 53) @[EXU.scala 235:52]
    node _io_out_bits_gpr_val_w_T_34 = or(_io_out_bits_gpr_val_w_T_32, _io_out_bits_gpr_val_w_T_33) @[EXU.scala 235:41]
    node _io_out_bits_gpr_val_w_T_35 = bits(EXE_reg_op, 54, 54) @[EXU.scala 235:67]
    node _io_out_bits_gpr_val_w_T_36 = or(_io_out_bits_gpr_val_w_T_34, _io_out_bits_gpr_val_w_T_35) @[EXU.scala 235:56]
    node _io_out_bits_gpr_val_w_T_37 = mux(UInt<1>("h0"), UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 77:12]
    node _io_out_bits_gpr_val_w_T_38 = bits(alu_result, 63, 32) @[EXU.scala 235:99]
    node _io_out_bits_gpr_val_w_T_39 = cat(_io_out_bits_gpr_val_w_T_37, _io_out_bits_gpr_val_w_T_38) @[Cat.scala 33:92]
    node _io_out_bits_gpr_val_w_T_40 = bits(EXE_reg_op, 63, 63) @[EXU.scala 236:37]
    node _io_out_bits_gpr_val_w_T_41 = bits(EXE_reg_op, 64, 64) @[EXU.scala 236:52]
    node _io_out_bits_gpr_val_w_T_42 = or(_io_out_bits_gpr_val_w_T_40, _io_out_bits_gpr_val_w_T_41) @[EXU.scala 236:41]
    node _io_out_bits_gpr_val_w_T_43 = bits(EXE_reg_op, 38, 38) @[EXU.scala 237:37]
    node _io_out_bits_gpr_val_w_T_44 = bits(lsu.io.ls.out.bits.rdata, 7, 7) @[EXU.scala 237:78]
    node _io_out_bits_gpr_val_w_T_45 = bits(_io_out_bits_gpr_val_w_T_44, 0, 0) @[Bitwise.scala 77:15]
    node _io_out_bits_gpr_val_w_T_46 = mux(_io_out_bits_gpr_val_w_T_45, UInt<56>("hffffffffffffff"), UInt<56>("h0")) @[Bitwise.scala 77:12]
    node _io_out_bits_gpr_val_w_T_47 = bits(lsu.io.ls.out.bits.rdata, 7, 0) @[EXU.scala 237:107]
    node _io_out_bits_gpr_val_w_T_48 = cat(_io_out_bits_gpr_val_w_T_46, _io_out_bits_gpr_val_w_T_47) @[Cat.scala 33:92]
    node _io_out_bits_gpr_val_w_T_49 = bits(EXE_reg_op, 39, 39) @[EXU.scala 238:37]
    node _io_out_bits_gpr_val_w_T_50 = bits(lsu.io.ls.out.bits.rdata, 15, 15) @[EXU.scala 238:78]
    node _io_out_bits_gpr_val_w_T_51 = bits(_io_out_bits_gpr_val_w_T_50, 0, 0) @[Bitwise.scala 77:15]
    node _io_out_bits_gpr_val_w_T_52 = mux(_io_out_bits_gpr_val_w_T_51, UInt<48>("hffffffffffff"), UInt<48>("h0")) @[Bitwise.scala 77:12]
    node _io_out_bits_gpr_val_w_T_53 = bits(lsu.io.ls.out.bits.rdata, 15, 0) @[EXU.scala 238:108]
    node _io_out_bits_gpr_val_w_T_54 = cat(_io_out_bits_gpr_val_w_T_52, _io_out_bits_gpr_val_w_T_53) @[Cat.scala 33:92]
    node _io_out_bits_gpr_val_w_T_55 = bits(EXE_reg_op, 40, 40) @[EXU.scala 239:37]
    node _io_out_bits_gpr_val_w_T_56 = bits(lsu.io.ls.out.bits.rdata, 31, 31) @[EXU.scala 239:78]
    node _io_out_bits_gpr_val_w_T_57 = bits(_io_out_bits_gpr_val_w_T_56, 0, 0) @[Bitwise.scala 77:15]
    node _io_out_bits_gpr_val_w_T_58 = mux(_io_out_bits_gpr_val_w_T_57, UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 77:12]
    node _io_out_bits_gpr_val_w_T_59 = bits(lsu.io.ls.out.bits.rdata, 31, 0) @[EXU.scala 239:108]
    node _io_out_bits_gpr_val_w_T_60 = cat(_io_out_bits_gpr_val_w_T_58, _io_out_bits_gpr_val_w_T_59) @[Cat.scala 33:92]
    node _io_out_bits_gpr_val_w_T_61 = bits(EXE_reg_op, 41, 41) @[EXU.scala 240:37]
    node _io_out_bits_gpr_val_w_T_62 = bits(EXE_reg_op, 46, 46) @[EXU.scala 241:37]
    node _io_out_bits_gpr_val_w_T_63 = mux(UInt<1>("h0"), UInt<56>("hffffffffffffff"), UInt<56>("h0")) @[Bitwise.scala 77:12]
    node _io_out_bits_gpr_val_w_T_64 = bits(lsu.io.ls.out.bits.rdata, 7, 0) @[EXU.scala 241:83]
    node _io_out_bits_gpr_val_w_T_65 = cat(_io_out_bits_gpr_val_w_T_63, _io_out_bits_gpr_val_w_T_64) @[Cat.scala 33:92]
    node _io_out_bits_gpr_val_w_T_66 = bits(EXE_reg_op, 47, 47) @[EXU.scala 242:37]
    node _io_out_bits_gpr_val_w_T_67 = mux(UInt<1>("h0"), UInt<48>("hffffffffffff"), UInt<48>("h0")) @[Bitwise.scala 77:12]
    node _io_out_bits_gpr_val_w_T_68 = bits(lsu.io.ls.out.bits.rdata, 15, 0) @[EXU.scala 242:83]
    node _io_out_bits_gpr_val_w_T_69 = cat(_io_out_bits_gpr_val_w_T_67, _io_out_bits_gpr_val_w_T_68) @[Cat.scala 33:92]
    node _io_out_bits_gpr_val_w_T_70 = bits(EXE_reg_op, 48, 48) @[EXU.scala 243:37]
    node _io_out_bits_gpr_val_w_T_71 = mux(UInt<1>("h0"), UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 77:12]
    node _io_out_bits_gpr_val_w_T_72 = bits(lsu.io.ls.out.bits.rdata, 31, 0) @[EXU.scala 243:83]
    node _io_out_bits_gpr_val_w_T_73 = cat(_io_out_bits_gpr_val_w_T_71, _io_out_bits_gpr_val_w_T_72) @[Cat.scala 33:92]
    node _io_out_bits_gpr_val_w_T_74 = bits(EXE_reg_op, 50, 50) @[EXU.scala 244:37]
    node _io_out_bits_gpr_val_w_T_75 = bits(EXE_reg_op, 55, 55) @[EXU.scala 244:52]
    node _io_out_bits_gpr_val_w_T_76 = or(_io_out_bits_gpr_val_w_T_74, _io_out_bits_gpr_val_w_T_75) @[EXU.scala 244:41]
    node _io_out_bits_gpr_val_w_T_77 = bits(EXE_reg_op, 57, 57) @[EXU.scala 244:67]
    node _io_out_bits_gpr_val_w_T_78 = or(_io_out_bits_gpr_val_w_T_76, _io_out_bits_gpr_val_w_T_77) @[EXU.scala 244:56]
    node _io_out_bits_gpr_val_w_T_79 = bits(EXE_reg_op, 58, 58) @[EXU.scala 244:82]
    node _io_out_bits_gpr_val_w_T_80 = or(_io_out_bits_gpr_val_w_T_78, _io_out_bits_gpr_val_w_T_79) @[EXU.scala 244:71]
    node _io_out_bits_gpr_val_w_T_81 = bits(EXE_reg_op, 59, 59) @[EXU.scala 244:97]
    node _io_out_bits_gpr_val_w_T_82 = or(_io_out_bits_gpr_val_w_T_80, _io_out_bits_gpr_val_w_T_81) @[EXU.scala 244:86]
    node _io_out_bits_gpr_val_w_T_83 = bits(EXE_reg_op, 61, 61) @[EXU.scala 244:112]
    node _io_out_bits_gpr_val_w_T_84 = or(_io_out_bits_gpr_val_w_T_82, _io_out_bits_gpr_val_w_T_83) @[EXU.scala 244:101]
    node _io_out_bits_gpr_val_w_T_85 = mux(_io_out_bits_gpr_val_w_T_84, alu_result, alu.io.result) @[EXU.scala 244:26]
    node _io_out_bits_gpr_val_w_T_86 = mux(_io_out_bits_gpr_val_w_T_70, _io_out_bits_gpr_val_w_T_73, _io_out_bits_gpr_val_w_T_85) @[EXU.scala 243:26]
    node _io_out_bits_gpr_val_w_T_87 = mux(_io_out_bits_gpr_val_w_T_66, _io_out_bits_gpr_val_w_T_69, _io_out_bits_gpr_val_w_T_86) @[EXU.scala 242:26]
    node _io_out_bits_gpr_val_w_T_88 = mux(_io_out_bits_gpr_val_w_T_62, _io_out_bits_gpr_val_w_T_65, _io_out_bits_gpr_val_w_T_87) @[EXU.scala 241:26]
    node _io_out_bits_gpr_val_w_T_89 = mux(_io_out_bits_gpr_val_w_T_61, lsu.io.ls.out.bits.rdata, _io_out_bits_gpr_val_w_T_88) @[EXU.scala 240:26]
    node _io_out_bits_gpr_val_w_T_90 = mux(_io_out_bits_gpr_val_w_T_55, _io_out_bits_gpr_val_w_T_60, _io_out_bits_gpr_val_w_T_89) @[EXU.scala 239:26]
    node _io_out_bits_gpr_val_w_T_91 = mux(_io_out_bits_gpr_val_w_T_49, _io_out_bits_gpr_val_w_T_54, _io_out_bits_gpr_val_w_T_90) @[EXU.scala 238:26]
    node _io_out_bits_gpr_val_w_T_92 = mux(_io_out_bits_gpr_val_w_T_43, _io_out_bits_gpr_val_w_T_48, _io_out_bits_gpr_val_w_T_91) @[EXU.scala 237:26]
    node _io_out_bits_gpr_val_w_T_93 = mux(_io_out_bits_gpr_val_w_T_42, io.csr.val_r, _io_out_bits_gpr_val_w_T_92) @[EXU.scala 236:26]
    node _io_out_bits_gpr_val_w_T_94 = mux(_io_out_bits_gpr_val_w_T_36, _io_out_bits_gpr_val_w_T_39, _io_out_bits_gpr_val_w_T_93) @[EXU.scala 235:26]
    node _io_out_bits_gpr_val_w_T_95 = mux(_io_out_bits_gpr_val_w_T_26, _io_out_bits_gpr_val_w_T_31, _io_out_bits_gpr_val_w_T_94) @[EXU.scala 234:26]
    node _io_out_bits_gpr_val_w_T_96 = mux(_io_out_bits_gpr_val_w_T_14, _io_out_bits_gpr_val_w_T_19, _io_out_bits_gpr_val_w_T_95) @[EXU.scala 233:26]
    io.out.bits.gpr.val_w <= _io_out_bits_gpr_val_w_T_96 @[EXU.scala 232:30]
    node _io_out_bits_csr_val_w_T = bits(EXE_reg_op, 63, 63) @[EXU.scala 249:46]
    node _io_out_bits_csr_val_w_T_1 = bits(EXE_reg_op, 64, 64) @[EXU.scala 250:37]
    node _io_out_bits_csr_val_w_T_2 = mux(_io_out_bits_csr_val_w_T_1, alu.io.result, UInt<1>("h0")) @[EXU.scala 250:26]
    node _io_out_bits_csr_val_w_T_3 = mux(_io_out_bits_csr_val_w_T, src1, _io_out_bits_csr_val_w_T_2) @[EXU.scala 249:35]
    io.out.bits.csr.val_w <= _io_out_bits_csr_val_w_T_3 @[EXU.scala 249:30]
    node _io_out_bits_pc_dnpc_T = bits(EXE_reg_op, 65, 65) @[EXU.scala 252:44]
    node _io_out_bits_pc_dnpc_T_1 = bits(EXE_reg_op, 66, 66) @[EXU.scala 252:59]
    node _io_out_bits_pc_dnpc_T_2 = or(_io_out_bits_pc_dnpc_T, _io_out_bits_pc_dnpc_T_1) @[EXU.scala 252:48]
    node _io_out_bits_pc_dnpc_T_3 = bits(EXE_reg_op, 37, 37) @[EXU.scala 253:44]
    node _io_out_bits_pc_dnpc_T_4 = not(UInt<64>("h1")) @[EXU.scala 253:62]
    node _io_out_bits_pc_dnpc_T_5 = and(next_pc_sum, _io_out_bits_pc_dnpc_T_4) @[EXU.scala 253:60]
    node _io_out_bits_pc_dnpc_T_6 = mux(_io_out_bits_pc_dnpc_T_3, _io_out_bits_pc_dnpc_T_5, next_pc_sum) @[EXU.scala 253:33]
    node _io_out_bits_pc_dnpc_T_7 = mux(_io_out_bits_pc_dnpc_T_2, io.csr.val_r, _io_out_bits_pc_dnpc_T_6) @[EXU.scala 252:33]
    io.out.bits.pc_dnpc <= _io_out_bits_pc_dnpc_T_7 @[EXU.scala 252:28]
    io.out.bits.inst <= EXE_reg_inst @[EXU.scala 256:25]
    io.out.bits.pc <= EXE_reg_pc @[EXU.scala 257:23]
    io.mul_num <= alu.io.mul_num @[EXU.scala 260:19]
    io.div_num <= alu.io.div_num @[EXU.scala 261:19]

  module WBU :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : { pc : UInt<32>, inst : UInt<32>, pc_dnpc : UInt<64>, gpr : { idx_w : UInt<5>, en_w : UInt<1>, val_w : UInt<64>}, csr : { en_w : UInt<1>, idx_w : UInt<12>, val_w : UInt<64>, no : UInt<64>, epc : UInt<64>}, isJump : UInt<1>, clearidx : UInt<5>}}, flip gpr : { flip idx_w : UInt<5>, flip en_w : UInt<1>, flip val_w : UInt<64>}, flip csr : { flip en_w : UInt<1>, flip idx_w : UInt<12>, flip val_w : UInt<64>, flip no : UInt<64>, flip epc : UInt<64>}, pc_dnpc : UInt<64>, valid : UInt<1>, isJump : UInt<1>, flip sb : { flip clearidx : UInt<5>}, bypass_idx : UInt<5>, bypass_data : UInt<64>}

    node _WB_reg_pc_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg WB_reg_pc : UInt<32>, clock with :
      reset => (UInt<1>("h0"), WB_reg_pc) @[Reg.scala 19:16]
    when _WB_reg_pc_T : @[Reg.scala 20:18]
      WB_reg_pc <= io.in.bits.pc @[Reg.scala 20:22]
    node _WB_reg_inst_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg WB_reg_inst : UInt<32>, clock with :
      reset => (UInt<1>("h0"), WB_reg_inst) @[Reg.scala 19:16]
    when _WB_reg_inst_T : @[Reg.scala 20:18]
      WB_reg_inst <= io.in.bits.inst @[Reg.scala 20:22]
    node _WB_reg_pc_dnpc_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    node _WB_reg_pc_dnpc_T_1 = neq(io.in.bits.pc_dnpc, UInt<3>("h4")) @[WBU.scala 19:99]
    node _WB_reg_pc_dnpc_T_2 = and(_WB_reg_pc_dnpc_T, _WB_reg_pc_dnpc_T_1) @[WBU.scala 19:78]
    reg WB_reg_pc_dnpc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h80000000")) @[Reg.scala 35:20]
    when _WB_reg_pc_dnpc_T_2 : @[Reg.scala 36:18]
      WB_reg_pc_dnpc <= io.in.bits.pc_dnpc @[Reg.scala 36:22]
    node _WB_reg_gpr_en_w_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg WB_reg_gpr_en_w : UInt<1>, clock with :
      reset => (UInt<1>("h0"), WB_reg_gpr_en_w) @[Reg.scala 19:16]
    when _WB_reg_gpr_en_w_T : @[Reg.scala 20:18]
      WB_reg_gpr_en_w <= io.in.bits.gpr.en_w @[Reg.scala 20:22]
    node _WB_reg_gpr_idx_w_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg WB_reg_gpr_idx_w : UInt<5>, clock with :
      reset => (UInt<1>("h0"), WB_reg_gpr_idx_w) @[Reg.scala 19:16]
    when _WB_reg_gpr_idx_w_T : @[Reg.scala 20:18]
      WB_reg_gpr_idx_w <= io.in.bits.gpr.idx_w @[Reg.scala 20:22]
    node _WB_reg_gpr_val_w_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg WB_reg_gpr_val_w : UInt<64>, clock with :
      reset => (UInt<1>("h0"), WB_reg_gpr_val_w) @[Reg.scala 19:16]
    when _WB_reg_gpr_val_w_T : @[Reg.scala 20:18]
      WB_reg_gpr_val_w <= io.in.bits.gpr.val_w @[Reg.scala 20:22]
    node _WB_reg_csr_en_w_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg WB_reg_csr_en_w : UInt<1>, clock with :
      reset => (UInt<1>("h0"), WB_reg_csr_en_w) @[Reg.scala 19:16]
    when _WB_reg_csr_en_w_T : @[Reg.scala 20:18]
      WB_reg_csr_en_w <= io.in.bits.csr.en_w @[Reg.scala 20:22]
    node _WB_reg_csr_idx_w_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg WB_reg_csr_idx_w : UInt<12>, clock with :
      reset => (UInt<1>("h0"), WB_reg_csr_idx_w) @[Reg.scala 19:16]
    when _WB_reg_csr_idx_w_T : @[Reg.scala 20:18]
      WB_reg_csr_idx_w <= io.in.bits.csr.idx_w @[Reg.scala 20:22]
    node _WB_reg_csr_val_w_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg WB_reg_csr_val_w : UInt<64>, clock with :
      reset => (UInt<1>("h0"), WB_reg_csr_val_w) @[Reg.scala 19:16]
    when _WB_reg_csr_val_w_T : @[Reg.scala 20:18]
      WB_reg_csr_val_w <= io.in.bits.csr.val_w @[Reg.scala 20:22]
    node _WB_reg_csr_no_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg WB_reg_csr_no : UInt<64>, clock with :
      reset => (UInt<1>("h0"), WB_reg_csr_no) @[Reg.scala 19:16]
    when _WB_reg_csr_no_T : @[Reg.scala 20:18]
      WB_reg_csr_no <= io.in.bits.csr.no @[Reg.scala 20:22]
    node _WB_reg_csr_epc_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg WB_reg_csr_epc : UInt<64>, clock with :
      reset => (UInt<1>("h0"), WB_reg_csr_epc) @[Reg.scala 19:16]
    when _WB_reg_csr_epc_T : @[Reg.scala 20:18]
      WB_reg_csr_epc <= io.in.bits.csr.epc @[Reg.scala 20:22]
    node _WB_reg_valid_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    node _WB_reg_valid_T_1 = neq(io.in.bits.pc, UInt<1>("h0")) @[WBU.scala 28:61]
    node _WB_reg_valid_T_2 = and(_WB_reg_valid_T, _WB_reg_valid_T_1) @[WBU.scala 28:43]
    reg WB_reg_valid : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when UInt<1>("h1") : @[Reg.scala 36:18]
      WB_reg_valid <= _WB_reg_valid_T_2 @[Reg.scala 36:22]
    node _WB_reg_isJump_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg WB_reg_isJump : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when _WB_reg_isJump_T : @[Reg.scala 36:18]
      WB_reg_isJump <= io.in.bits.isJump @[Reg.scala 36:22]
    node _WB_reg_clearidx_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    reg WB_reg_clearidx : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Reg.scala 35:20]
    when _WB_reg_clearidx_T : @[Reg.scala 36:18]
      WB_reg_clearidx <= io.in.bits.clearidx @[Reg.scala 36:22]
    reg state : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[WBU.scala 34:24]
    node _state_T = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    node _state_T_1 = mux(_state_T, UInt<1>("h1"), UInt<1>("h0")) @[WBU.scala 36:26]
    node _state_T_2 = and(io.in.ready, io.in.valid) @[Decoupled.scala 52:35]
    node _state_T_3 = not(_state_T_2) @[WBU.scala 37:27]
    node _state_T_4 = mux(_state_T_3, UInt<1>("h0"), UInt<1>("h1")) @[WBU.scala 37:26]
    node _state_T_5 = eq(UInt<1>("h1"), state) @[Mux.scala 81:61]
    node _state_T_6 = mux(_state_T_5, _state_T_4, _state_T_1) @[Mux.scala 81:58]
    state <= _state_T_6 @[WBU.scala 35:11]
    node _io_isJump_T = eq(state, UInt<1>("h1")) @[WBU.scala 39:39]
    node _io_isJump_T_1 = and(WB_reg_isJump, _io_isJump_T) @[WBU.scala 39:30]
    io.isJump <= _io_isJump_T_1 @[WBU.scala 39:14]
    io.in.ready <= UInt<1>("h1") @[WBU.scala 41:16]
    node _io_gpr_en_w_T = eq(state, UInt<1>("h1")) @[WBU.scala 43:43]
    node _io_gpr_en_w_T_1 = and(WB_reg_gpr_en_w, _io_gpr_en_w_T) @[WBU.scala 43:34]
    io.gpr.en_w <= _io_gpr_en_w_T_1 @[WBU.scala 43:16]
    io.gpr.idx_w <= WB_reg_gpr_idx_w @[WBU.scala 44:17]
    io.gpr.val_w <= WB_reg_gpr_val_w @[WBU.scala 45:17]
    node _io_csr_en_w_T = eq(state, UInt<1>("h1")) @[WBU.scala 47:43]
    node _io_csr_en_w_T_1 = and(WB_reg_csr_en_w, _io_csr_en_w_T) @[WBU.scala 47:34]
    io.csr.en_w <= _io_csr_en_w_T_1 @[WBU.scala 47:16]
    io.csr.idx_w <= WB_reg_csr_idx_w @[WBU.scala 48:17]
    io.csr.val_w <= WB_reg_csr_val_w @[WBU.scala 49:17]
    node _io_csr_no_T = eq(state, UInt<1>("h1")) @[WBU.scala 50:26]
    node _io_csr_no_T_1 = mux(_io_csr_no_T, WB_reg_csr_no, UInt<1>("h0")) @[WBU.scala 50:19]
    io.csr.no <= _io_csr_no_T_1 @[WBU.scala 50:14]
    io.csr.epc <= WB_reg_csr_epc @[WBU.scala 51:15]
    io.pc_dnpc <= WB_reg_pc_dnpc @[WBU.scala 53:15]
    io.valid <= WB_reg_valid @[WBU.scala 54:13]
    node _io_sb_clearidx_T = eq(state, UInt<1>("h1")) @[WBU.scala 56:31]
    node _io_sb_clearidx_T_1 = mux(_io_sb_clearidx_T, WB_reg_clearidx, UInt<1>("h0")) @[WBU.scala 56:24]
    io.sb.clearidx <= _io_sb_clearidx_T_1 @[WBU.scala 56:19]
    node _io_bypass_idx_T = bits(WB_reg_gpr_en_w, 0, 0) @[WBU.scala 60:42]
    node _io_bypass_idx_T_1 = mux(_io_bypass_idx_T, WB_reg_gpr_idx_w, UInt<1>("h0")) @[WBU.scala 60:25]
    io.bypass_idx <= _io_bypass_idx_T_1 @[WBU.scala 60:19]
    io.bypass_data <= WB_reg_gpr_val_w @[WBU.scala 61:20]

  extmodule print_gpr :
    input rf : UInt<64>[32]
    defname = print_gpr

  module GPR :
    input clock : Clock
    input reset : Reset
    output io : { r : { flip idx_r1 : UInt<5>, flip idx_r2 : UInt<5>, flip en_r1 : UInt<1>, flip en_r2 : UInt<1>, val_r1 : UInt<64>, val_r2 : UInt<64>}, w : { flip idx_w : UInt<5>, flip en_w : UInt<1>, flip val_w : UInt<64>}}

    wire _gpr_WIRE : UInt<64>[32] @[GPR.scala 25:28]
    _gpr_WIRE[0] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[1] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[2] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[3] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[4] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[5] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[6] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[7] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[8] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[9] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[10] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[11] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[12] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[13] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[14] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[15] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[16] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[17] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[18] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[19] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[20] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[21] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[22] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[23] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[24] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[25] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[26] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[27] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[28] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[29] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[30] <= UInt<64>("h0") @[GPR.scala 25:28]
    _gpr_WIRE[31] <= UInt<64>("h0") @[GPR.scala 25:28]
    reg gpr : UInt<64>[32], clock with :
      reset => (reset, _gpr_WIRE) @[GPR.scala 25:20]
    node _io_r_val_r1_T = bits(io.r.en_r1, 0, 0) @[GPR.scala 26:32]
    node _io_r_val_r1_T_1 = mux(_io_r_val_r1_T, gpr[io.r.idx_r1], UInt<1>("h0")) @[GPR.scala 26:21]
    io.r.val_r1 <= _io_r_val_r1_T_1 @[GPR.scala 26:16]
    node _io_r_val_r2_T = bits(io.r.en_r2, 0, 0) @[GPR.scala 27:32]
    node _io_r_val_r2_T_1 = mux(_io_r_val_r2_T, gpr[io.r.idx_r2], UInt<1>("h0")) @[GPR.scala 27:21]
    io.r.val_r2 <= _io_r_val_r2_T_1 @[GPR.scala 27:16]
    node _gpr_T = bits(io.w.en_w, 0, 0) @[GPR.scala 28:35]
    node _gpr_T_1 = mux(_gpr_T, io.w.val_w, gpr[io.w.idx_w]) @[GPR.scala 28:25]
    gpr[io.w.idx_w] <= _gpr_T_1 @[GPR.scala 28:20]
    gpr[0] <= UInt<1>("h0") @[GPR.scala 29:11]
    inst p of print_gpr @[GPR.scala 31:17]
    p.rf is invalid
    p.rf[0] <= gpr[0] @[GPR.scala 32:12]
    p.rf[1] <= gpr[1] @[GPR.scala 32:12]
    p.rf[2] <= gpr[2] @[GPR.scala 32:12]
    p.rf[3] <= gpr[3] @[GPR.scala 32:12]
    p.rf[4] <= gpr[4] @[GPR.scala 32:12]
    p.rf[5] <= gpr[5] @[GPR.scala 32:12]
    p.rf[6] <= gpr[6] @[GPR.scala 32:12]
    p.rf[7] <= gpr[7] @[GPR.scala 32:12]
    p.rf[8] <= gpr[8] @[GPR.scala 32:12]
    p.rf[9] <= gpr[9] @[GPR.scala 32:12]
    p.rf[10] <= gpr[10] @[GPR.scala 32:12]
    p.rf[11] <= gpr[11] @[GPR.scala 32:12]
    p.rf[12] <= gpr[12] @[GPR.scala 32:12]
    p.rf[13] <= gpr[13] @[GPR.scala 32:12]
    p.rf[14] <= gpr[14] @[GPR.scala 32:12]
    p.rf[15] <= gpr[15] @[GPR.scala 32:12]
    p.rf[16] <= gpr[16] @[GPR.scala 32:12]
    p.rf[17] <= gpr[17] @[GPR.scala 32:12]
    p.rf[18] <= gpr[18] @[GPR.scala 32:12]
    p.rf[19] <= gpr[19] @[GPR.scala 32:12]
    p.rf[20] <= gpr[20] @[GPR.scala 32:12]
    p.rf[21] <= gpr[21] @[GPR.scala 32:12]
    p.rf[22] <= gpr[22] @[GPR.scala 32:12]
    p.rf[23] <= gpr[23] @[GPR.scala 32:12]
    p.rf[24] <= gpr[24] @[GPR.scala 32:12]
    p.rf[25] <= gpr[25] @[GPR.scala 32:12]
    p.rf[26] <= gpr[26] @[GPR.scala 32:12]
    p.rf[27] <= gpr[27] @[GPR.scala 32:12]
    p.rf[28] <= gpr[28] @[GPR.scala 32:12]
    p.rf[29] <= gpr[29] @[GPR.scala 32:12]
    p.rf[30] <= gpr[30] @[GPR.scala 32:12]
    p.rf[31] <= gpr[31] @[GPR.scala 32:12]

  extmodule print_csr :
    input rf : UInt<64>[6]
    defname = print_csr

  module CSR :
    input clock : Clock
    input reset : Reset
    output io : { r : { flip idx_r : UInt<12>, flip en_r : UInt<1>, val_r : UInt<64>}, w : { flip en_w : UInt<1>, flip idx_w : UInt<12>, flip val_w : UInt<64>, flip no : UInt<64>, flip epc : UInt<64>}, flip clint : { mtip : UInt<1>, mtime : UInt<64>}, irq : UInt<1>, flip irq_pc : UInt<32>, next_pc : UInt<32>, en_mtip : UInt<1>}

    wire _csr_WIRE : UInt<64>[6] @[CSR.scala 34:28]
    _csr_WIRE[0] <= UInt<64>("ha00001800") @[CSR.scala 34:28]
    _csr_WIRE[1] <= UInt<64>("h0") @[CSR.scala 34:28]
    _csr_WIRE[2] <= UInt<64>("h0") @[CSR.scala 34:28]
    _csr_WIRE[3] <= UInt<64>("h0") @[CSR.scala 34:28]
    _csr_WIRE[4] <= UInt<64>("h0") @[CSR.scala 34:28]
    _csr_WIRE[5] <= UInt<64>("h0") @[CSR.scala 34:28]
    reg csr : UInt<64>[6], clock with :
      reset => (reset, _csr_WIRE) @[CSR.scala 34:20]
    wire map_r : UInt<5> @[CSR.scala 36:19]
    wire map_w : UInt<5> @[CSR.scala 37:19]
    reg clint_mtip : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CSR.scala 39:27]
    node _clint_mtip_T = bits(io.clint.mtip, 0, 0) @[CSR.scala 40:30]
    clint_mtip <= _clint_mtip_T @[CSR.scala 40:15]
    wire clint_irq : UInt<1> @[CSR.scala 42:25]
    node _clint_irq_T = bits(csr[0], 3, 3) @[CSR.scala 43:25]
    node _clint_irq_T_1 = bits(csr[4], 7, 7) @[CSR.scala 43:38]
    node _clint_irq_T_2 = and(_clint_irq_T, _clint_irq_T_1) @[CSR.scala 43:30]
    node _clint_irq_T_3 = bits(io.clint.mtip, 0, 0) @[CSR.scala 43:58]
    node _clint_irq_T_4 = and(_clint_irq_T_2, _clint_irq_T_3) @[CSR.scala 43:43]
    node _clint_irq_T_5 = bits(clint_mtip, 0, 0) @[CSR.scala 43:76]
    node _clint_irq_T_6 = not(_clint_irq_T_5) @[CSR.scala 43:65]
    node _clint_irq_T_7 = and(_clint_irq_T_4, _clint_irq_T_6) @[CSR.scala 43:62]
    clint_irq <= _clint_irq_T_7 @[CSR.scala 43:15]
    io.irq <= clint_irq @[CSR.scala 45:11]
    node _io_next_pc_T = bits(csr[1], 31, 0) @[CSR.scala 46:23]
    io.next_pc <= _io_next_pc_T @[CSR.scala 46:15]
    node _io_en_mtip_T = bits(csr[0], 3, 3) @[CSR.scala 48:23]
    node _io_en_mtip_T_1 = bits(csr[4], 7, 7) @[CSR.scala 48:36]
    node _io_en_mtip_T_2 = and(_io_en_mtip_T, _io_en_mtip_T_1) @[CSR.scala 48:28]
    io.en_mtip <= _io_en_mtip_T_2 @[CSR.scala 48:15]
    node _map_r_T = eq(io.r.idx_r, UInt<10>("h300")) @[CSR.scala 49:27]
    node _map_r_T_1 = eq(io.r.idx_r, UInt<10>("h305")) @[CSR.scala 50:27]
    node _map_r_T_2 = eq(io.r.idx_r, UInt<10>("h341")) @[CSR.scala 51:27]
    node _map_r_T_3 = eq(io.r.idx_r, UInt<10>("h342")) @[CSR.scala 52:27]
    node _map_r_T_4 = eq(io.r.idx_r, UInt<10>("h304")) @[CSR.scala 53:27]
    node _map_r_T_5 = eq(io.r.idx_r, UInt<10>("h344")) @[CSR.scala 54:27]
    node _map_r_T_6 = mux(_map_r_T_5, UInt<3>("h5"), UInt<1>("h0")) @[CSR.scala 54:15]
    node _map_r_T_7 = mux(_map_r_T_4, UInt<3>("h4"), _map_r_T_6) @[CSR.scala 53:15]
    node _map_r_T_8 = mux(_map_r_T_3, UInt<2>("h3"), _map_r_T_7) @[CSR.scala 52:15]
    node _map_r_T_9 = mux(_map_r_T_2, UInt<2>("h2"), _map_r_T_8) @[CSR.scala 51:15]
    node _map_r_T_10 = mux(_map_r_T_1, UInt<1>("h1"), _map_r_T_9) @[CSR.scala 50:15]
    node _map_r_T_11 = mux(_map_r_T, UInt<1>("h0"), _map_r_T_10) @[CSR.scala 49:15]
    map_r <= _map_r_T_11 @[CSR.scala 49:10]
    node _map_w_T = eq(io.w.idx_w, UInt<10>("h300")) @[CSR.scala 57:27]
    node _map_w_T_1 = eq(io.w.idx_w, UInt<10>("h305")) @[CSR.scala 58:27]
    node _map_w_T_2 = eq(io.w.idx_w, UInt<10>("h341")) @[CSR.scala 59:27]
    node _map_w_T_3 = eq(io.w.idx_w, UInt<10>("h342")) @[CSR.scala 60:27]
    node _map_w_T_4 = eq(io.w.idx_w, UInt<10>("h304")) @[CSR.scala 61:27]
    node _map_w_T_5 = eq(io.w.idx_w, UInt<10>("h344")) @[CSR.scala 62:27]
    node _map_w_T_6 = mux(_map_w_T_5, UInt<3>("h5"), UInt<1>("h0")) @[CSR.scala 62:15]
    node _map_w_T_7 = mux(_map_w_T_4, UInt<3>("h4"), _map_w_T_6) @[CSR.scala 61:15]
    node _map_w_T_8 = mux(_map_w_T_3, UInt<2>("h3"), _map_w_T_7) @[CSR.scala 60:15]
    node _map_w_T_9 = mux(_map_w_T_2, UInt<2>("h2"), _map_w_T_8) @[CSR.scala 59:15]
    node _map_w_T_10 = mux(_map_w_T_1, UInt<1>("h1"), _map_w_T_9) @[CSR.scala 58:15]
    node _map_w_T_11 = mux(_map_w_T, UInt<1>("h0"), _map_w_T_10) @[CSR.scala 57:15]
    map_w <= _map_w_T_11 @[CSR.scala 57:10]
    node _csr_0_T = bits(clint_irq, 0, 0) @[CSR.scala 65:28]
    node _csr_0_T_1 = eq(io.w.no, UInt<1>("h1")) @[CSR.scala 65:44]
    node _csr_0_T_2 = or(_csr_0_T, _csr_0_T_1) @[CSR.scala 65:35]
    node _csr_0_T_3 = bits(csr[0], 63, 8) @[CSR.scala 65:74]
    node _csr_0_T_4 = bits(csr[0], 3, 3) @[CSR.scala 65:87]
    node _csr_0_T_5 = cat(_csr_0_T_3, _csr_0_T_4) @[Cat.scala 33:92]
    node _csr_0_T_6 = bits(csr[0], 6, 4) @[CSR.scala 65:98]
    node _csr_0_T_7 = cat(_csr_0_T_5, _csr_0_T_6) @[Cat.scala 33:92]
    node _csr_0_T_8 = cat(_csr_0_T_7, UInt<1>("h0")) @[Cat.scala 33:92]
    node _csr_0_T_9 = bits(csr[0], 2, 0) @[CSR.scala 65:121]
    node _csr_0_T_10 = cat(_csr_0_T_8, _csr_0_T_9) @[Cat.scala 33:92]
    node _csr_0_T_11 = eq(io.w.no, UInt<2>("h2")) @[CSR.scala 66:24]
    node _csr_0_T_12 = bits(csr[0], 63, 8) @[CSR.scala 66:53]
    node _csr_0_T_13 = cat(_csr_0_T_12, UInt<1>("h1")) @[Cat.scala 33:92]
    node _csr_0_T_14 = bits(csr[0], 6, 4) @[CSR.scala 66:76]
    node _csr_0_T_15 = cat(_csr_0_T_13, _csr_0_T_14) @[Cat.scala 33:92]
    node _csr_0_T_16 = bits(csr[0], 7, 7) @[CSR.scala 66:89]
    node _csr_0_T_17 = cat(_csr_0_T_15, _csr_0_T_16) @[Cat.scala 33:92]
    node _csr_0_T_18 = bits(csr[0], 2, 0) @[CSR.scala 66:100]
    node _csr_0_T_19 = cat(_csr_0_T_17, _csr_0_T_18) @[Cat.scala 33:92]
    node _csr_0_T_20 = mux(_csr_0_T_11, _csr_0_T_19, csr[0]) @[CSR.scala 66:16]
    node _csr_0_T_21 = mux(_csr_0_T_2, _csr_0_T_10, _csr_0_T_20) @[CSR.scala 65:16]
    csr[0] <= _csr_0_T_21 @[CSR.scala 65:11]
    node _csr_2_T = bits(clint_irq, 0, 0) @[CSR.scala 68:28]
    node _csr_2_T_1 = eq(io.w.no, UInt<1>("h1")) @[CSR.scala 69:25]
    node _csr_2_T_2 = mux(_csr_2_T_1, io.w.epc, csr[2]) @[CSR.scala 69:16]
    node _csr_2_T_3 = mux(_csr_2_T, io.irq_pc, _csr_2_T_2) @[CSR.scala 68:16]
    csr[2] <= _csr_2_T_3 @[CSR.scala 68:11]
    node _csr_3_T = bits(clint_irq, 0, 0) @[CSR.scala 70:27]
    node _csr_3_T_1 = eq(io.w.no, UInt<1>("h1")) @[CSR.scala 71:24]
    node _csr_3_T_2 = mux(_csr_3_T_1, UInt<4>("hb"), csr[3]) @[CSR.scala 71:16]
    node _csr_3_T_3 = mux(_csr_3_T, UInt<64>("h8000000000000007"), _csr_3_T_2) @[CSR.scala 70:16]
    csr[3] <= _csr_3_T_3 @[CSR.scala 70:11]
    node _io_r_val_r_T = bits(io.r.en_r, 0, 0) @[CSR.scala 72:30]
    node _io_r_val_r_T_1 = bits(map_r, 2, 0)
    node _io_r_val_r_T_2 = mux(_io_r_val_r_T, csr[_io_r_val_r_T_1], UInt<64>("h0")) @[CSR.scala 72:20]
    io.r.val_r <= _io_r_val_r_T_2 @[CSR.scala 72:15]
    node _T = bits(map_w, 2, 0)
    node _csr_T = bits(io.w.en_w, 0, 0) @[CSR.scala 73:30]
    node _csr_T_1 = bits(map_w, 2, 0)
    node _csr_T_2 = mux(_csr_T, io.w.val_w, csr[_csr_T_1]) @[CSR.scala 73:20]
    csr[_T] <= _csr_T_2 @[CSR.scala 73:15]
    inst p of print_csr @[CSR.scala 75:17]
    p.rf is invalid
    p.rf[0] <= csr[0] @[CSR.scala 76:12]
    p.rf[1] <= csr[1] @[CSR.scala 76:12]
    p.rf[2] <= csr[2] @[CSR.scala 76:12]
    p.rf[3] <= csr[3] @[CSR.scala 76:12]
    p.rf[4] <= csr[4] @[CSR.scala 76:12]
    p.rf[5] <= csr[5] @[CSR.scala 76:12]

  extmodule memory :
    input clock : Clock
    input raddr : UInt<32>
    output rdata : UInt<64>
    input waddr : UInt<32>
    input wdata : UInt<64>
    input wmask : UInt<8>
    defname = memory

  module AXI4SRAM :
    input clock : Clock
    input reset : Reset
    input io : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>, last : UInt<1>, id : UInt<4>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>, id : UInt<4>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<4>}}}

    wire rlast : UInt<1> @[SRAM.scala 44:19]
    wire wlast : UInt<1> @[SRAM.scala 45:19]
    reg rstate : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SRAM.scala 47:23]
    wlast <= io.w.bits.last @[SRAM.scala 48:9]
    node _rstate_T = and(io.ar.ready, io.ar.valid) @[Decoupled.scala 52:35]
    node _rstate_T_1 = mux(_rstate_T, UInt<1>("h1"), UInt<1>("h0")) @[SRAM.scala 50:25]
    node _rstate_T_2 = bits(rlast, 0, 0) @[SRAM.scala 51:32]
    node _rstate_T_3 = and(io.ar.ready, io.ar.valid) @[Decoupled.scala 52:35]
    node _rstate_T_4 = not(_rstate_T_3) @[SRAM.scala 51:42]
    node _rstate_T_5 = and(_rstate_T_2, _rstate_T_4) @[SRAM.scala 51:39]
    node _rstate_T_6 = mux(_rstate_T_5, UInt<1>("h0"), UInt<1>("h1")) @[SRAM.scala 51:25]
    node _rstate_T_7 = eq(UInt<1>("h1"), rstate) @[Mux.scala 81:61]
    node _rstate_T_8 = mux(_rstate_T_7, _rstate_T_6, _rstate_T_1) @[Mux.scala 81:58]
    rstate <= _rstate_T_8 @[SRAM.scala 49:10]
    reg wstate : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SRAM.scala 53:23]
    node _wstate_T = and(io.w.ready, io.w.valid) @[Decoupled.scala 52:35]
    node _wstate_T_1 = bits(wlast, 0, 0) @[SRAM.scala 55:42]
    node _wstate_T_2 = and(_wstate_T, _wstate_T_1) @[SRAM.scala 55:35]
    node _wstate_T_3 = mux(_wstate_T_2, UInt<1>("h1"), UInt<1>("h0")) @[SRAM.scala 55:25]
    node _wstate_T_4 = and(io.b.ready, io.b.valid) @[Decoupled.scala 52:35]
    node _wstate_T_5 = mux(_wstate_T_4, UInt<1>("h0"), UInt<1>("h1")) @[SRAM.scala 56:25]
    node _wstate_T_6 = eq(UInt<1>("h1"), wstate) @[Mux.scala 81:61]
    node _wstate_T_7 = mux(_wstate_T_6, _wstate_T_5, _wstate_T_3) @[Mux.scala 81:58]
    wstate <= _wstate_T_7 @[SRAM.scala 54:10]
    reg rid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SRAM.scala 60:18]
    reg raddr : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[SRAM.scala 61:20]
    reg rlen : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[SRAM.scala 62:19]
    reg rsize : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[SRAM.scala 63:20]
    reg rburst : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[SRAM.scala 64:21]
    reg lower_bound_addr : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[SRAM.scala 65:31]
    reg rcnt : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[SRAM.scala 66:21]
    reg beatcnt : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[SRAM.scala 67:24]
    node _rid_T = and(io.ar.ready, io.ar.valid) @[Decoupled.scala 52:35]
    node _rid_T_1 = mux(_rid_T, io.ar.bits.id, rid) @[SRAM.scala 69:13]
    rid <= _rid_T_1 @[SRAM.scala 69:7]
    node _lower_bound_addr_T = and(io.ar.ready, io.ar.valid) @[Decoupled.scala 52:35]
    wire _lower_bound_addr_WIRE : UInt<32> @[SRAM.scala 70:81]
    _lower_bound_addr_WIRE <= io.ar.bits.len @[SRAM.scala 70:81]
    node _lower_bound_addr_T_1 = not(_lower_bound_addr_WIRE) @[SRAM.scala 70:57]
    node _lower_bound_addr_T_2 = dshl(_lower_bound_addr_T_1, io.ar.bits.size) @[SRAM.scala 70:95]
    node _lower_bound_addr_T_3 = and(io.ar.bits.addr, _lower_bound_addr_T_2) @[SRAM.scala 70:52]
    node _lower_bound_addr_T_4 = mux(_lower_bound_addr_T, _lower_bound_addr_T_3, lower_bound_addr) @[SRAM.scala 70:24]
    lower_bound_addr <= _lower_bound_addr_T_4 @[SRAM.scala 70:19]
    node _raddr_T = and(io.ar.ready, io.ar.valid) @[Decoupled.scala 52:35]
    node _raddr_T_1 = bits(rlast, 0, 0) @[SRAM.scala 73:22]
    node _raddr_T_2 = and(io.r.ready, io.r.valid) @[Decoupled.scala 52:35]
    node _raddr_T_3 = eq(beatcnt, UInt<8>("hff")) @[SRAM.scala 74:37]
    node _raddr_T_4 = eq(beatcnt, rlen) @[SRAM.scala 74:57]
    node _raddr_T_5 = or(_raddr_T_3, _raddr_T_4) @[SRAM.scala 74:47]
    node _raddr_T_6 = and(_raddr_T_2, _raddr_T_5) @[SRAM.scala 74:26]
    node _raddr_T_7 = and(io.r.ready, io.r.valid) @[Decoupled.scala 52:35]
    node _raddr_T_8 = dshl(UInt<32>("h1"), rsize) @[SRAM.scala 75:45]
    node _raddr_T_9 = add(raddr, _raddr_T_8) @[SRAM.scala 75:33]
    node _raddr_T_10 = tail(_raddr_T_9, 1) @[SRAM.scala 75:33]
    node _raddr_T_11 = mux(_raddr_T_7, _raddr_T_10, raddr) @[SRAM.scala 75:15]
    node _raddr_T_12 = mux(_raddr_T_6, lower_bound_addr, _raddr_T_11) @[SRAM.scala 74:15]
    node _raddr_T_13 = mux(_raddr_T_1, UInt<1>("h0"), _raddr_T_12) @[SRAM.scala 73:15]
    node _raddr_T_14 = mux(_raddr_T, io.ar.bits.addr, _raddr_T_13) @[SRAM.scala 72:15]
    raddr <= _raddr_T_14 @[SRAM.scala 72:9]
    node _rlen_T = and(io.ar.ready, io.ar.valid) @[Decoupled.scala 52:35]
    node _rlen_T_1 = mux(_rlen_T, io.ar.bits.len, rlen) @[SRAM.scala 76:14]
    rlen <= _rlen_T_1 @[SRAM.scala 76:8]
    node _rsize_T = and(io.ar.ready, io.ar.valid) @[Decoupled.scala 52:35]
    node _rsize_T_1 = mux(_rsize_T, io.ar.bits.size, rsize) @[SRAM.scala 77:15]
    rsize <= _rsize_T_1 @[SRAM.scala 77:9]
    node _rburst_T = and(io.ar.ready, io.ar.valid) @[Decoupled.scala 52:35]
    node _rburst_T_1 = mux(_rburst_T, io.ar.bits.burst, rburst) @[SRAM.scala 78:15]
    rburst <= _rburst_T_1 @[SRAM.scala 78:9]
    node _rcnt_T = eq(rcnt, UInt<8>("hff")) @[SRAM.scala 79:18]
    node _rcnt_T_1 = bits(rlast, 0, 0) @[SRAM.scala 79:36]
    node _rcnt_T_2 = or(_rcnt_T, _rcnt_T_1) @[SRAM.scala 79:27]
    node _rcnt_T_3 = and(io.ar.ready, io.ar.valid) @[Decoupled.scala 52:35]
    node _rcnt_T_4 = or(_rcnt_T_2, _rcnt_T_3) @[SRAM.scala 79:43]
    node _rcnt_T_5 = and(io.r.ready, io.r.valid) @[Decoupled.scala 52:35]
    node _rcnt_T_6 = add(rcnt, UInt<1>("h1")) @[SRAM.scala 80:28]
    node _rcnt_T_7 = tail(_rcnt_T_6, 1) @[SRAM.scala 80:28]
    node _rcnt_T_8 = mux(_rcnt_T_5, _rcnt_T_7, rcnt) @[SRAM.scala 80:12]
    node _rcnt_T_9 = mux(_rcnt_T_4, UInt<1>("h0"), _rcnt_T_8) @[SRAM.scala 79:12]
    rcnt <= _rcnt_T_9 @[SRAM.scala 79:7]
    node _beatcnt_T = and(io.ar.ready, io.ar.valid) @[Decoupled.scala 52:35]
    node _beatcnt_T_1 = dshr(io.ar.bits.addr, io.ar.bits.size) @[SRAM.scala 81:44]
    node _beatcnt_T_2 = and(_beatcnt_T_1, io.ar.bits.len) @[SRAM.scala 81:64]
    node _beatcnt_T_3 = eq(beatcnt, UInt<8>("hff")) @[SRAM.scala 82:24]
    node _beatcnt_T_4 = eq(beatcnt, rlen) @[SRAM.scala 82:44]
    node _beatcnt_T_5 = or(_beatcnt_T_3, _beatcnt_T_4) @[SRAM.scala 82:34]
    node _beatcnt_T_6 = neq(rstate, UInt<1>("h0")) @[SRAM.scala 83:23]
    node _beatcnt_T_7 = add(beatcnt, UInt<1>("h1")) @[SRAM.scala 83:41]
    node _beatcnt_T_8 = tail(_beatcnt_T_7, 1) @[SRAM.scala 83:41]
    node _beatcnt_T_9 = mux(_beatcnt_T_6, _beatcnt_T_8, UInt<1>("h0")) @[SRAM.scala 83:15]
    node _beatcnt_T_10 = mux(_beatcnt_T_5, UInt<1>("h0"), _beatcnt_T_9) @[SRAM.scala 82:15]
    node _beatcnt_T_11 = mux(_beatcnt_T, _beatcnt_T_2, _beatcnt_T_10) @[SRAM.scala 81:15]
    beatcnt <= _beatcnt_T_11 @[SRAM.scala 81:10]
    node _rlast_T = eq(rcnt, rlen) @[SRAM.scala 85:16]
    node _rlast_T_1 = and(io.r.ready, io.r.valid) @[Decoupled.scala 52:35]
    node _rlast_T_2 = and(_rlast_T, _rlast_T_1) @[SRAM.scala 85:25]
    rlast <= _rlast_T_2 @[SRAM.scala 85:8]
    io.r.bits.last <= rlast @[SRAM.scala 86:18]
    reg wid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SRAM.scala 91:18]
    reg waddr : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[SRAM.scala 92:22]
    reg wlen : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[SRAM.scala 93:19]
    reg wcnt : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[SRAM.scala 94:21]
    reg wsize : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[SRAM.scala 95:22]
    node _wid_T = and(io.aw.ready, io.aw.valid) @[Decoupled.scala 52:35]
    node _wid_T_1 = mux(_wid_T, io.aw.bits.id, wid) @[SRAM.scala 97:13]
    wid <= _wid_T_1 @[SRAM.scala 97:7]
    node _wlen_T = and(io.aw.ready, io.aw.valid) @[Decoupled.scala 52:35]
    node _wlen_T_1 = mux(_wlen_T, io.aw.bits.len, wlen) @[SRAM.scala 98:12]
    wlen <= _wlen_T_1 @[SRAM.scala 98:7]
    node _wsize_T = and(io.aw.ready, io.aw.valid) @[Decoupled.scala 52:35]
    node _wsize_T_1 = mux(_wsize_T, io.aw.bits.size, wsize) @[SRAM.scala 99:13]
    wsize <= _wsize_T_1 @[SRAM.scala 99:8]
    node _waddr_T = bits(wlast, 0, 0) @[SRAM.scala 100:20]
    node _waddr_T_1 = and(io.aw.ready, io.aw.valid) @[Decoupled.scala 52:35]
    node _waddr_T_2 = and(io.w.ready, io.w.valid) @[Decoupled.scala 52:35]
    node _waddr_T_3 = and(_waddr_T_1, _waddr_T_2) @[SRAM.scala 101:25]
    node _waddr_T_4 = eq(wstate, UInt<1>("h0")) @[SRAM.scala 101:48]
    node _waddr_T_5 = and(_waddr_T_3, _waddr_T_4) @[SRAM.scala 101:38]
    node _waddr_T_6 = dshl(UInt<32>("h1"), io.aw.bits.size) @[SRAM.scala 101:86]
    node _waddr_T_7 = add(io.aw.bits.addr, _waddr_T_6) @[SRAM.scala 101:75]
    node _waddr_T_8 = tail(_waddr_T_7, 1) @[SRAM.scala 101:75]
    node _waddr_T_9 = and(io.w.ready, io.w.valid) @[Decoupled.scala 52:35]
    node _waddr_T_10 = dshl(UInt<32>("h1"), wsize) @[SRAM.scala 102:41]
    node _waddr_T_11 = add(waddr, _waddr_T_10) @[SRAM.scala 102:30]
    node _waddr_T_12 = tail(_waddr_T_11, 1) @[SRAM.scala 102:30]
    node _waddr_T_13 = mux(_waddr_T_9, _waddr_T_12, waddr) @[SRAM.scala 102:13]
    node _waddr_T_14 = mux(_waddr_T_5, _waddr_T_8, _waddr_T_13) @[SRAM.scala 101:13]
    node _waddr_T_15 = mux(_waddr_T, UInt<1>("h0"), _waddr_T_14) @[SRAM.scala 100:13]
    waddr <= _waddr_T_15 @[SRAM.scala 100:8]
    node _wcnt_T = eq(wcnt, UInt<8>("hff")) @[SRAM.scala 103:18]
    node _wcnt_T_1 = bits(wlast, 0, 0) @[SRAM.scala 103:36]
    node _wcnt_T_2 = or(_wcnt_T, _wcnt_T_1) @[SRAM.scala 103:27]
    node _wcnt_T_3 = and(io.aw.ready, io.aw.valid) @[Decoupled.scala 52:35]
    node _wcnt_T_4 = or(_wcnt_T_2, _wcnt_T_3) @[SRAM.scala 103:43]
    node _wcnt_T_5 = and(io.w.ready, io.w.valid) @[Decoupled.scala 52:35]
    node _wcnt_T_6 = add(wcnt, UInt<1>("h1")) @[SRAM.scala 104:28]
    node _wcnt_T_7 = tail(_wcnt_T_6, 1) @[SRAM.scala 104:28]
    node _wcnt_T_8 = mux(_wcnt_T_5, _wcnt_T_7, wcnt) @[SRAM.scala 104:12]
    node _wcnt_T_9 = mux(_wcnt_T_4, UInt<1>("h0"), _wcnt_T_8) @[SRAM.scala 103:12]
    wcnt <= _wcnt_T_9 @[SRAM.scala 103:7]
    inst pmem of memory @[SRAM.scala 106:19]
    pmem.wmask is invalid
    pmem.wdata is invalid
    pmem.waddr is invalid
    pmem.rdata is invalid
    pmem.raddr is invalid
    pmem.clock is invalid
    pmem.raddr <= raddr @[SRAM.scala 107:16]
    node _pmem_io_waddr_T = and(io.aw.ready, io.aw.valid) @[Decoupled.scala 52:35]
    node _pmem_io_waddr_T_1 = mux(_pmem_io_waddr_T, io.aw.bits.addr, waddr) @[SRAM.scala 108:22]
    pmem.waddr <= _pmem_io_waddr_T_1 @[SRAM.scala 108:16]
    pmem.wdata <= io.w.bits.data @[SRAM.scala 109:16]
    node _pmem_io_wmask_T = and(io.w.ready, io.w.valid) @[Decoupled.scala 52:35]
    node _pmem_io_wmask_T_1 = mux(_pmem_io_wmask_T, io.w.bits.strb, UInt<1>("h0")) @[SRAM.scala 110:22]
    pmem.wmask <= _pmem_io_wmask_T_1 @[SRAM.scala 110:16]
    pmem.clock <= clock @[SRAM.scala 111:16]
    node _io_ar_ready_T = eq(rstate, UInt<1>("h0")) @[SRAM.scala 113:26]
    node _io_ar_ready_T_1 = bits(rlast, 0, 0) @[SRAM.scala 113:48]
    node _io_ar_ready_T_2 = neq(rstate, UInt<1>("h0")) @[SRAM.scala 113:64]
    node _io_ar_ready_T_3 = and(_io_ar_ready_T_1, _io_ar_ready_T_2) @[SRAM.scala 113:55]
    node _io_ar_ready_T_4 = or(_io_ar_ready_T, _io_ar_ready_T_3) @[SRAM.scala 113:38]
    io.ar.ready <= _io_ar_ready_T_4 @[SRAM.scala 113:15]
    node _io_r_valid_T = neq(rstate, UInt<1>("h0")) @[SRAM.scala 114:26]
    io.r.valid <= _io_r_valid_T @[SRAM.scala 114:15]
    node _io_aw_ready_T = eq(wstate, UInt<1>("h0")) @[SRAM.scala 116:26]
    io.aw.ready <= _io_aw_ready_T @[SRAM.scala 116:15]
    node _io_w_ready_T = eq(wstate, UInt<1>("h0")) @[SRAM.scala 117:26]
    io.w.ready <= _io_w_ready_T @[SRAM.scala 117:15]
    io.r.bits.data <= pmem.rdata @[SRAM.scala 118:18]
    io.r.bits.id <= rid @[SRAM.scala 119:16]
    io.r.bits.resp <= UInt<1>("h0") @[SRAM.scala 120:18]
    io.b.bits.id <= wid @[SRAM.scala 121:16]
    io.b.bits.resp <= UInt<1>("h0") @[SRAM.scala 122:18]
    node _io_b_valid_T = eq(wstate, UInt<1>("h1")) @[SRAM.scala 123:25]
    io.b.valid <= _io_b_valid_T @[SRAM.scala 123:14]

  module CLINT :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>, last : UInt<1>, id : UInt<4>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>, id : UInt<4>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<4>}}}, mtip : UInt<1>, mtime : UInt<64>, flip en_mtip : UInt<1>, skip : UInt<1>}

    node _BOUND_ADDRESS_T = add(UInt<30>("h20000000"), UInt<16>("hbfff")) @[CLINT.scala 17:38]
    node BOUND_ADDRESS = tail(_BOUND_ADDRESS_T, 1) @[CLINT.scala 17:38]
    node _MTIMECMP_T = add(UInt<30>("h20000000"), UInt<15>("h4000")) @[CLINT.scala 20:32]
    node MTIMECMP = tail(_MTIMECMP_T, 1) @[CLINT.scala 20:32]
    node _MTIME_T = add(UInt<30>("h20000000"), UInt<16>("hbff8")) @[CLINT.scala 21:29]
    node MTIME = tail(_MTIME_T, 1) @[CLINT.scala 21:29]
    reg mtimecmp : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CLINT.scala 28:27]
    reg mtime : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CLINT.scala 29:24]
    node _io_mtip_T = geq(mtime, mtimecmp) @[CLINT.scala 32:22]
    io.mtip <= _io_mtip_T @[CLINT.scala 32:13]
    io.mtime <= mtime @[CLINT.scala 33:14]
    reg cnt : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[CLINT.scala 36:22]
    node _cnt_T = eq(cnt, UInt<1>("h0")) @[CLINT.scala 37:20]
    node _cnt_T_1 = add(cnt, UInt<1>("h1")) @[CLINT.scala 37:47]
    node _cnt_T_2 = tail(_cnt_T_1, 1) @[CLINT.scala 37:47]
    node _cnt_T_3 = mux(_cnt_T, UInt<1>("h0"), _cnt_T_2) @[CLINT.scala 37:15]
    cnt <= _cnt_T_3 @[CLINT.scala 37:9]
    wire rlast : UInt<1> @[CLINT.scala 40:21]
    wire wlast : UInt<1> @[CLINT.scala 41:21]
    reg rstate : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CLINT.scala 43:25]
    wlast <= io.in.w.bits.last @[CLINT.scala 44:11]
    node _rstate_T = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 52:35]
    node _rstate_T_1 = mux(_rstate_T, UInt<1>("h1"), UInt<1>("h0")) @[CLINT.scala 46:27]
    node _rstate_T_2 = bits(rlast, 0, 0) @[CLINT.scala 47:34]
    node _rstate_T_3 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 52:35]
    node _rstate_T_4 = not(_rstate_T_3) @[CLINT.scala 47:44]
    node _rstate_T_5 = and(_rstate_T_2, _rstate_T_4) @[CLINT.scala 47:41]
    node _rstate_T_6 = mux(_rstate_T_5, UInt<1>("h0"), UInt<1>("h1")) @[CLINT.scala 47:27]
    node _rstate_T_7 = eq(UInt<1>("h1"), rstate) @[Mux.scala 81:61]
    node _rstate_T_8 = mux(_rstate_T_7, _rstate_T_6, _rstate_T_1) @[Mux.scala 81:58]
    rstate <= _rstate_T_8 @[CLINT.scala 45:12]
    reg wstate : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CLINT.scala 49:25]
    node _wstate_T = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 52:35]
    node _wstate_T_1 = bits(wlast, 0, 0) @[CLINT.scala 51:47]
    node _wstate_T_2 = and(_wstate_T, _wstate_T_1) @[CLINT.scala 51:40]
    node _wstate_T_3 = mux(_wstate_T_2, UInt<1>("h1"), UInt<1>("h0")) @[CLINT.scala 51:27]
    node _wstate_T_4 = and(io.in.b.ready, io.in.b.valid) @[Decoupled.scala 52:35]
    node _wstate_T_5 = mux(_wstate_T_4, UInt<1>("h0"), UInt<1>("h1")) @[CLINT.scala 52:27]
    node _wstate_T_6 = eq(UInt<1>("h1"), wstate) @[Mux.scala 81:61]
    node _wstate_T_7 = mux(_wstate_T_6, _wstate_T_5, _wstate_T_3) @[Mux.scala 81:58]
    wstate <= _wstate_T_7 @[CLINT.scala 50:12]
    reg rid : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[CLINT.scala 56:20]
    reg raddr : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CLINT.scala 57:22]
    reg rlen : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[CLINT.scala 58:21]
    reg rsize : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[CLINT.scala 59:22]
    reg rburst : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[CLINT.scala 60:23]
    reg lower_bound_addr : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CLINT.scala 61:33]
    reg rcnt : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[CLINT.scala 62:23]
    reg beatcnt : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[CLINT.scala 63:26]
    node _rid_T = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 52:35]
    node _rid_T_1 = mux(_rid_T, io.in.ar.bits.id, UInt<1>("h0")) @[CLINT.scala 65:15]
    rid <= _rid_T_1 @[CLINT.scala 65:9]
    node _lower_bound_addr_T = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 52:35]
    wire _lower_bound_addr_WIRE : UInt<32> @[CLINT.scala 66:92]
    _lower_bound_addr_WIRE <= io.in.ar.bits.len @[CLINT.scala 66:92]
    node _lower_bound_addr_T_1 = not(_lower_bound_addr_WIRE) @[CLINT.scala 66:65]
    node _lower_bound_addr_T_2 = dshl(_lower_bound_addr_T_1, io.in.ar.bits.size) @[CLINT.scala 66:106]
    node _lower_bound_addr_T_3 = and(io.in.ar.bits.addr, _lower_bound_addr_T_2) @[CLINT.scala 66:60]
    node _lower_bound_addr_T_4 = mux(_lower_bound_addr_T, _lower_bound_addr_T_3, lower_bound_addr) @[CLINT.scala 66:26]
    lower_bound_addr <= _lower_bound_addr_T_4 @[CLINT.scala 66:21]
    node _raddr_T = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 52:35]
    node _raddr_T_1 = bits(rlast, 0, 0) @[CLINT.scala 69:24]
    node _raddr_T_2 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 52:35]
    node _raddr_T_3 = eq(beatcnt, UInt<8>("hff")) @[CLINT.scala 70:42]
    node _raddr_T_4 = eq(beatcnt, rlen) @[CLINT.scala 70:62]
    node _raddr_T_5 = or(_raddr_T_3, _raddr_T_4) @[CLINT.scala 70:52]
    node _raddr_T_6 = and(_raddr_T_2, _raddr_T_5) @[CLINT.scala 70:31]
    node _raddr_T_7 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 52:35]
    node _raddr_T_8 = dshl(UInt<32>("h1"), rsize) @[CLINT.scala 71:50]
    node _raddr_T_9 = add(raddr, _raddr_T_8) @[CLINT.scala 71:38]
    node _raddr_T_10 = tail(_raddr_T_9, 1) @[CLINT.scala 71:38]
    node _raddr_T_11 = mux(_raddr_T_7, _raddr_T_10, raddr) @[CLINT.scala 71:17]
    node _raddr_T_12 = mux(_raddr_T_6, lower_bound_addr, _raddr_T_11) @[CLINT.scala 70:17]
    node _raddr_T_13 = mux(_raddr_T_1, UInt<1>("h0"), _raddr_T_12) @[CLINT.scala 69:17]
    node _raddr_T_14 = mux(_raddr_T, io.in.ar.bits.addr, _raddr_T_13) @[CLINT.scala 68:17]
    raddr <= _raddr_T_14 @[CLINT.scala 68:11]
    node _rlen_T = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 52:35]
    node _rlen_T_1 = mux(_rlen_T, io.in.ar.bits.len, rlen) @[CLINT.scala 72:16]
    rlen <= _rlen_T_1 @[CLINT.scala 72:10]
    node _rsize_T = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 52:35]
    node _rsize_T_1 = mux(_rsize_T, io.in.ar.bits.size, rsize) @[CLINT.scala 73:17]
    rsize <= _rsize_T_1 @[CLINT.scala 73:11]
    node _rburst_T = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 52:35]
    node _rburst_T_1 = mux(_rburst_T, io.in.ar.bits.burst, rburst) @[CLINT.scala 74:17]
    rburst <= _rburst_T_1 @[CLINT.scala 74:11]
    node _rcnt_T = eq(rcnt, UInt<8>("hff")) @[CLINT.scala 75:20]
    node _rcnt_T_1 = bits(rlast, 0, 0) @[CLINT.scala 75:38]
    node _rcnt_T_2 = or(_rcnt_T, _rcnt_T_1) @[CLINT.scala 75:29]
    node _rcnt_T_3 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 52:35]
    node _rcnt_T_4 = or(_rcnt_T_2, _rcnt_T_3) @[CLINT.scala 75:45]
    node _rcnt_T_5 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 52:35]
    node _rcnt_T_6 = add(rcnt, UInt<1>("h1")) @[CLINT.scala 76:33]
    node _rcnt_T_7 = tail(_rcnt_T_6, 1) @[CLINT.scala 76:33]
    node _rcnt_T_8 = mux(_rcnt_T_5, _rcnt_T_7, rcnt) @[CLINT.scala 76:14]
    node _rcnt_T_9 = mux(_rcnt_T_4, UInt<1>("h0"), _rcnt_T_8) @[CLINT.scala 75:14]
    rcnt <= _rcnt_T_9 @[CLINT.scala 75:9]
    node _beatcnt_T = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 52:35]
    node _beatcnt_T_1 = dshr(io.in.ar.bits.addr, io.in.ar.bits.size) @[CLINT.scala 77:52]
    node _beatcnt_T_2 = and(_beatcnt_T_1, io.in.ar.bits.len) @[CLINT.scala 77:75]
    node _beatcnt_T_3 = eq(beatcnt, UInt<8>("hff")) @[CLINT.scala 78:26]
    node _beatcnt_T_4 = eq(beatcnt, rlen) @[CLINT.scala 78:46]
    node _beatcnt_T_5 = or(_beatcnt_T_3, _beatcnt_T_4) @[CLINT.scala 78:36]
    node _beatcnt_T_6 = neq(rstate, UInt<1>("h0")) @[CLINT.scala 79:25]
    node _beatcnt_T_7 = add(beatcnt, UInt<1>("h1")) @[CLINT.scala 79:43]
    node _beatcnt_T_8 = tail(_beatcnt_T_7, 1) @[CLINT.scala 79:43]
    node _beatcnt_T_9 = mux(_beatcnt_T_6, _beatcnt_T_8, UInt<1>("h0")) @[CLINT.scala 79:17]
    node _beatcnt_T_10 = mux(_beatcnt_T_5, UInt<1>("h0"), _beatcnt_T_9) @[CLINT.scala 78:17]
    node _beatcnt_T_11 = mux(_beatcnt_T, _beatcnt_T_2, _beatcnt_T_10) @[CLINT.scala 77:17]
    beatcnt <= _beatcnt_T_11 @[CLINT.scala 77:12]
    node _rlast_T = eq(rcnt, rlen) @[CLINT.scala 81:18]
    node _rlast_T_1 = and(io.in.r.ready, io.in.r.valid) @[Decoupled.scala 52:35]
    node _rlast_T_2 = and(_rlast_T, _rlast_T_1) @[CLINT.scala 81:27]
    rlast <= _rlast_T_2 @[CLINT.scala 81:10]
    io.in.r.bits.last <= rlast @[CLINT.scala 82:23]
    reg wid : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[CLINT.scala 87:20]
    reg waddr : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CLINT.scala 88:24]
    reg wlen : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[CLINT.scala 89:21]
    reg wcnt : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[CLINT.scala 90:23]
    reg wsize : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[CLINT.scala 91:24]
    node _wid_T = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 52:35]
    node _wid_T_1 = mux(_wid_T, io.in.aw.bits.id, UInt<1>("h0")) @[CLINT.scala 93:15]
    wid <= _wid_T_1 @[CLINT.scala 93:9]
    node _wlen_T = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 52:35]
    node _wlen_T_1 = mux(_wlen_T, io.in.aw.bits.len, wlen) @[CLINT.scala 94:14]
    wlen <= _wlen_T_1 @[CLINT.scala 94:9]
    node _wsize_T = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 52:35]
    node _wsize_T_1 = mux(_wsize_T, io.in.aw.bits.size, wsize) @[CLINT.scala 95:15]
    wsize <= _wsize_T_1 @[CLINT.scala 95:10]
    node _waddr_T = bits(wlast, 0, 0) @[CLINT.scala 96:22]
    node _waddr_T_1 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 52:35]
    node _waddr_T_2 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 52:35]
    node _waddr_T_3 = and(_waddr_T_1, _waddr_T_2) @[CLINT.scala 97:30]
    node _waddr_T_4 = eq(wstate, UInt<1>("h0")) @[CLINT.scala 97:56]
    node _waddr_T_5 = and(_waddr_T_3, _waddr_T_4) @[CLINT.scala 97:46]
    node _waddr_T_6 = dshl(UInt<32>("h1"), io.in.aw.bits.size) @[CLINT.scala 97:97]
    node _waddr_T_7 = add(io.in.aw.bits.addr, _waddr_T_6) @[CLINT.scala 97:86]
    node _waddr_T_8 = tail(_waddr_T_7, 1) @[CLINT.scala 97:86]
    node _waddr_T_9 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 52:35]
    node _waddr_T_10 = dshl(UInt<32>("h1"), wsize) @[CLINT.scala 98:46]
    node _waddr_T_11 = add(waddr, _waddr_T_10) @[CLINT.scala 98:35]
    node _waddr_T_12 = tail(_waddr_T_11, 1) @[CLINT.scala 98:35]
    node _waddr_T_13 = mux(_waddr_T_9, _waddr_T_12, waddr) @[CLINT.scala 98:15]
    node _waddr_T_14 = mux(_waddr_T_5, _waddr_T_8, _waddr_T_13) @[CLINT.scala 97:15]
    node _waddr_T_15 = mux(_waddr_T, UInt<1>("h0"), _waddr_T_14) @[CLINT.scala 96:15]
    waddr <= _waddr_T_15 @[CLINT.scala 96:10]
    node _wcnt_T = eq(wcnt, UInt<8>("hff")) @[CLINT.scala 99:20]
    node _wcnt_T_1 = bits(wlast, 0, 0) @[CLINT.scala 99:38]
    node _wcnt_T_2 = or(_wcnt_T, _wcnt_T_1) @[CLINT.scala 99:29]
    node _wcnt_T_3 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 52:35]
    node _wcnt_T_4 = or(_wcnt_T_2, _wcnt_T_3) @[CLINT.scala 99:45]
    node _wcnt_T_5 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 52:35]
    node _wcnt_T_6 = add(wcnt, UInt<1>("h1")) @[CLINT.scala 100:33]
    node _wcnt_T_7 = tail(_wcnt_T_6, 1) @[CLINT.scala 100:33]
    node _wcnt_T_8 = mux(_wcnt_T_5, _wcnt_T_7, wcnt) @[CLINT.scala 100:14]
    node _wcnt_T_9 = mux(_wcnt_T_4, UInt<1>("h0"), _wcnt_T_8) @[CLINT.scala 99:14]
    wcnt <= _wcnt_T_9 @[CLINT.scala 99:9]
    node _io_in_ar_ready_T = eq(rstate, UInt<1>("h0")) @[CLINT.scala 103:31]
    node _io_in_ar_ready_T_1 = bits(rlast, 0, 0) @[CLINT.scala 103:53]
    node _io_in_ar_ready_T_2 = neq(rstate, UInt<1>("h0")) @[CLINT.scala 103:69]
    node _io_in_ar_ready_T_3 = and(_io_in_ar_ready_T_1, _io_in_ar_ready_T_2) @[CLINT.scala 103:60]
    node _io_in_ar_ready_T_4 = or(_io_in_ar_ready_T, _io_in_ar_ready_T_3) @[CLINT.scala 103:43]
    io.in.ar.ready <= _io_in_ar_ready_T_4 @[CLINT.scala 103:20]
    node _io_in_r_valid_T = neq(rstate, UInt<1>("h0")) @[CLINT.scala 104:31]
    io.in.r.valid <= _io_in_r_valid_T @[CLINT.scala 104:20]
    node _io_in_aw_ready_T = eq(wstate, UInt<1>("h0")) @[CLINT.scala 106:31]
    io.in.aw.ready <= _io_in_aw_ready_T @[CLINT.scala 106:20]
    node _io_in_w_ready_T = eq(wstate, UInt<1>("h0")) @[CLINT.scala 107:31]
    io.in.w.ready <= _io_in_w_ready_T @[CLINT.scala 107:20]
    io.in.r.bits.id <= rid @[CLINT.scala 108:21]
    io.in.r.bits.resp <= UInt<1>("h0") @[CLINT.scala 109:23]
    io.in.b.bits.id <= wid @[CLINT.scala 110:21]
    io.in.b.bits.resp <= UInt<1>("h0") @[CLINT.scala 111:23]
    node _io_in_b_valid_T = eq(wstate, UInt<1>("h1")) @[CLINT.scala 112:30]
    io.in.b.valid <= _io_in_b_valid_T @[CLINT.scala 112:19]
    wire mask : UInt<64> @[CLINT.scala 117:20]
    node _mask_T = eq(io.in.w.bits.strb, UInt<1>("h1")) @[CLINT.scala 118:35]
    node _mask_T_1 = mux(UInt<1>("h1"), UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node _mask_T_2 = eq(io.in.w.bits.strb, UInt<2>("h3")) @[CLINT.scala 119:35]
    node _mask_T_3 = mux(UInt<1>("h1"), UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
    node _mask_T_4 = eq(io.in.w.bits.strb, UInt<4>("hf")) @[CLINT.scala 120:35]
    node _mask_T_5 = mux(UInt<1>("h1"), UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 77:12]
    node _mask_T_6 = eq(io.in.w.bits.strb, UInt<8>("hff")) @[CLINT.scala 121:35]
    node _mask_T_7 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 77:12]
    node _mask_T_8 = mux(_mask_T_6, _mask_T_7, UInt<1>("h0")) @[CLINT.scala 121:16]
    node _mask_T_9 = mux(_mask_T_4, _mask_T_5, _mask_T_8) @[CLINT.scala 120:16]
    node _mask_T_10 = mux(_mask_T_2, _mask_T_3, _mask_T_9) @[CLINT.scala 119:16]
    node _mask_T_11 = mux(_mask_T, _mask_T_1, _mask_T_10) @[CLINT.scala 118:16]
    mask <= _mask_T_11 @[CLINT.scala 118:10]
    wire clint_waddr : UInt<32> @[CLINT.scala 122:27]
    node _clint_waddr_T = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 52:35]
    node _clint_waddr_T_1 = mux(_clint_waddr_T, io.in.aw.bits.addr, waddr) @[CLINT.scala 123:23]
    clint_waddr <= _clint_waddr_T_1 @[CLINT.scala 123:17]
    node _mtimecmp_T = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 52:35]
    node _mtimecmp_T_1 = eq(io.in.aw.bits.addr, MTIMECMP) @[CLINT.scala 124:57]
    node _mtimecmp_T_2 = and(_mtimecmp_T, _mtimecmp_T_1) @[CLINT.scala 124:34]
    node _mtimecmp_T_3 = and(io.in.w.bits.data, mask) @[CLINT.scala 124:89]
    node _mtimecmp_T_4 = mux(_mtimecmp_T_2, _mtimecmp_T_3, mtimecmp) @[CLINT.scala 124:20]
    mtimecmp <= _mtimecmp_T_4 @[CLINT.scala 124:14]
    node _mtime_T = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 52:35]
    node _mtime_T_1 = eq(io.in.aw.bits.addr, MTIME) @[CLINT.scala 125:54]
    node _mtime_T_2 = and(_mtime_T, _mtime_T_1) @[CLINT.scala 125:31]
    node _mtime_T_3 = and(io.in.w.bits.data, mask) @[CLINT.scala 125:83]
    node _mtime_T_4 = bits(io.en_mtip, 0, 0) @[CLINT.scala 126:30]
    node _mtime_T_5 = not(_mtime_T_4) @[CLINT.scala 126:18]
    node _mtime_T_6 = eq(cnt, UInt<1>("h0")) @[CLINT.scala 127:22]
    node _mtime_T_7 = add(mtime, UInt<1>("h1")) @[CLINT.scala 127:46]
    node _mtime_T_8 = tail(_mtime_T_7, 1) @[CLINT.scala 127:46]
    node _mtime_T_9 = mux(_mtime_T_6, _mtime_T_8, mtime) @[CLINT.scala 127:17]
    node _mtime_T_10 = mux(_mtime_T_5, UInt<1>("h0"), _mtime_T_9) @[CLINT.scala 126:17]
    node _mtime_T_11 = mux(_mtime_T_2, _mtime_T_3, _mtime_T_10) @[CLINT.scala 125:17]
    mtime <= _mtime_T_11 @[CLINT.scala 125:11]
    node _io_in_r_bits_data_T = eq(raddr, MTIMECMP) @[CLINT.scala 130:38]
    node _io_in_r_bits_data_T_1 = eq(raddr, MTIME) @[CLINT.scala 131:35]
    node _io_in_r_bits_data_T_2 = mux(_io_in_r_bits_data_T_1, mtime, UInt<1>("h0")) @[CLINT.scala 131:28]
    node _io_in_r_bits_data_T_3 = mux(_io_in_r_bits_data_T, mtimecmp, _io_in_r_bits_data_T_2) @[CLINT.scala 130:31]
    io.in.r.bits.data <= _io_in_r_bits_data_T_3 @[CLINT.scala 130:23]
    node _io_skip_T = geq(io.in.aw.bits.addr, UInt<30>("h20000000")) @[CLINT.scala 136:35]
    node _io_skip_T_1 = leq(io.in.aw.bits.addr, BOUND_ADDRESS) @[CLINT.scala 136:74]
    node _io_skip_T_2 = and(_io_skip_T, _io_skip_T_1) @[CLINT.scala 136:52]
    node _io_skip_T_3 = geq(io.in.ar.bits.addr, UInt<30>("h20000000")) @[CLINT.scala 136:116]
    node _io_skip_T_4 = leq(io.in.ar.bits.addr, BOUND_ADDRESS) @[CLINT.scala 136:155]
    node _io_skip_T_5 = and(_io_skip_T_3, _io_skip_T_4) @[CLINT.scala 136:133]
    node _io_skip_T_6 = or(_io_skip_T_2, _io_skip_T_5) @[CLINT.scala 136:93]
    io.skip <= _io_skip_T_6 @[CLINT.scala 136:12]

  module ScoreBoard :
    input clock : Clock
    input reset : Reset
    output io : { ID : { flip lookidx1 : UInt<5>, flip lookidx2 : UInt<5>, flip setidx : UInt<5>, isBusy : UInt<1>}, WB : { flip clearidx : UInt<5>}, flip flush : UInt<1>}

    reg busy : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[ScoreBoard.scala 22:21]
    node _busy_T = bits(io.flush, 0, 0) @[ScoreBoard.scala 26:24]
    node _busy_T_1 = dshl(UInt<32>("h1"), io.WB.clearidx) @[ScoreBoard.scala 24:38]
    node _busy_T_2 = bits(_busy_T_1, 31, 0) @[ScoreBoard.scala 24:45]
    node _busy_T_3 = not(_busy_T_2) @[ScoreBoard.scala 26:48]
    node _busy_T_4 = and(busy, _busy_T_3) @[ScoreBoard.scala 26:46]
    node _busy_T_5 = dshl(UInt<32>("h1"), io.ID.setidx) @[ScoreBoard.scala 24:38]
    node _busy_T_6 = bits(_busy_T_5, 31, 0) @[ScoreBoard.scala 24:45]
    node _busy_T_7 = or(_busy_T_4, _busy_T_6) @[ScoreBoard.scala 26:73]
    node _busy_T_8 = bits(_busy_T_7, 31, 1) @[ScoreBoard.scala 26:96]
    node _busy_T_9 = cat(_busy_T_8, UInt<1>("h0")) @[Cat.scala 33:92]
    node _busy_T_10 = mux(_busy_T, UInt<1>("h0"), _busy_T_9) @[ScoreBoard.scala 26:14]
    busy <= _busy_T_10 @[ScoreBoard.scala 26:9]
    node _io_ID_isBusy_T = dshr(busy, io.ID.lookidx1) @[ScoreBoard.scala 27:23]
    node _io_ID_isBusy_T_1 = bits(_io_ID_isBusy_T, 0, 0) @[ScoreBoard.scala 27:23]
    node _io_ID_isBusy_T_2 = dshr(busy, io.ID.lookidx2) @[ScoreBoard.scala 27:44]
    node _io_ID_isBusy_T_3 = bits(_io_ID_isBusy_T_2, 0, 0) @[ScoreBoard.scala 27:44]
    node _io_ID_isBusy_T_4 = or(_io_ID_isBusy_T_1, _io_ID_isBusy_T_3) @[ScoreBoard.scala 27:39]
    io.ID.isBusy <= _io_ID_isBusy_T_4 @[ScoreBoard.scala 27:17]

  module LFSR_8 :
    input clock : Clock
    input reset : Reset
    output io : { flip en : UInt<1>, out : UInt<8>}

    reg x : UInt<8>, clock with :
      reset => (reset, UInt<8>("h1")) @[LFSR_8.scala 10:16]
    when io.en : @[LFSR_8.scala 11:14]
      node _x_T = bits(x, 4, 4) @[LFSR_8.scala 12:14]
      node _x_T_1 = bits(x, 3, 3) @[LFSR_8.scala 12:19]
      node _x_T_2 = xor(_x_T, _x_T_1) @[LFSR_8.scala 12:17]
      node _x_T_3 = bits(x, 2, 2) @[LFSR_8.scala 12:24]
      node _x_T_4 = xor(_x_T_2, _x_T_3) @[LFSR_8.scala 12:22]
      node _x_T_5 = bits(x, 0, 0) @[LFSR_8.scala 12:29]
      node _x_T_6 = xor(_x_T_4, _x_T_5) @[LFSR_8.scala 12:27]
      node _x_T_7 = bits(x, 7, 1) @[LFSR_8.scala 12:34]
      node _x_T_8 = cat(_x_T_6, _x_T_7) @[Cat.scala 33:92]
      x <= _x_T_8 @[LFSR_8.scala 12:6]
    io.out <= x @[LFSR_8.scala 14:9]

  module ICache :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}}, flip id : UInt<1>, mem : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>, last : UInt<1>, id : UInt<4>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>, id : UInt<4>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<4>}}}, flip ram : { valid : UInt<1>, flip ready : UInt<1>, bits : { Q0 : UInt<128>, Q1 : UInt<128>, flip CEN : UInt<1>, flip WEN : UInt<1>, flip BWEN : UInt<128>, flip A : UInt<7>, flip D : UInt<128>, flip WAY : UInt<1>}}, flip flush : UInt<1>, hitrate : UInt<64>}

    wire _cache_tag_WIRE : UInt<54>[2] @[icache.scala 30:34]
    _cache_tag_WIRE[0] <= UInt<54>("h0") @[icache.scala 30:34]
    _cache_tag_WIRE[1] <= UInt<54>("h0") @[icache.scala 30:34]
    reg cache_tag : UInt<54>[2], clock with :
      reset => (reset, _cache_tag_WIRE) @[icache.scala 30:26]
    wire _valid_WIRE : UInt<1>[2] @[icache.scala 31:53]
    _valid_WIRE[0] <= UInt<1>("h0") @[icache.scala 31:53]
    _valid_WIRE[1] <= UInt<1>("h0") @[icache.scala 31:53]
    wire _valid_WIRE_1 : UInt<1>[2] @[icache.scala 31:53]
    _valid_WIRE_1[0] <= UInt<1>("h0") @[icache.scala 31:53]
    _valid_WIRE_1[1] <= UInt<1>("h0") @[icache.scala 31:53]
    wire _valid_WIRE_2 : UInt<1>[2][2] @[icache.scala 31:30]
    _valid_WIRE_2[0] <= _valid_WIRE @[icache.scala 31:30]
    _valid_WIRE_2[1] <= _valid_WIRE_1 @[icache.scala 31:30]
    reg valid : UInt<1>[2][2], clock with :
      reset => (reset, _valid_WIRE_2) @[icache.scala 31:22]
    wire _dirty_WIRE : UInt<1>[2] @[icache.scala 32:53]
    _dirty_WIRE[0] <= UInt<1>("h0") @[icache.scala 32:53]
    _dirty_WIRE[1] <= UInt<1>("h0") @[icache.scala 32:53]
    wire _dirty_WIRE_1 : UInt<1>[2] @[icache.scala 32:53]
    _dirty_WIRE_1[0] <= UInt<1>("h0") @[icache.scala 32:53]
    _dirty_WIRE_1[1] <= UInt<1>("h0") @[icache.scala 32:53]
    wire _dirty_WIRE_2 : UInt<1>[2][2] @[icache.scala 32:30]
    _dirty_WIRE_2[0] <= _dirty_WIRE @[icache.scala 32:30]
    _dirty_WIRE_2[1] <= _dirty_WIRE_1 @[icache.scala 32:30]
    reg dirty : UInt<1>[2][2], clock with :
      reset => (reset, _dirty_WIRE_2) @[icache.scala 32:22]
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[icache.scala 36:22]
    node req = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 52:35]
    reg addr : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[icache.scala 39:21]
    reg uncache : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[icache.scala 40:24]
    node tag = bits(addr, 31, 5) @[icache.scala 41:17]
    node _offset_T = bits(addr, 3, 0) @[icache.scala 42:20]
    node offset = shl(_offset_T, 3) @[icache.scala 42:42]
    node idx = bits(addr, 4, 4) @[icache.scala 43:17]
    node _hit_T = bits(cache_tag[idx], 26, 0) @[icache.scala 50:33]
    node _hit_T_1 = eq(_hit_T, tag) @[icache.scala 50:44]
    node _hit_T_2 = bits(valid[idx][0], 0, 0) @[icache.scala 50:70]
    node _hit_T_3 = and(_hit_T_1, _hit_T_2) @[icache.scala 50:53]
    node _hit_T_4 = bits(cache_tag[idx], 53, 27) @[icache.scala 51:33]
    node _hit_T_5 = eq(_hit_T_4, tag) @[icache.scala 51:44]
    node _hit_T_6 = bits(valid[idx][1], 0, 0) @[icache.scala 51:70]
    node _hit_T_7 = and(_hit_T_5, _hit_T_6) @[icache.scala 51:53]
    node _hit_T_8 = mux(_hit_T_7, UInt<2>("h1"), UInt<2>("h3")) @[icache.scala 51:16]
    node hit = mux(_hit_T_3, UInt<2>("h0"), _hit_T_8) @[icache.scala 50:16]
    node hit_way = bits(hit, 0, 0) @[icache.scala 52:21]
    node _miss_T = bits(hit, 1, 1) @[icache.scala 53:17]
    node _miss_T_1 = bits(_miss_T, 0, 0) @[icache.scala 53:21]
    node miss = or(_miss_T_1, uncache) @[icache.scala 53:29]
    inst lfsr8 of LFSR_8 @[icache.scala 54:21]
    lfsr8.clock <= clock
    lfsr8.reset <= reset
    node _lfsr8_io_en_T = eq(state, UInt<2>("h2")) @[icache.scala 55:25]
    lfsr8.io.en <= _lfsr8_io_en_T @[icache.scala 55:15]
    node _way_T = bits(lfsr8.io.out, 0, 0) @[icache.scala 56:35]
    reg way : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when miss : @[Reg.scala 36:18]
      way <= _way_T @[Reg.scala 36:22]
    reg cnt : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[icache.scala 58:20]
    node _state_T = bits(io.flush, 0, 0) @[icache.scala 61:32]
    node _state_T_1 = mux(req, UInt<2>("h1"), UInt<2>("h0")) @[icache.scala 61:49]
    node _state_T_2 = mux(_state_T, UInt<2>("h0"), _state_T_1) @[icache.scala 61:22]
    node _state_T_3 = bits(io.flush, 0, 0) @[icache.scala 62:32]
    node _state_T_4 = mux(req, UInt<2>("h1"), UInt<2>("h0")) @[icache.scala 63:22]
    node _state_T_5 = mux(miss, UInt<2>("h2"), _state_T_4) @[icache.scala 62:49]
    node _state_T_6 = mux(_state_T_3, UInt<2>("h0"), _state_T_5) @[icache.scala 62:22]
    node _state_T_7 = bits(io.flush, 0, 0) @[icache.scala 64:32]
    node _state_T_8 = and(io.mem.ar.ready, io.mem.ar.valid) @[Decoupled.scala 52:35]
    node _state_T_9 = mux(_state_T_8, UInt<2>("h3"), UInt<2>("h2")) @[icache.scala 64:49]
    node _state_T_10 = mux(_state_T_7, UInt<2>("h0"), _state_T_9) @[icache.scala 64:22]
    node _state_T_11 = bits(io.flush, 0, 0) @[icache.scala 65:32]
    node _state_T_12 = and(io.mem.r.ready, io.mem.r.valid) @[Decoupled.scala 52:35]
    node _state_T_13 = bits(io.mem.r.bits.last, 0, 0) @[icache.scala 65:86]
    node _state_T_14 = and(_state_T_12, _state_T_13) @[icache.scala 65:64]
    node _state_T_15 = mux(_state_T_14, UInt<2>("h0"), UInt<2>("h3")) @[icache.scala 65:49]
    node _state_T_16 = mux(_state_T_11, UInt<2>("h0"), _state_T_15) @[icache.scala 65:22]
    node _state_T_17 = eq(UInt<2>("h1"), state) @[Mux.scala 81:61]
    node _state_T_18 = mux(_state_T_17, _state_T_6, _state_T_2) @[Mux.scala 81:58]
    node _state_T_19 = eq(UInt<2>("h2"), state) @[Mux.scala 81:61]
    node _state_T_20 = mux(_state_T_19, _state_T_10, _state_T_18) @[Mux.scala 81:58]
    node _state_T_21 = eq(UInt<2>("h3"), state) @[Mux.scala 81:61]
    node _state_T_22 = mux(_state_T_21, _state_T_16, _state_T_20) @[Mux.scala 81:58]
    state <= _state_T_22 @[icache.scala 60:9]
    node _T = or(way, UInt<1>("h0"))
    node _T_1 = bits(_T, 0, 0)
    node _valid_T = eq(state, UInt<2>("h2")) @[icache.scala 68:32]
    node _valid_T_1 = eq(uncache, UInt<1>("h0")) @[icache.scala 68:46]
    node _valid_T_2 = and(_valid_T, _valid_T_1) @[icache.scala 68:43]
    node _valid_T_3 = or(way, UInt<1>("h0"))
    node _valid_T_4 = bits(_valid_T_3, 0, 0)
    node _valid_T_5 = mux(_valid_T_2, UInt<1>("h1"), valid[idx][_valid_T_4]) @[icache.scala 68:25]
    valid[idx][_T_1] <= _valid_T_5 @[icache.scala 68:19]
    node _cache_tag_T = eq(state, UInt<2>("h2")) @[icache.scala 69:31]
    node _cache_tag_T_1 = eq(uncache, UInt<1>("h0")) @[icache.scala 69:45]
    node _cache_tag_T_2 = and(_cache_tag_T, _cache_tag_T_1) @[icache.scala 69:42]
    node _cache_tag_T_3 = eq(way, UInt<1>("h0")) @[icache.scala 69:63]
    node _cache_tag_T_4 = bits(cache_tag[idx], 53, 27) @[icache.scala 69:90]
    node _cache_tag_T_5 = cat(_cache_tag_T_4, tag) @[Cat.scala 33:92]
    node _cache_tag_T_6 = bits(cache_tag[idx], 26, 0) @[icache.scala 69:131]
    node _cache_tag_T_7 = cat(tag, _cache_tag_T_6) @[Cat.scala 33:92]
    node _cache_tag_T_8 = mux(_cache_tag_T_3, _cache_tag_T_5, _cache_tag_T_7) @[icache.scala 69:58]
    node _cache_tag_T_9 = mux(_cache_tag_T_2, _cache_tag_T_8, cache_tag[idx]) @[icache.scala 69:24]
    cache_tag[idx] <= _cache_tag_T_9 @[icache.scala 69:18]
    node _addr_T = eq(state, UInt<2>("h0")) @[icache.scala 71:26]
    node _addr_T_1 = and(_addr_T, req) @[icache.scala 71:38]
    node _addr_T_2 = eq(state, UInt<2>("h1")) @[icache.scala 71:57]
    node _addr_T_3 = and(_addr_T_2, req) @[icache.scala 71:71]
    node _addr_T_4 = not(miss) @[icache.scala 71:82]
    node _addr_T_5 = and(_addr_T_3, _addr_T_4) @[icache.scala 71:78]
    node _addr_T_6 = or(_addr_T_1, _addr_T_5) @[icache.scala 71:46]
    node _addr_T_7 = mux(_addr_T_6, io.in.ar.bits.addr, addr) @[icache.scala 71:17]
    addr <= _addr_T_7 @[icache.scala 71:11]
    node _uncache_T = eq(state, UInt<2>("h0")) @[icache.scala 72:26]
    node _uncache_T_1 = and(_uncache_T, req) @[icache.scala 72:38]
    node _uncache_T_2 = eq(state, UInt<2>("h1")) @[icache.scala 72:57]
    node _uncache_T_3 = and(_uncache_T_2, req) @[icache.scala 72:71]
    node _uncache_T_4 = not(miss) @[icache.scala 72:82]
    node _uncache_T_5 = and(_uncache_T_3, _uncache_T_4) @[icache.scala 72:78]
    node _uncache_T_6 = or(_uncache_T_1, _uncache_T_5) @[icache.scala 72:46]
    node _uncache_T_7 = geq(io.in.ar.bits.addr, UInt<32>("ha0000000")) @[icache.scala 72:110]
    node _uncache_T_8 = mux(_uncache_T_6, _uncache_T_7, uncache) @[icache.scala 72:17]
    uncache <= _uncache_T_8 @[icache.scala 72:11]
    node _cnt_T = eq(state, UInt<2>("h2")) @[icache.scala 76:20]
    node _cnt_T_1 = bits(addr, 3, 3) @[icache.scala 76:35]
    node _cnt_T_2 = and(io.mem.r.ready, io.mem.r.valid) @[Decoupled.scala 52:35]
    node _cnt_T_3 = not(cnt) @[icache.scala 77:28]
    node _cnt_T_4 = mux(_cnt_T_2, _cnt_T_3, cnt) @[icache.scala 77:13]
    node _cnt_T_5 = mux(_cnt_T, _cnt_T_1, _cnt_T_4) @[icache.scala 76:13]
    cnt <= _cnt_T_5 @[icache.scala 76:7]
    io.ram.ready <= UInt<1>("h1") @[icache.scala 79:16]
    node _en_w_T = eq(state, UInt<2>("h3")) @[icache.scala 81:20]
    node _en_w_T_1 = and(io.mem.r.ready, io.mem.r.valid) @[Decoupled.scala 52:35]
    node en_w = and(_en_w_T, _en_w_T_1) @[icache.scala 81:35]
    node _io_ram_bits_CEN_T = eq(state, UInt<2>("h0")) @[icache.scala 82:30]
    node _io_ram_bits_CEN_T_1 = eq(state, UInt<2>("h1")) @[icache.scala 82:52]
    node _io_ram_bits_CEN_T_2 = and(_io_ram_bits_CEN_T_1, req) @[icache.scala 82:65]
    node _io_ram_bits_CEN_T_3 = or(_io_ram_bits_CEN_T, _io_ram_bits_CEN_T_2) @[icache.scala 82:42]
    node _io_ram_bits_CEN_T_4 = eq(state, UInt<2>("h3")) @[icache.scala 82:82]
    node _io_ram_bits_CEN_T_5 = or(_io_ram_bits_CEN_T_3, _io_ram_bits_CEN_T_4) @[icache.scala 82:73]
    node _io_ram_bits_CEN_T_6 = not(_io_ram_bits_CEN_T_5) @[icache.scala 82:21]
    io.ram.bits.CEN <= _io_ram_bits_CEN_T_6 @[icache.scala 82:18]
    node _io_ram_bits_WEN_T = not(en_w) @[icache.scala 83:21]
    io.ram.bits.WEN <= _io_ram_bits_WEN_T @[icache.scala 83:18]
    node _io_ram_bits_BWEN_T = dshl(cnt, UInt<3>("h6")) @[icache.scala 84:90]
    node _io_ram_bits_BWEN_T_1 = dshl(UInt<128>("hffffffffffffffff"), _io_ram_bits_BWEN_T) @[icache.scala 84:82]
    node _io_ram_bits_BWEN_T_2 = not(_io_ram_bits_BWEN_T_1) @[icache.scala 84:32]
    node _io_ram_bits_BWEN_T_3 = not(UInt<128>("h0")) @[icache.scala 84:100]
    node _io_ram_bits_BWEN_T_4 = mux(en_w, _io_ram_bits_BWEN_T_2, _io_ram_bits_BWEN_T_3) @[icache.scala 84:25]
    io.ram.bits.BWEN <= _io_ram_bits_BWEN_T_4 @[icache.scala 84:19]
    node _io_ram_bits_A_T = bits(io.in.ar.bits.addr, 4, 4) @[icache.scala 85:50]
    node _io_ram_bits_A_T_1 = mux(en_w, idx, _io_ram_bits_A_T) @[icache.scala 85:22]
    io.ram.bits.A <= _io_ram_bits_A_T_1 @[icache.scala 85:16]
    node _io_ram_bits_D_T = cat(UInt<64>("h0"), io.mem.r.bits.data) @[Cat.scala 33:92]
    node _io_ram_bits_D_T_1 = dshl(cnt, UInt<3>("h6")) @[icache.scala 86:70]
    node _io_ram_bits_D_T_2 = dshl(_io_ram_bits_D_T, _io_ram_bits_D_T_1) @[icache.scala 86:62]
    node _io_ram_bits_D_T_3 = mux(en_w, _io_ram_bits_D_T_2, UInt<1>("h0")) @[icache.scala 86:22]
    io.ram.bits.D <= _io_ram_bits_D_T_3 @[icache.scala 86:16]
    io.ram.bits.WAY <= way @[icache.scala 87:18]
    reg flag : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[icache.scala 89:20]
    reg rdata : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[icache.scala 90:21]
    node _flag_T = eq(state, UInt<2>("h0")) @[icache.scala 91:21]
    node _flag_T_1 = eq(state, UInt<2>("h3")) @[icache.scala 92:22]
    node _flag_T_2 = and(io.mem.r.ready, io.mem.r.valid) @[Decoupled.scala 52:35]
    node _flag_T_3 = and(_flag_T_1, _flag_T_2) @[icache.scala 92:37]
    node _flag_T_4 = mux(_flag_T_3, UInt<1>("h0"), flag) @[icache.scala 92:14]
    node _flag_T_5 = mux(_flag_T, UInt<1>("h1"), _flag_T_4) @[icache.scala 91:14]
    flag <= _flag_T_5 @[icache.scala 91:8]
    node _rdata_T = eq(state, UInt<2>("h3")) @[icache.scala 93:22]
    node _rdata_T_1 = and(io.mem.r.ready, io.mem.r.valid) @[Decoupled.scala 52:35]
    node _rdata_T_2 = and(_rdata_T, _rdata_T_1) @[icache.scala 93:37]
    node _rdata_T_3 = bits(flag, 0, 0) @[icache.scala 93:62]
    node _rdata_T_4 = and(_rdata_T_2, _rdata_T_3) @[icache.scala 93:54]
    node _rdata_T_5 = mux(_rdata_T_4, io.mem.r.bits.data, rdata) @[icache.scala 93:14]
    rdata <= _rdata_T_5 @[icache.scala 93:9]
    node _io_mem_ar_bits_addr_T = not(UInt<32>("h0")) @[icache.scala 95:35]
    node _io_mem_ar_bits_addr_T_1 = dshl(_io_mem_ar_bits_addr_T, UInt<2>("h3")) @[icache.scala 95:47]
    node _io_mem_ar_bits_addr_T_2 = and(addr, _io_mem_ar_bits_addr_T_1) @[icache.scala 95:31]
    io.mem.ar.bits.addr <= _io_mem_ar_bits_addr_T_2 @[icache.scala 95:23]
    node _io_mem_ar_valid_T = eq(state, UInt<2>("h2")) @[icache.scala 96:28]
    io.mem.ar.valid <= _io_mem_ar_valid_T @[icache.scala 96:19]
    node _io_mem_ar_bits_len_T = mux(uncache, UInt<1>("h0"), UInt<1>("h1")) @[icache.scala 97:28]
    io.mem.ar.bits.len <= _io_mem_ar_bits_len_T @[icache.scala 97:22]
    io.mem.ar.bits.size <= UInt<2>("h3") @[icache.scala 98:23]
    io.mem.ar.bits.burst <= UInt<2>("h2") @[icache.scala 99:24]
    io.mem.ar.bits.id <= io.id @[icache.scala 100:21]
    io.mem.r.ready <= UInt<1>("h1") @[icache.scala 102:18]
    io.mem.aw.bits.addr <= UInt<1>("h0") @[icache.scala 104:23]
    io.mem.aw.bits.len <= UInt<1>("h1") @[icache.scala 105:22]
    io.mem.aw.bits.size <= UInt<2>("h3") @[icache.scala 106:23]
    io.mem.aw.valid <= UInt<1>("h0") @[icache.scala 107:19]
    io.mem.aw.bits.id <= io.id @[icache.scala 108:21]
    io.mem.aw.bits.burst <= UInt<1>("h0") @[icache.scala 109:24]
    io.mem.w.bits.id <= io.id @[icache.scala 111:20]
    io.mem.w.bits.data <= UInt<1>("h0") @[icache.scala 112:22]
    node _io_mem_w_bits_strb_T = not(UInt<8>("h0")) @[icache.scala 113:25]
    io.mem.w.bits.strb <= _io_mem_w_bits_strb_T @[icache.scala 113:22]
    io.mem.w.bits.last <= UInt<1>("h0") @[icache.scala 114:22]
    io.mem.w.valid <= UInt<1>("h0") @[icache.scala 115:18]
    io.mem.b.ready <= UInt<1>("h0") @[icache.scala 116:18]
    node _io_in_r_bits_data_T = eq(state, UInt<2>("h1")) @[icache.scala 118:36]
    node _io_in_r_bits_data_T_1 = not(miss) @[icache.scala 118:54]
    node _io_in_r_bits_data_T_2 = and(_io_in_r_bits_data_T, _io_in_r_bits_data_T_1) @[icache.scala 118:50]
    node _io_in_r_bits_data_T_3 = dshr(io.ram.bits.Q1, offset) @[icache.scala 120:44]
    node _io_in_r_bits_data_T_4 = bits(_io_in_r_bits_data_T_3, 63, 0) @[icache.scala 120:54]
    node _io_in_r_bits_data_T_5 = dshr(io.ram.bits.Q0, offset) @[icache.scala 121:44]
    node _io_in_r_bits_data_T_6 = bits(_io_in_r_bits_data_T_5, 63, 0) @[icache.scala 121:54]
    node _io_in_r_bits_data_T_7 = mux(hit_way, _io_in_r_bits_data_T_4, _io_in_r_bits_data_T_6) @[icache.scala 119:30]
    node _io_in_r_bits_data_T_8 = eq(state, UInt<2>("h3")) @[icache.scala 122:38]
    node _io_in_r_bits_data_T_9 = and(io.mem.r.ready, io.mem.r.valid) @[Decoupled.scala 52:35]
    node _io_in_r_bits_data_T_10 = and(_io_in_r_bits_data_T_8, _io_in_r_bits_data_T_9) @[icache.scala 122:53]
    node _io_in_r_bits_data_T_11 = bits(io.mem.r.bits.last, 0, 0) @[icache.scala 122:92]
    node _io_in_r_bits_data_T_12 = and(_io_in_r_bits_data_T_10, _io_in_r_bits_data_T_11) @[icache.scala 122:70]
    node _io_in_r_bits_data_T_13 = bits(offset, 5, 0) @[icache.scala 125:46]
    node _io_in_r_bits_data_T_14 = dshr(rdata, _io_in_r_bits_data_T_13) @[icache.scala 125:37]
    node _io_in_r_bits_data_T_15 = mux(uncache, io.mem.r.bits.data, _io_in_r_bits_data_T_14) @[icache.scala 123:32]
    node _io_in_r_bits_data_T_16 = mux(_io_in_r_bits_data_T_12, _io_in_r_bits_data_T_15, UInt<1>("h0")) @[icache.scala 122:30]
    node _io_in_r_bits_data_T_17 = mux(_io_in_r_bits_data_T_2, _io_in_r_bits_data_T_7, _io_in_r_bits_data_T_16) @[icache.scala 118:28]
    io.in.r.bits.data <= _io_in_r_bits_data_T_17 @[icache.scala 118:21]
    node _io_in_ar_ready_T = eq(state, UInt<2>("h0")) @[icache.scala 127:28]
    node _io_in_ar_ready_T_1 = eq(state, UInt<2>("h1")) @[icache.scala 127:50]
    node _io_in_ar_ready_T_2 = not(miss) @[icache.scala 127:68]
    node _io_in_ar_ready_T_3 = and(_io_in_ar_ready_T_1, _io_in_ar_ready_T_2) @[icache.scala 127:64]
    node _io_in_ar_ready_T_4 = or(_io_in_ar_ready_T, _io_in_ar_ready_T_3) @[icache.scala 127:40]
    io.in.ar.ready <= _io_in_ar_ready_T_4 @[icache.scala 127:18]
    node _io_in_r_valid_T = eq(state, UInt<2>("h1")) @[icache.scala 128:29]
    node _io_in_r_valid_T_1 = not(miss) @[icache.scala 128:47]
    node _io_in_r_valid_T_2 = and(_io_in_r_valid_T, _io_in_r_valid_T_1) @[icache.scala 128:43]
    node _io_in_r_valid_T_3 = and(io.mem.r.ready, io.mem.r.valid) @[Decoupled.scala 52:35]
    node _io_in_r_valid_T_4 = bits(io.mem.r.bits.last, 0, 0) @[icache.scala 128:95]
    node _io_in_r_valid_T_5 = and(_io_in_r_valid_T_3, _io_in_r_valid_T_4) @[icache.scala 128:73]
    node _io_in_r_valid_T_6 = or(_io_in_r_valid_T_2, _io_in_r_valid_T_5) @[icache.scala 128:55]
    io.in.r.valid <= _io_in_r_valid_T_6 @[icache.scala 128:17]
    io.in.r.bits.resp <= UInt<1>("h0") @[icache.scala 129:21]
    io.in.b.bits.resp <= UInt<1>("h0") @[icache.scala 130:21]
    io.in.b.valid <= UInt<1>("h0") @[icache.scala 131:17]
    io.in.aw.ready <= UInt<1>("h0") @[icache.scala 132:18]
    io.in.w.ready <= UInt<1>("h0") @[icache.scala 133:17]
    reg hit_num : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[icache.scala 135:22]
    reg inst_num : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[icache.scala 136:23]
    node _hit_num_T = eq(state, UInt<2>("h1")) @[icache.scala 138:25]
    node _hit_num_T_1 = not(miss) @[icache.scala 138:43]
    node _hit_num_T_2 = and(_hit_num_T, _hit_num_T_1) @[icache.scala 138:39]
    node _hit_num_T_3 = add(hit_num, UInt<1>("h1")) @[icache.scala 138:58]
    node _hit_num_T_4 = tail(_hit_num_T_3, 1) @[icache.scala 138:58]
    node _hit_num_T_5 = mux(_hit_num_T_2, _hit_num_T_4, hit_num) @[icache.scala 138:17]
    hit_num <= _hit_num_T_5 @[icache.scala 138:11]
    node _inst_num_T = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 52:35]
    node _inst_num_T_1 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 52:35]
    node _inst_num_T_2 = or(_inst_num_T, _inst_num_T_1) @[icache.scala 139:33]
    node _inst_num_T_3 = add(inst_num, UInt<1>("h1")) @[icache.scala 139:59]
    node _inst_num_T_4 = tail(_inst_num_T_3, 1) @[icache.scala 139:59]
    node _inst_num_T_5 = mux(_inst_num_T_2, _inst_num_T_4, inst_num) @[icache.scala 139:18]
    inst_num <= _inst_num_T_5 @[icache.scala 139:12]
    node _io_hitrate_T = cat(inst_num, hit_num) @[Cat.scala 33:92]
    io.hitrate <= _io_hitrate_T @[icache.scala 141:14]

  extmodule S011HD1P_X32Y2D128_BW :
    output Q : UInt<128>
    input CLK : Clock
    input CEN : UInt<1>
    input WEN : UInt<1>
    input BWEN : UInt<128>
    input A : UInt<6>
    input D : UInt<128>
    defname = S011HD1P_X32Y2D128_BW

  extmodule S011HD1P_X32Y2D128_BW_1 :
    output Q : UInt<128>
    input CLK : Clock
    input CEN : UInt<1>
    input WEN : UInt<1>
    input BWEN : UInt<128>
    input A : UInt<6>
    input D : UInt<128>
    defname = S011HD1P_X32Y2D128_BW

  extmodule S011HD1P_X32Y2D128_BW_2 :
    output Q : UInt<128>
    input CLK : Clock
    input CEN : UInt<1>
    input WEN : UInt<1>
    input BWEN : UInt<128>
    input A : UInt<6>
    input D : UInt<128>
    defname = S011HD1P_X32Y2D128_BW

  extmodule S011HD1P_X32Y2D128_BW_3 :
    output Q : UInt<128>
    input CLK : Clock
    input CEN : UInt<1>
    input WEN : UInt<1>
    input BWEN : UInt<128>
    input A : UInt<6>
    input D : UInt<128>
    defname = S011HD1P_X32Y2D128_BW

  module ICacheRAM :
    input clock : Clock
    input reset : Reset
    output io : { valid : UInt<1>, flip ready : UInt<1>, bits : { Q0 : UInt<128>, Q1 : UInt<128>, flip CEN : UInt<1>, flip WEN : UInt<1>, flip BWEN : UInt<128>, flip A : UInt<7>, flip D : UInt<128>, flip WAY : UInt<1>}}

    inst S011HD1P_X32Y2D128_BW of S011HD1P_X32Y2D128_BW @[CacheRAM.scala 21:18]
    S011HD1P_X32Y2D128_BW.D is invalid
    S011HD1P_X32Y2D128_BW.A is invalid
    S011HD1P_X32Y2D128_BW.BWEN is invalid
    S011HD1P_X32Y2D128_BW.WEN is invalid
    S011HD1P_X32Y2D128_BW.CEN is invalid
    S011HD1P_X32Y2D128_BW.CLK is invalid
    S011HD1P_X32Y2D128_BW.Q is invalid
    inst S011HD1P_X32Y2D128_BW_1 of S011HD1P_X32Y2D128_BW_1 @[CacheRAM.scala 22:18]
    S011HD1P_X32Y2D128_BW_1.D is invalid
    S011HD1P_X32Y2D128_BW_1.A is invalid
    S011HD1P_X32Y2D128_BW_1.BWEN is invalid
    S011HD1P_X32Y2D128_BW_1.WEN is invalid
    S011HD1P_X32Y2D128_BW_1.CEN is invalid
    S011HD1P_X32Y2D128_BW_1.CLK is invalid
    S011HD1P_X32Y2D128_BW_1.Q is invalid
    inst S011HD1P_X32Y2D128_BW_2 of S011HD1P_X32Y2D128_BW_2 @[CacheRAM.scala 23:18]
    S011HD1P_X32Y2D128_BW_2.D is invalid
    S011HD1P_X32Y2D128_BW_2.A is invalid
    S011HD1P_X32Y2D128_BW_2.BWEN is invalid
    S011HD1P_X32Y2D128_BW_2.WEN is invalid
    S011HD1P_X32Y2D128_BW_2.CEN is invalid
    S011HD1P_X32Y2D128_BW_2.CLK is invalid
    S011HD1P_X32Y2D128_BW_2.Q is invalid
    inst S011HD1P_X32Y2D128_BW_3 of S011HD1P_X32Y2D128_BW_3 @[CacheRAM.scala 24:18]
    S011HD1P_X32Y2D128_BW_3.D is invalid
    S011HD1P_X32Y2D128_BW_3.A is invalid
    S011HD1P_X32Y2D128_BW_3.BWEN is invalid
    S011HD1P_X32Y2D128_BW_3.WEN is invalid
    S011HD1P_X32Y2D128_BW_3.CEN is invalid
    S011HD1P_X32Y2D128_BW_3.CLK is invalid
    S011HD1P_X32Y2D128_BW_3.Q is invalid
    reg enread : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CacheRAM.scala 26:23]
    reg choose : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CacheRAM.scala 27:23]
    reg idx : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[CacheRAM.scala 28:20]
    node _enread_T = eq(io.bits.CEN, UInt<1>("h1")) @[CacheRAM.scala 30:23]
    node _enread_T_1 = eq(io.bits.WEN, UInt<1>("h0")) @[CacheRAM.scala 30:44]
    node _enread_T_2 = and(_enread_T, _enread_T_1) @[CacheRAM.scala 30:30]
    enread <= _enread_T_2 @[CacheRAM.scala 30:10]
    io.valid <= enread @[CacheRAM.scala 31:11]
    node _choose_T = bits(io.bits.A, 6, 6) @[CacheRAM.scala 32:22]
    choose <= _choose_T @[CacheRAM.scala 32:10]
    idx <= io.bits.A @[CacheRAM.scala 33:7]
    node _io_bits_Q0_T = eq(choose, UInt<1>("h0")) @[CacheRAM.scala 39:26]
    node _io_bits_Q0_T_1 = mux(_io_bits_Q0_T, S011HD1P_X32Y2D128_BW.Q, S011HD1P_X32Y2D128_BW_1.Q) @[CacheRAM.scala 39:18]
    io.bits.Q0 <= _io_bits_Q0_T_1 @[CacheRAM.scala 39:13]
    node _io_bits_Q1_T = eq(choose, UInt<1>("h0")) @[CacheRAM.scala 40:26]
    node _io_bits_Q1_T_1 = mux(_io_bits_Q1_T, S011HD1P_X32Y2D128_BW_2.Q, S011HD1P_X32Y2D128_BW_3.Q) @[CacheRAM.scala 40:18]
    io.bits.Q1 <= _io_bits_Q1_T_1 @[CacheRAM.scala 40:13]
    S011HD1P_X32Y2D128_BW.CLK <= clock @[CacheRAM.scala 43:11]
    node _T = bits(io.bits.A, 6, 6) @[CacheRAM.scala 44:39]
    node _T_1 = neq(_T, UInt<1>("h0")) @[CacheRAM.scala 44:43]
    node _T_2 = or(io.bits.CEN, _T_1) @[CacheRAM.scala 44:27]
    S011HD1P_X32Y2D128_BW.CEN <= _T_2 @[CacheRAM.scala 44:11]
    node _T_3 = or(io.bits.WEN, io.bits.WAY) @[CacheRAM.scala 45:26]
    S011HD1P_X32Y2D128_BW.WEN <= _T_3 @[CacheRAM.scala 45:11]
    S011HD1P_X32Y2D128_BW.BWEN <= io.bits.BWEN @[CacheRAM.scala 46:12]
    node _T_4 = bits(io.bits.A, 5, 0) @[CacheRAM.scala 47:21]
    S011HD1P_X32Y2D128_BW.A <= _T_4 @[CacheRAM.scala 47:9]
    S011HD1P_X32Y2D128_BW.D <= io.bits.D @[CacheRAM.scala 48:9]
    S011HD1P_X32Y2D128_BW_1.CLK <= clock @[CacheRAM.scala 51:11]
    node _T_5 = bits(io.bits.A, 6, 6) @[CacheRAM.scala 52:39]
    node _T_6 = neq(_T_5, UInt<1>("h1")) @[CacheRAM.scala 52:43]
    node _T_7 = or(io.bits.CEN, _T_6) @[CacheRAM.scala 52:27]
    S011HD1P_X32Y2D128_BW_1.CEN <= _T_7 @[CacheRAM.scala 52:11]
    node _T_8 = or(io.bits.WEN, io.bits.WAY) @[CacheRAM.scala 53:26]
    S011HD1P_X32Y2D128_BW_1.WEN <= _T_8 @[CacheRAM.scala 53:11]
    S011HD1P_X32Y2D128_BW_1.BWEN <= io.bits.BWEN @[CacheRAM.scala 54:12]
    node _T_9 = bits(io.bits.A, 5, 0) @[CacheRAM.scala 55:21]
    S011HD1P_X32Y2D128_BW_1.A <= _T_9 @[CacheRAM.scala 55:9]
    S011HD1P_X32Y2D128_BW_1.D <= io.bits.D @[CacheRAM.scala 56:9]
    S011HD1P_X32Y2D128_BW_2.CLK <= clock @[CacheRAM.scala 59:11]
    node _T_10 = bits(io.bits.A, 6, 6) @[CacheRAM.scala 60:39]
    node _T_11 = neq(_T_10, UInt<1>("h0")) @[CacheRAM.scala 60:43]
    node _T_12 = or(io.bits.CEN, _T_11) @[CacheRAM.scala 60:27]
    S011HD1P_X32Y2D128_BW_2.CEN <= _T_12 @[CacheRAM.scala 60:11]
    node _T_13 = not(io.bits.WAY) @[CacheRAM.scala 61:29]
    node _T_14 = or(io.bits.WEN, _T_13) @[CacheRAM.scala 61:26]
    S011HD1P_X32Y2D128_BW_2.WEN <= _T_14 @[CacheRAM.scala 61:11]
    S011HD1P_X32Y2D128_BW_2.BWEN <= io.bits.BWEN @[CacheRAM.scala 62:12]
    node _T_15 = bits(io.bits.A, 5, 0) @[CacheRAM.scala 63:21]
    S011HD1P_X32Y2D128_BW_2.A <= _T_15 @[CacheRAM.scala 63:9]
    S011HD1P_X32Y2D128_BW_2.D <= io.bits.D @[CacheRAM.scala 64:9]
    S011HD1P_X32Y2D128_BW_3.CLK <= clock @[CacheRAM.scala 67:11]
    node _T_16 = bits(io.bits.A, 6, 6) @[CacheRAM.scala 68:39]
    node _T_17 = neq(_T_16, UInt<1>("h1")) @[CacheRAM.scala 68:43]
    node _T_18 = or(io.bits.CEN, _T_17) @[CacheRAM.scala 68:27]
    S011HD1P_X32Y2D128_BW_3.CEN <= _T_18 @[CacheRAM.scala 68:11]
    node _T_19 = not(io.bits.WAY) @[CacheRAM.scala 69:29]
    node _T_20 = or(io.bits.WEN, _T_19) @[CacheRAM.scala 69:26]
    S011HD1P_X32Y2D128_BW_3.WEN <= _T_20 @[CacheRAM.scala 69:11]
    S011HD1P_X32Y2D128_BW_3.BWEN <= io.bits.BWEN @[CacheRAM.scala 70:12]
    node _T_21 = bits(io.bits.A, 5, 0) @[CacheRAM.scala 71:21]
    S011HD1P_X32Y2D128_BW_3.A <= _T_21 @[CacheRAM.scala 71:9]
    S011HD1P_X32Y2D128_BW_3.D <= io.bits.D @[CacheRAM.scala 72:9]

  module LFSR_8_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip en : UInt<1>, out : UInt<8>}

    reg x : UInt<8>, clock with :
      reset => (reset, UInt<8>("h1")) @[LFSR_8.scala 10:16]
    when io.en : @[LFSR_8.scala 11:14]
      node _x_T = bits(x, 4, 4) @[LFSR_8.scala 12:14]
      node _x_T_1 = bits(x, 3, 3) @[LFSR_8.scala 12:19]
      node _x_T_2 = xor(_x_T, _x_T_1) @[LFSR_8.scala 12:17]
      node _x_T_3 = bits(x, 2, 2) @[LFSR_8.scala 12:24]
      node _x_T_4 = xor(_x_T_2, _x_T_3) @[LFSR_8.scala 12:22]
      node _x_T_5 = bits(x, 0, 0) @[LFSR_8.scala 12:29]
      node _x_T_6 = xor(_x_T_4, _x_T_5) @[LFSR_8.scala 12:27]
      node _x_T_7 = bits(x, 7, 1) @[LFSR_8.scala 12:34]
      node _x_T_8 = cat(_x_T_6, _x_T_7) @[Cat.scala 33:92]
      x <= _x_T_8 @[LFSR_8.scala 12:6]
    io.out <= x @[LFSR_8.scala 14:9]

  module DCache :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}}, flip id : UInt<1>, mem : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>, last : UInt<1>, id : UInt<4>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>, id : UInt<4>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<4>}}}, flip ram : { valid : UInt<1>, flip ready : UInt<1>, bits : { Q0 : UInt<128>, Q1 : UInt<128>, flip CEN : UInt<1>, flip WEN : UInt<1>, flip BWEN : UInt<128>, flip A : UInt<7>, flip D : UInt<128>, flip WAY : UInt<1>}}, flip flush : UInt<1>, hitrate : UInt<64>, flip uncache : UInt<1>}

    wire _cache_tag_WIRE : UInt<52>[4] @[dcache.scala 29:34]
    _cache_tag_WIRE[0] <= UInt<52>("h0") @[dcache.scala 29:34]
    _cache_tag_WIRE[1] <= UInt<52>("h0") @[dcache.scala 29:34]
    _cache_tag_WIRE[2] <= UInt<52>("h0") @[dcache.scala 29:34]
    _cache_tag_WIRE[3] <= UInt<52>("h0") @[dcache.scala 29:34]
    reg cache_tag : UInt<52>[4], clock with :
      reset => (reset, _cache_tag_WIRE) @[dcache.scala 29:26]
    wire _valid_WIRE : UInt<1>[2] @[dcache.scala 30:53]
    _valid_WIRE[0] <= UInt<1>("h0") @[dcache.scala 30:53]
    _valid_WIRE[1] <= UInt<1>("h0") @[dcache.scala 30:53]
    wire _valid_WIRE_1 : UInt<1>[2] @[dcache.scala 30:53]
    _valid_WIRE_1[0] <= UInt<1>("h0") @[dcache.scala 30:53]
    _valid_WIRE_1[1] <= UInt<1>("h0") @[dcache.scala 30:53]
    wire _valid_WIRE_2 : UInt<1>[2] @[dcache.scala 30:53]
    _valid_WIRE_2[0] <= UInt<1>("h0") @[dcache.scala 30:53]
    _valid_WIRE_2[1] <= UInt<1>("h0") @[dcache.scala 30:53]
    wire _valid_WIRE_3 : UInt<1>[2] @[dcache.scala 30:53]
    _valid_WIRE_3[0] <= UInt<1>("h0") @[dcache.scala 30:53]
    _valid_WIRE_3[1] <= UInt<1>("h0") @[dcache.scala 30:53]
    wire _valid_WIRE_4 : UInt<1>[2][4] @[dcache.scala 30:30]
    _valid_WIRE_4[0] <= _valid_WIRE @[dcache.scala 30:30]
    _valid_WIRE_4[1] <= _valid_WIRE_1 @[dcache.scala 30:30]
    _valid_WIRE_4[2] <= _valid_WIRE_2 @[dcache.scala 30:30]
    _valid_WIRE_4[3] <= _valid_WIRE_3 @[dcache.scala 30:30]
    reg valid : UInt<1>[2][4], clock with :
      reset => (reset, _valid_WIRE_4) @[dcache.scala 30:22]
    wire _dirty_WIRE : UInt<1>[2] @[dcache.scala 31:53]
    _dirty_WIRE[0] <= UInt<1>("h0") @[dcache.scala 31:53]
    _dirty_WIRE[1] <= UInt<1>("h0") @[dcache.scala 31:53]
    wire _dirty_WIRE_1 : UInt<1>[2] @[dcache.scala 31:53]
    _dirty_WIRE_1[0] <= UInt<1>("h0") @[dcache.scala 31:53]
    _dirty_WIRE_1[1] <= UInt<1>("h0") @[dcache.scala 31:53]
    wire _dirty_WIRE_2 : UInt<1>[2] @[dcache.scala 31:53]
    _dirty_WIRE_2[0] <= UInt<1>("h0") @[dcache.scala 31:53]
    _dirty_WIRE_2[1] <= UInt<1>("h0") @[dcache.scala 31:53]
    wire _dirty_WIRE_3 : UInt<1>[2] @[dcache.scala 31:53]
    _dirty_WIRE_3[0] <= UInt<1>("h0") @[dcache.scala 31:53]
    _dirty_WIRE_3[1] <= UInt<1>("h0") @[dcache.scala 31:53]
    wire _dirty_WIRE_4 : UInt<1>[2][4] @[dcache.scala 31:30]
    _dirty_WIRE_4[0] <= _dirty_WIRE @[dcache.scala 31:30]
    _dirty_WIRE_4[1] <= _dirty_WIRE_1 @[dcache.scala 31:30]
    _dirty_WIRE_4[2] <= _dirty_WIRE_2 @[dcache.scala 31:30]
    _dirty_WIRE_4[3] <= _dirty_WIRE_3 @[dcache.scala 31:30]
    reg dirty : UInt<1>[2][4], clock with :
      reset => (reset, _dirty_WIRE_4) @[dcache.scala 31:22]
    reg buf : UInt<128>, clock with :
      reset => (reset, UInt<128>("h0")) @[dcache.scala 32:20]
    reg state : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[dcache.scala 36:22]
    reg rstate : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[dcache.scala 37:23]
    reg wstate : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[dcache.scala 38:23]
    node _req_T = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 52:35]
    node _req_T_1 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 52:35]
    node req = or(_req_T, _req_T_1) @[dcache.scala 39:28]
    reg addr : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[dcache.scala 41:21]
    reg wdata : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[dcache.scala 42:22]
    reg wstrb : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[dcache.scala 43:22]
    reg uncache : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[dcache.scala 44:24]
    node tag = bits(addr, 31, 6) @[dcache.scala 45:17]
    node _offset_T = bits(addr, 3, 0) @[dcache.scala 46:20]
    node offset = shl(_offset_T, 3) @[dcache.scala 46:42]
    node idx = bits(addr, 5, 4) @[dcache.scala 47:17]
    reg rmode : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[dcache.scala 55:22]
    reg wmode : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[dcache.scala 56:22]
    node _rmode_T = eq(state, UInt<3>("h0")) @[dcache.scala 57:23]
    node _rmode_T_1 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 52:35]
    node _rmode_T_2 = and(_rmode_T, _rmode_T_1) @[dcache.scala 57:35]
    node _rmode_T_3 = eq(state, UInt<3>("h0")) @[dcache.scala 57:66]
    node _rmode_T_4 = mux(_rmode_T_3, UInt<1>("h0"), rmode) @[dcache.scala 57:58]
    node _rmode_T_5 = mux(_rmode_T_2, UInt<1>("h1"), _rmode_T_4) @[dcache.scala 57:15]
    rmode <= _rmode_T_5 @[dcache.scala 57:9]
    node _wmode_T = eq(state, UInt<3>("h0")) @[dcache.scala 58:23]
    node _wmode_T_1 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 52:35]
    node _wmode_T_2 = and(_wmode_T, _wmode_T_1) @[dcache.scala 58:35]
    node _wmode_T_3 = eq(state, UInt<3>("h0")) @[dcache.scala 58:66]
    node _wmode_T_4 = mux(_wmode_T_3, UInt<1>("h0"), wmode) @[dcache.scala 58:58]
    node _wmode_T_5 = mux(_wmode_T_2, UInt<1>("h1"), _wmode_T_4) @[dcache.scala 58:15]
    wmode <= _wmode_T_5 @[dcache.scala 58:9]
    node _hit_T = bits(cache_tag[idx], 25, 0) @[dcache.scala 61:33]
    node _hit_T_1 = eq(_hit_T, tag) @[dcache.scala 61:44]
    node _hit_T_2 = bits(valid[idx][0], 0, 0) @[dcache.scala 61:70]
    node _hit_T_3 = and(_hit_T_1, _hit_T_2) @[dcache.scala 61:53]
    node _hit_T_4 = bits(cache_tag[idx], 51, 26) @[dcache.scala 62:33]
    node _hit_T_5 = eq(_hit_T_4, tag) @[dcache.scala 62:44]
    node _hit_T_6 = bits(valid[idx][1], 0, 0) @[dcache.scala 62:70]
    node _hit_T_7 = and(_hit_T_5, _hit_T_6) @[dcache.scala 62:53]
    node _hit_T_8 = mux(_hit_T_7, UInt<2>("h1"), UInt<2>("h3")) @[dcache.scala 62:16]
    node hit = mux(_hit_T_3, UInt<2>("h0"), _hit_T_8) @[dcache.scala 61:16]
    node _miss_T = bits(hit, 1, 1) @[dcache.scala 64:18]
    node _miss_T_1 = bits(_miss_T, 0, 0) @[dcache.scala 64:22]
    node _miss_T_2 = eq(state, UInt<3>("h1")) @[dcache.scala 64:39]
    node miss = and(_miss_T_1, _miss_T_2) @[dcache.scala 64:29]
    inst lfsr8 of LFSR_8_1 @[dcache.scala 65:21]
    lfsr8.clock <= clock
    lfsr8.reset <= reset
    lfsr8.io.en <= miss @[dcache.scala 66:15]
    node _way_T = bits(lfsr8.io.out, 0, 0) @[dcache.scala 67:35]
    reg way : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[Reg.scala 35:20]
    when miss : @[Reg.scala 36:18]
      way <= _way_T @[Reg.scala 36:22]
    node _hit_way_T = bits(hit, 1, 1) @[dcache.scala 68:25]
    node _hit_way_T_1 = bits(_hit_way_T, 0, 0) @[dcache.scala 68:29]
    node _hit_way_T_2 = bits(way, 0, 0) @[dcache.scala 68:39]
    node _hit_way_T_3 = bits(hit, 0, 0) @[dcache.scala 68:46]
    node hit_way = mux(_hit_way_T_1, _hit_way_T_2, _hit_way_T_3) @[dcache.scala 68:21]
    wire tag_way : UInt<26> @[dcache.scala 70:21]
    node _tag_way_T = eq(way, UInt<1>("h0")) @[dcache.scala 71:22]
    node _tag_way_T_1 = bits(cache_tag[idx], 25, 0) @[dcache.scala 71:45]
    node _tag_way_T_2 = bits(cache_tag[idx], 51, 26) @[dcache.scala 71:72]
    node _tag_way_T_3 = mux(_tag_way_T, _tag_way_T_1, _tag_way_T_2) @[dcache.scala 71:17]
    tag_way <= _tag_way_T_3 @[dcache.scala 71:11]
    reg cnt : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[dcache.scala 73:20]
    node _state_T = bits(io.flush, 0, 0) @[dcache.scala 76:32]
    node _state_T_1 = mux(req, UInt<3>("h1"), UInt<3>("h0")) @[dcache.scala 76:49]
    node _state_T_2 = mux(_state_T, UInt<3>("h0"), _state_T_1) @[dcache.scala 76:22]
    node _state_T_3 = bits(io.flush, 0, 0) @[dcache.scala 77:32]
    node _state_T_4 = mux(miss, UInt<3>("h2"), UInt<3>("h0")) @[dcache.scala 77:68]
    node _state_T_5 = mux(uncache, UInt<3>("h0"), _state_T_4) @[dcache.scala 77:49]
    node _state_T_6 = mux(_state_T_3, UInt<3>("h0"), _state_T_5) @[dcache.scala 77:22]
    node _state_T_7 = bits(io.flush, 0, 0) @[dcache.scala 78:32]
    node _state_T_8 = eq(rstate, UInt<3>("h6")) @[dcache.scala 78:58]
    node _state_T_9 = or(way, UInt<1>("h0"))
    node _state_T_10 = bits(_state_T_9, 0, 0)
    node _state_T_11 = eq(wstate, UInt<3>("h6")) @[dcache.scala 78:100]
    node _state_T_12 = and(dirty[idx][_state_T_10], _state_T_11) @[dcache.scala 78:90]
    node _state_T_13 = or(way, UInt<1>("h0"))
    node _state_T_14 = bits(_state_T_13, 0, 0)
    node _state_T_15 = not(dirty[idx][_state_T_14]) @[dcache.scala 78:116]
    node _state_T_16 = or(_state_T_12, _state_T_15) @[dcache.scala 78:113]
    node _state_T_17 = bits(_state_T_16, 0, 0) @[dcache.scala 78:135]
    node _state_T_18 = and(_state_T_8, _state_T_17) @[dcache.scala 78:70]
    node _state_T_19 = mux(_state_T_18, UInt<3>("h3"), UInt<3>("h2")) @[dcache.scala 78:49]
    node _state_T_20 = mux(_state_T_7, UInt<3>("h0"), _state_T_19) @[dcache.scala 78:22]
    node _state_T_21 = eq(UInt<3>("h0"), state) @[Mux.scala 81:61]
    node _state_T_22 = mux(_state_T_21, _state_T_2, UInt<3>("h0")) @[Mux.scala 81:58]
    node _state_T_23 = eq(UInt<3>("h1"), state) @[Mux.scala 81:61]
    node _state_T_24 = mux(_state_T_23, _state_T_6, _state_T_22) @[Mux.scala 81:58]
    node _state_T_25 = eq(UInt<3>("h2"), state) @[Mux.scala 81:61]
    node _state_T_26 = mux(_state_T_25, _state_T_20, _state_T_24) @[Mux.scala 81:58]
    node _state_T_27 = eq(UInt<3>("h3"), state) @[Mux.scala 81:61]
    node _state_T_28 = mux(_state_T_27, UInt<3>("h0"), _state_T_26) @[Mux.scala 81:58]
    state <= _state_T_28 @[dcache.scala 75:9]
    node _rstate_T = bits(io.flush, 0, 0) @[dcache.scala 83:29]
    node _rstate_T_1 = eq(state, UInt<3>("h2")) @[dcache.scala 83:53]
    node _rstate_T_2 = and(io.mem.ar.ready, io.mem.ar.valid) @[Decoupled.scala 52:35]
    node _rstate_T_3 = and(_rstate_T_1, _rstate_T_2) @[dcache.scala 83:64]
    node _rstate_T_4 = mux(_rstate_T_3, UInt<3>("h4"), UInt<3>("h0")) @[dcache.scala 83:46]
    node _rstate_T_5 = mux(_rstate_T, UInt<3>("h0"), _rstate_T_4) @[dcache.scala 83:19]
    node _rstate_T_6 = bits(io.flush, 0, 0) @[dcache.scala 84:29]
    node _rstate_T_7 = and(io.mem.r.ready, io.mem.r.valid) @[Decoupled.scala 52:35]
    node _rstate_T_8 = mux(_rstate_T_7, UInt<3>("h5"), UInt<3>("h4")) @[dcache.scala 84:46]
    node _rstate_T_9 = mux(_rstate_T_6, UInt<3>("h0"), _rstate_T_8) @[dcache.scala 84:19]
    node _rstate_T_10 = bits(io.flush, 0, 0) @[dcache.scala 85:29]
    node _rstate_T_11 = and(io.mem.r.ready, io.mem.r.valid) @[Decoupled.scala 52:35]
    node _rstate_T_12 = mux(_rstate_T_11, UInt<3>("h6"), UInt<3>("h5")) @[dcache.scala 85:46]
    node _rstate_T_13 = mux(_rstate_T_10, UInt<3>("h0"), _rstate_T_12) @[dcache.scala 85:19]
    node _rstate_T_14 = bits(io.flush, 0, 0) @[dcache.scala 86:29]
    node _rstate_T_15 = neq(state, UInt<3>("h2")) @[dcache.scala 86:53]
    node _rstate_T_16 = mux(_rstate_T_15, UInt<3>("h0"), UInt<3>("h6")) @[dcache.scala 86:46]
    node _rstate_T_17 = mux(_rstate_T_14, UInt<3>("h0"), _rstate_T_16) @[dcache.scala 86:19]
    node _rstate_T_18 = eq(UInt<3>("h0"), rstate) @[Mux.scala 81:61]
    node _rstate_T_19 = mux(_rstate_T_18, _rstate_T_5, UInt<3>("h0")) @[Mux.scala 81:58]
    node _rstate_T_20 = eq(UInt<3>("h4"), rstate) @[Mux.scala 81:61]
    node _rstate_T_21 = mux(_rstate_T_20, _rstate_T_9, _rstate_T_19) @[Mux.scala 81:58]
    node _rstate_T_22 = eq(UInt<3>("h5"), rstate) @[Mux.scala 81:61]
    node _rstate_T_23 = mux(_rstate_T_22, _rstate_T_13, _rstate_T_21) @[Mux.scala 81:58]
    node _rstate_T_24 = eq(UInt<3>("h6"), rstate) @[Mux.scala 81:61]
    node _rstate_T_25 = mux(_rstate_T_24, _rstate_T_17, _rstate_T_23) @[Mux.scala 81:58]
    rstate <= _rstate_T_25 @[dcache.scala 82:10]
    node _wstate_T = bits(io.flush, 0, 0) @[dcache.scala 90:29]
    node _wstate_T_1 = eq(state, UInt<3>("h2")) @[dcache.scala 90:53]
    node _wstate_T_2 = and(io.mem.aw.ready, io.mem.aw.valid) @[Decoupled.scala 52:35]
    node _wstate_T_3 = and(_wstate_T_1, _wstate_T_2) @[dcache.scala 90:64]
    node _wstate_T_4 = and(io.mem.w.ready, io.mem.w.valid) @[Decoupled.scala 52:35]
    node _wstate_T_5 = and(_wstate_T_3, _wstate_T_4) @[dcache.scala 90:82]
    node _wstate_T_6 = mux(_wstate_T_5, UInt<3>("h4"), UInt<3>("h0")) @[dcache.scala 90:46]
    node _wstate_T_7 = mux(_wstate_T, UInt<3>("h0"), _wstate_T_6) @[dcache.scala 90:19]
    node _wstate_T_8 = bits(io.flush, 0, 0) @[dcache.scala 91:29]
    node _wstate_T_9 = and(io.mem.w.ready, io.mem.w.valid) @[Decoupled.scala 52:35]
    node _wstate_T_10 = mux(_wstate_T_9, UInt<3>("h5"), UInt<3>("h4")) @[dcache.scala 91:46]
    node _wstate_T_11 = mux(_wstate_T_8, UInt<3>("h0"), _wstate_T_10) @[dcache.scala 91:19]
    node _wstate_T_12 = bits(io.flush, 0, 0) @[dcache.scala 92:29]
    node _wstate_T_13 = and(io.mem.b.ready, io.mem.b.valid) @[Decoupled.scala 52:35]
    node _wstate_T_14 = mux(_wstate_T_13, UInt<3>("h6"), UInt<3>("h5")) @[dcache.scala 92:46]
    node _wstate_T_15 = mux(_wstate_T_12, UInt<3>("h0"), _wstate_T_14) @[dcache.scala 92:19]
    node _wstate_T_16 = bits(io.flush, 0, 0) @[dcache.scala 93:29]
    node _wstate_T_17 = neq(state, UInt<3>("h2")) @[dcache.scala 93:53]
    node _wstate_T_18 = mux(_wstate_T_17, UInt<3>("h0"), UInt<3>("h6")) @[dcache.scala 93:46]
    node _wstate_T_19 = mux(_wstate_T_16, UInt<3>("h0"), _wstate_T_18) @[dcache.scala 93:19]
    node _wstate_T_20 = eq(UInt<3>("h0"), wstate) @[Mux.scala 81:61]
    node _wstate_T_21 = mux(_wstate_T_20, _wstate_T_7, UInt<3>("h0")) @[Mux.scala 81:58]
    node _wstate_T_22 = eq(UInt<3>("h4"), wstate) @[Mux.scala 81:61]
    node _wstate_T_23 = mux(_wstate_T_22, _wstate_T_11, _wstate_T_21) @[Mux.scala 81:58]
    node _wstate_T_24 = eq(UInt<3>("h5"), wstate) @[Mux.scala 81:61]
    node _wstate_T_25 = mux(_wstate_T_24, _wstate_T_15, _wstate_T_23) @[Mux.scala 81:58]
    node _wstate_T_26 = eq(UInt<3>("h6"), wstate) @[Mux.scala 81:61]
    node _wstate_T_27 = mux(_wstate_T_26, _wstate_T_19, _wstate_T_25) @[Mux.scala 81:58]
    wstate <= _wstate_T_27 @[dcache.scala 89:10]
    node _valid_T = eq(state, UInt<3>("h3")) @[dcache.scala 98:36]
    node _valid_T_1 = eq(uncache, UInt<1>("h0")) @[dcache.scala 98:53]
    node _valid_T_2 = and(_valid_T, _valid_T_1) @[dcache.scala 98:50]
    node _valid_T_3 = mux(_valid_T_2, UInt<1>("h1"), valid[idx][hit_way]) @[dcache.scala 98:29]
    valid[idx][hit_way] <= _valid_T_3 @[dcache.scala 98:23]
    node _cache_tag_T = eq(state, UInt<3>("h2")) @[dcache.scala 99:32]
    node _cache_tag_T_1 = eq(uncache, UInt<1>("h0")) @[dcache.scala 99:47]
    node _cache_tag_T_2 = and(_cache_tag_T, _cache_tag_T_1) @[dcache.scala 99:44]
    node _cache_tag_T_3 = eq(way, UInt<1>("h0")) @[dcache.scala 100:31]
    node _cache_tag_T_4 = bits(cache_tag[idx], 51, 26) @[dcache.scala 100:58]
    node _cache_tag_T_5 = cat(_cache_tag_T_4, tag) @[Cat.scala 33:92]
    node _cache_tag_T_6 = bits(cache_tag[idx], 25, 0) @[dcache.scala 100:99]
    node _cache_tag_T_7 = cat(tag, _cache_tag_T_6) @[Cat.scala 33:92]
    node _cache_tag_T_8 = mux(_cache_tag_T_3, _cache_tag_T_5, _cache_tag_T_7) @[dcache.scala 100:26]
    node _cache_tag_T_9 = mux(_cache_tag_T_2, _cache_tag_T_8, cache_tag[idx]) @[dcache.scala 99:24]
    cache_tag[idx] <= _cache_tag_T_9 @[dcache.scala 99:18]
    node _dirty_T = eq(state, UInt<3>("h1")) @[dcache.scala 102:39]
    node _dirty_T_1 = eq(wmode, UInt<1>("h1")) @[dcache.scala 102:61]
    node _dirty_T_2 = and(_dirty_T, _dirty_T_1) @[dcache.scala 102:52]
    node _dirty_T_3 = eq(miss, UInt<1>("h0")) @[dcache.scala 102:73]
    node _dirty_T_4 = and(_dirty_T_2, _dirty_T_3) @[dcache.scala 102:69]
    node _dirty_T_5 = eq(state, UInt<3>("h3")) @[dcache.scala 102:88]
    node _dirty_T_6 = eq(wmode, UInt<1>("h1")) @[dcache.scala 102:111]
    node _dirty_T_7 = and(_dirty_T_5, _dirty_T_6) @[dcache.scala 102:102]
    node _dirty_T_8 = or(_dirty_T_4, _dirty_T_7) @[dcache.scala 102:80]
    node _dirty_T_9 = eq(uncache, UInt<1>("h0")) @[dcache.scala 102:123]
    node _dirty_T_10 = and(_dirty_T_8, _dirty_T_9) @[dcache.scala 102:120]
    node _dirty_T_11 = eq(state, UInt<3>("h3")) @[dcache.scala 103:33]
    node _dirty_T_12 = mux(_dirty_T_11, UInt<1>("h0"), dirty[idx][hit_way]) @[dcache.scala 103:26]
    node _dirty_T_13 = mux(_dirty_T_10, UInt<1>("h1"), _dirty_T_12) @[dcache.scala 102:30]
    dirty[idx][hit_way] <= _dirty_T_13 @[dcache.scala 102:23]
    node _addr_T = eq(state, UInt<3>("h0")) @[dcache.scala 105:21]
    node _addr_T_1 = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 52:35]
    node _addr_T_2 = and(_addr_T, _addr_T_1) @[dcache.scala 105:32]
    node _addr_T_3 = eq(io.uncache, UInt<1>("h0")) @[dcache.scala 105:52]
    node _addr_T_4 = and(_addr_T_2, _addr_T_3) @[dcache.scala 105:49]
    node _addr_T_5 = eq(state, UInt<3>("h0")) @[dcache.scala 106:21]
    node _addr_T_6 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 52:35]
    node _addr_T_7 = and(_addr_T_5, _addr_T_6) @[dcache.scala 106:32]
    node _addr_T_8 = eq(io.uncache, UInt<1>("h0")) @[dcache.scala 106:52]
    node _addr_T_9 = and(_addr_T_7, _addr_T_8) @[dcache.scala 106:49]
    node _addr_T_10 = mux(_addr_T_9, io.in.aw.bits.addr, addr) @[dcache.scala 106:14]
    node _addr_T_11 = mux(_addr_T_4, io.in.ar.bits.addr, _addr_T_10) @[dcache.scala 105:14]
    addr <= _addr_T_11 @[dcache.scala 105:8]
    node _uncache_T = eq(state, UInt<3>("h0")) @[dcache.scala 108:23]
    node _uncache_T_1 = and(_uncache_T, req) @[dcache.scala 108:34]
    node _uncache_T_2 = mux(_uncache_T_1, io.uncache, uncache) @[dcache.scala 108:16]
    uncache <= _uncache_T_2 @[dcache.scala 108:10]
    node _wdata_T = eq(state, UInt<3>("h0")) @[dcache.scala 110:22]
    node _wdata_T_1 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 52:35]
    node _wdata_T_2 = and(_wdata_T, _wdata_T_1) @[dcache.scala 110:33]
    node _wdata_T_3 = mux(_wdata_T_2, io.in.w.bits.data, wdata) @[dcache.scala 110:15]
    wdata <= _wdata_T_3 @[dcache.scala 110:9]
    node _wstrb_T = eq(state, UInt<3>("h0")) @[dcache.scala 111:22]
    node _wstrb_T_1 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 52:35]
    node _wstrb_T_2 = and(_wstrb_T, _wstrb_T_1) @[dcache.scala 111:33]
    node _wstrb_T_3 = mux(_wstrb_T_2, io.in.w.bits.strb, wstrb) @[dcache.scala 111:15]
    wstrb <= _wstrb_T_3 @[dcache.scala 111:9]
    node _cnt_T = eq(state, UInt<3>("h2")) @[dcache.scala 114:20]
    node _cnt_T_1 = bits(addr, 3, 3) @[dcache.scala 114:35]
    node _cnt_T_2 = and(io.mem.r.ready, io.mem.r.valid) @[Decoupled.scala 52:35]
    node _cnt_T_3 = and(io.mem.w.ready, io.mem.w.valid) @[Decoupled.scala 52:35]
    node _cnt_T_4 = or(_cnt_T_2, _cnt_T_3) @[dcache.scala 115:28]
    node _cnt_T_5 = not(cnt) @[dcache.scala 115:45]
    node _cnt_T_6 = mux(_cnt_T_4, _cnt_T_5, cnt) @[dcache.scala 115:13]
    node _cnt_T_7 = mux(_cnt_T, _cnt_T_1, _cnt_T_6) @[dcache.scala 114:13]
    cnt <= _cnt_T_7 @[dcache.scala 114:7]
    io.ram.ready <= UInt<1>("h1") @[dcache.scala 117:16]
    wire wstrb_map : UInt<128> @[dcache.scala 119:23]
    node _wstrb_map_T = eq(wstrb, UInt<1>("h1")) @[dcache.scala 120:26]
    node _wstrb_map_T_1 = mux(UInt<1>("h1"), UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 77:12]
    node _wstrb_map_T_2 = eq(wstrb, UInt<2>("h3")) @[dcache.scala 121:27]
    node _wstrb_map_T_3 = mux(UInt<1>("h1"), UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
    node _wstrb_map_T_4 = eq(wstrb, UInt<4>("hf")) @[dcache.scala 122:27]
    node _wstrb_map_T_5 = mux(UInt<1>("h1"), UInt<32>("hffffffff"), UInt<32>("h0")) @[Bitwise.scala 77:12]
    node _wstrb_map_T_6 = eq(wstrb, UInt<8>("hff")) @[dcache.scala 123:27]
    node _wstrb_map_T_7 = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[Bitwise.scala 77:12]
    node _wstrb_map_T_8 = mux(_wstrb_map_T_6, _wstrb_map_T_7, UInt<1>("h0")) @[dcache.scala 123:20]
    node _wstrb_map_T_9 = mux(_wstrb_map_T_4, _wstrb_map_T_5, _wstrb_map_T_8) @[dcache.scala 122:20]
    node _wstrb_map_T_10 = mux(_wstrb_map_T_2, _wstrb_map_T_3, _wstrb_map_T_9) @[dcache.scala 121:20]
    node _wstrb_map_T_11 = mux(_wstrb_map_T, _wstrb_map_T_1, _wstrb_map_T_10) @[dcache.scala 120:19]
    node _wstrb_map_T_12 = dshl(_wstrb_map_T_11, offset) @[dcache.scala 123:68]
    wstrb_map <= _wstrb_map_T_12 @[dcache.scala 120:13]
    wire wdata_map : UInt<128> @[dcache.scala 125:23]
    node _wdata_map_T = dshl(wdata, offset) @[dcache.scala 126:22]
    wdata_map <= _wdata_map_T @[dcache.scala 126:13]
    node _en_w_T = eq(state, UInt<3>("h3")) @[dcache.scala 128:21]
    node _en_w_T_1 = eq(state, UInt<3>("h1")) @[dcache.scala 128:46]
    node _en_w_T_2 = eq(wmode, UInt<1>("h1")) @[dcache.scala 128:69]
    node _en_w_T_3 = and(_en_w_T_1, _en_w_T_2) @[dcache.scala 128:59]
    node _en_w_T_4 = not(miss) @[dcache.scala 128:82]
    node _en_w_T_5 = and(_en_w_T_3, _en_w_T_4) @[dcache.scala 128:78]
    node _en_w_T_6 = or(_en_w_T, _en_w_T_5) @[dcache.scala 128:36]
    node _en_w_T_7 = not(uncache) @[dcache.scala 128:96]
    node en_w = and(_en_w_T_6, _en_w_T_7) @[dcache.scala 128:92]
    io.ram.bits.CEN <= UInt<1>("h0") @[dcache.scala 129:18]
    node _io_ram_bits_WEN_T = not(en_w) @[dcache.scala 130:21]
    io.ram.bits.WEN <= _io_ram_bits_WEN_T @[dcache.scala 130:18]
    node _io_ram_bits_BWEN_T = eq(state, UInt<3>("h1")) @[dcache.scala 131:33]
    node _io_ram_bits_BWEN_T_1 = eq(wmode, UInt<1>("h1")) @[dcache.scala 131:56]
    node _io_ram_bits_BWEN_T_2 = and(_io_ram_bits_BWEN_T, _io_ram_bits_BWEN_T_1) @[dcache.scala 131:46]
    node _io_ram_bits_BWEN_T_3 = not(uncache) @[dcache.scala 131:70]
    node _io_ram_bits_BWEN_T_4 = and(_io_ram_bits_BWEN_T_2, _io_ram_bits_BWEN_T_3) @[dcache.scala 131:66]
    node _io_ram_bits_BWEN_T_5 = not(wstrb_map) @[dcache.scala 131:81]
    node _io_ram_bits_BWEN_T_6 = mux(_io_ram_bits_BWEN_T_4, _io_ram_bits_BWEN_T_5, UInt<128>("h0")) @[dcache.scala 131:25]
    io.ram.bits.BWEN <= _io_ram_bits_BWEN_T_6 @[dcache.scala 131:19]
    node _io_ram_bits_A_T = eq(state, UInt<3>("h0")) @[dcache.scala 133:29]
    node _io_ram_bits_A_T_1 = bits(io.in.ar.bits.addr, 5, 4) @[dcache.scala 133:58]
    node _io_ram_bits_A_T_2 = mux(_io_ram_bits_A_T, _io_ram_bits_A_T_1, idx) @[dcache.scala 133:22]
    io.ram.bits.A <= _io_ram_bits_A_T_2 @[dcache.scala 133:16]
    node _io_ram_bits_D_T = eq(state, UInt<3>("h1")) @[dcache.scala 134:30]
    node _io_ram_bits_D_T_1 = eq(wmode, UInt<1>("h1")) @[dcache.scala 134:53]
    node _io_ram_bits_D_T_2 = and(_io_ram_bits_D_T, _io_ram_bits_D_T_1) @[dcache.scala 134:43]
    node _io_ram_bits_D_T_3 = not(uncache) @[dcache.scala 134:67]
    node _io_ram_bits_D_T_4 = and(_io_ram_bits_D_T_2, _io_ram_bits_D_T_3) @[dcache.scala 134:63]
    node _io_ram_bits_D_T_5 = eq(wmode, UInt<1>("h1")) @[dcache.scala 135:29]
    node _io_ram_bits_D_T_6 = not(wstrb_map) @[dcache.scala 135:43]
    node _io_ram_bits_D_T_7 = and(buf, _io_ram_bits_D_T_6) @[dcache.scala 135:41]
    node _io_ram_bits_D_T_8 = and(wdata_map, wstrb_map) @[dcache.scala 135:66]
    node _io_ram_bits_D_T_9 = or(_io_ram_bits_D_T_7, _io_ram_bits_D_T_8) @[dcache.scala 135:55]
    node _io_ram_bits_D_T_10 = mux(_io_ram_bits_D_T_5, _io_ram_bits_D_T_9, buf) @[dcache.scala 135:22]
    node _io_ram_bits_D_T_11 = mux(_io_ram_bits_D_T_4, wdata_map, _io_ram_bits_D_T_10) @[dcache.scala 134:22]
    io.ram.bits.D <= _io_ram_bits_D_T_11 @[dcache.scala 134:16]
    io.ram.bits.WAY <= hit_way @[dcache.scala 137:18]
    reg rcnt : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[dcache.scala 139:21]
    node _rcnt_T = eq(rstate, UInt<3>("h0")) @[dcache.scala 140:22]
    node _rcnt_T_1 = and(io.mem.r.ready, io.mem.r.valid) @[Decoupled.scala 52:35]
    node _rcnt_T_2 = add(rcnt, UInt<1>("h1")) @[dcache.scala 140:63]
    node _rcnt_T_3 = tail(_rcnt_T_2, 1) @[dcache.scala 140:63]
    node _rcnt_T_4 = mux(_rcnt_T_1, _rcnt_T_3, rcnt) @[dcache.scala 140:42]
    node _rcnt_T_5 = mux(_rcnt_T, UInt<1>("h0"), _rcnt_T_4) @[dcache.scala 140:14]
    rcnt <= _rcnt_T_5 @[dcache.scala 140:8]
    node _buf_T = and(io.mem.r.ready, io.mem.r.valid) @[Decoupled.scala 52:35]
    node _buf_T_1 = not(_buf_T) @[dcache.scala 142:15]
    node _buf_T_2 = or(_buf_T_1, uncache) @[dcache.scala 142:31]
    node _buf_T_3 = or(_buf_T_2, io.uncache) @[dcache.scala 142:42]
    node _buf_T_4 = bits(addr, 3, 3) @[dcache.scala 143:27]
    node _buf_T_5 = eq(rcnt, _buf_T_4) @[dcache.scala 143:19]
    node _buf_T_6 = bits(buf, 127, 64) @[dcache.scala 143:39]
    node _buf_T_7 = cat(_buf_T_6, io.mem.r.bits.data) @[Cat.scala 33:92]
    node _buf_T_8 = bits(buf, 63, 0) @[dcache.scala 143:98]
    node _buf_T_9 = cat(io.mem.r.bits.data, _buf_T_8) @[Cat.scala 33:92]
    node _buf_T_10 = mux(_buf_T_5, _buf_T_7, _buf_T_9) @[dcache.scala 143:13]
    node _buf_T_11 = mux(_buf_T_3, buf, _buf_T_10) @[dcache.scala 142:13]
    buf <= _buf_T_11 @[dcache.scala 142:7]
    node _io_mem_ar_bits_addr_T = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 52:35]
    node _io_mem_ar_bits_addr_T_1 = and(io.uncache, _io_mem_ar_bits_addr_T) @[dcache.scala 148:42]
    node _io_mem_ar_bits_addr_T_2 = not(UInt<32>("h0")) @[dcache.scala 148:88]
    node _io_mem_ar_bits_addr_T_3 = dshl(_io_mem_ar_bits_addr_T_2, UInt<2>("h3")) @[dcache.scala 148:100]
    node _io_mem_ar_bits_addr_T_4 = and(addr, _io_mem_ar_bits_addr_T_3) @[dcache.scala 148:84]
    node _io_mem_ar_bits_addr_T_5 = mux(_io_mem_ar_bits_addr_T_1, io.in.ar.bits.addr, _io_mem_ar_bits_addr_T_4) @[dcache.scala 148:29]
    io.mem.ar.bits.addr <= _io_mem_ar_bits_addr_T_5 @[dcache.scala 148:23]
    node _io_mem_ar_valid_T = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 52:35]
    node _io_mem_ar_valid_T_1 = and(io.uncache, _io_mem_ar_valid_T) @[dcache.scala 149:37]
    node _io_mem_ar_valid_T_2 = eq(state, UInt<3>("h2")) @[dcache.scala 149:65]
    node _io_mem_ar_valid_T_3 = eq(rstate, UInt<3>("h0")) @[dcache.scala 149:88]
    node _io_mem_ar_valid_T_4 = and(_io_mem_ar_valid_T_2, _io_mem_ar_valid_T_3) @[dcache.scala 149:77]
    node _io_mem_ar_valid_T_5 = mux(_io_mem_ar_valid_T_1, UInt<1>("h1"), _io_mem_ar_valid_T_4) @[dcache.scala 149:26]
    io.mem.ar.valid <= _io_mem_ar_valid_T_5 @[dcache.scala 149:19]
    node _io_mem_ar_bits_len_T = mux(io.uncache, UInt<1>("h0"), UInt<1>("h1")) @[dcache.scala 150:28]
    io.mem.ar.bits.len <= _io_mem_ar_bits_len_T @[dcache.scala 150:22]
    io.mem.ar.bits.size <= UInt<2>("h3") @[dcache.scala 151:23]
    io.mem.ar.bits.burst <= UInt<2>("h2") @[dcache.scala 152:24]
    io.mem.ar.bits.id <= io.id @[dcache.scala 153:21]
    io.mem.r.ready <= UInt<1>("h1") @[dcache.scala 155:18]
    node _io_mem_aw_bits_addr_T = shl(tag_way, 2) @[dcache.scala 158:70]
    node _io_mem_aw_bits_addr_T_1 = or(_io_mem_aw_bits_addr_T, idx) @[dcache.scala 158:85]
    node _io_mem_aw_bits_addr_T_2 = shl(_io_mem_aw_bits_addr_T_1, 4) @[dcache.scala 158:92]
    node _io_mem_aw_bits_addr_T_3 = mux(io.uncache, io.in.aw.bits.addr, _io_mem_aw_bits_addr_T_2) @[dcache.scala 158:30]
    io.mem.aw.bits.addr <= _io_mem_aw_bits_addr_T_3 @[dcache.scala 158:23]
    node _io_mem_aw_bits_len_T = mux(io.uncache, UInt<1>("h0"), UInt<1>("h1")) @[dcache.scala 159:28]
    io.mem.aw.bits.len <= _io_mem_aw_bits_len_T @[dcache.scala 159:22]
    io.mem.aw.bits.size <= UInt<2>("h3") @[dcache.scala 160:23]
    node _io_mem_aw_valid_T = eq(state, UInt<3>("h0")) @[dcache.scala 161:33]
    node _io_mem_aw_valid_T_1 = and(_io_mem_aw_valid_T, io.uncache) @[dcache.scala 161:45]
    node _io_mem_aw_valid_T_2 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 52:35]
    node _io_mem_aw_valid_T_3 = and(_io_mem_aw_valid_T_1, _io_mem_aw_valid_T_2) @[dcache.scala 161:57]
    node _io_mem_aw_valid_T_4 = eq(state, UInt<3>("h2")) @[dcache.scala 161:85]
    node _io_mem_aw_valid_T_5 = eq(wstate, UInt<3>("h0")) @[dcache.scala 161:108]
    node _io_mem_aw_valid_T_6 = and(_io_mem_aw_valid_T_4, _io_mem_aw_valid_T_5) @[dcache.scala 161:97]
    node _io_mem_aw_valid_T_7 = or(way, UInt<1>("h0"))
    node _io_mem_aw_valid_T_8 = bits(_io_mem_aw_valid_T_7, 0, 0)
    node _io_mem_aw_valid_T_9 = bits(dirty[idx][_io_mem_aw_valid_T_8], 0, 0) @[dcache.scala 161:139]
    node _io_mem_aw_valid_T_10 = and(_io_mem_aw_valid_T_6, _io_mem_aw_valid_T_9) @[dcache.scala 161:120]
    node _io_mem_aw_valid_T_11 = mux(_io_mem_aw_valid_T_3, UInt<1>("h1"), _io_mem_aw_valid_T_10) @[dcache.scala 161:25]
    io.mem.aw.valid <= _io_mem_aw_valid_T_11 @[dcache.scala 161:19]
    io.mem.aw.bits.id <= io.id @[dcache.scala 162:21]
    io.mem.aw.bits.burst <= UInt<1>("h0") @[dcache.scala 163:24]
    io.mem.w.bits.id <= io.id @[dcache.scala 165:20]
    node _io_mem_w_bits_data_T = eq(wstate, UInt<3>("h4")) @[dcache.scala 167:37]
    node _io_mem_w_bits_data_T_1 = bits(way, 0, 0) @[dcache.scala 167:58]
    node _io_mem_w_bits_data_T_2 = bits(_io_mem_w_bits_data_T_1, 0, 0) @[dcache.scala 167:62]
    node _io_mem_w_bits_data_T_3 = bits(io.ram.bits.Q1, 127, 64) @[dcache.scala 167:82]
    node _io_mem_w_bits_data_T_4 = bits(io.ram.bits.Q0, 127, 64) @[dcache.scala 167:105]
    node _io_mem_w_bits_data_T_5 = mux(_io_mem_w_bits_data_T_2, _io_mem_w_bits_data_T_3, _io_mem_w_bits_data_T_4) @[dcache.scala 167:53]
    node _io_mem_w_bits_data_T_6 = bits(way, 0, 0) @[dcache.scala 168:33]
    node _io_mem_w_bits_data_T_7 = bits(_io_mem_w_bits_data_T_6, 0, 0) @[dcache.scala 168:37]
    node _io_mem_w_bits_data_T_8 = bits(io.ram.bits.Q1, 63, 0) @[dcache.scala 168:58]
    node _io_mem_w_bits_data_T_9 = bits(io.ram.bits.Q0, 63, 0) @[dcache.scala 168:78]
    node _io_mem_w_bits_data_T_10 = mux(_io_mem_w_bits_data_T_7, _io_mem_w_bits_data_T_8, _io_mem_w_bits_data_T_9) @[dcache.scala 168:28]
    node _io_mem_w_bits_data_T_11 = mux(_io_mem_w_bits_data_T, _io_mem_w_bits_data_T_5, _io_mem_w_bits_data_T_10) @[dcache.scala 167:28]
    node _io_mem_w_bits_data_T_12 = mux(io.uncache, io.in.w.bits.data, _io_mem_w_bits_data_T_11) @[dcache.scala 166:28]
    io.mem.w.bits.data <= _io_mem_w_bits_data_T_12 @[dcache.scala 166:22]
    node _io_mem_w_bits_strb_T = not(UInt<8>("h0")) @[dcache.scala 169:59]
    node _io_mem_w_bits_strb_T_1 = mux(io.uncache, io.in.w.bits.strb, _io_mem_w_bits_strb_T) @[dcache.scala 169:29]
    io.mem.w.bits.strb <= _io_mem_w_bits_strb_T_1 @[dcache.scala 169:22]
    node _io_mem_w_bits_last_T = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 52:35]
    node _io_mem_w_bits_last_T_1 = and(io.uncache, _io_mem_w_bits_last_T) @[dcache.scala 170:44]
    node _io_mem_w_bits_last_T_2 = eq(wstate, UInt<3>("h4")) @[dcache.scala 170:73]
    node _io_mem_w_bits_last_T_3 = mux(_io_mem_w_bits_last_T_1, UInt<1>("h1"), _io_mem_w_bits_last_T_2) @[dcache.scala 170:29]
    io.mem.w.bits.last <= _io_mem_w_bits_last_T_3 @[dcache.scala 170:22]
    node _io_mem_w_valid_T = eq(state, UInt<3>("h0")) @[dcache.scala 171:33]
    node _io_mem_w_valid_T_1 = and(_io_mem_w_valid_T, io.uncache) @[dcache.scala 171:45]
    node _io_mem_w_valid_T_2 = and(io.in.w.ready, io.in.w.valid) @[Decoupled.scala 52:35]
    node _io_mem_w_valid_T_3 = and(_io_mem_w_valid_T_1, _io_mem_w_valid_T_2) @[dcache.scala 171:60]
    node _io_mem_w_valid_T_4 = eq(state, UInt<3>("h2")) @[dcache.scala 171:88]
    node _io_mem_w_valid_T_5 = eq(wstate, UInt<3>("h0")) @[dcache.scala 171:111]
    node _io_mem_w_valid_T_6 = eq(wstate, UInt<3>("h4")) @[dcache.scala 171:132]
    node _io_mem_w_valid_T_7 = or(_io_mem_w_valid_T_5, _io_mem_w_valid_T_6) @[dcache.scala 171:122]
    node _io_mem_w_valid_T_8 = and(_io_mem_w_valid_T_4, _io_mem_w_valid_T_7) @[dcache.scala 171:100]
    node _io_mem_w_valid_T_9 = or(way, UInt<1>("h0"))
    node _io_mem_w_valid_T_10 = bits(_io_mem_w_valid_T_9, 0, 0)
    node _io_mem_w_valid_T_11 = bits(dirty[idx][_io_mem_w_valid_T_10], 0, 0) @[dcache.scala 171:164]
    node _io_mem_w_valid_T_12 = and(_io_mem_w_valid_T_8, _io_mem_w_valid_T_11) @[dcache.scala 171:145]
    node _io_mem_w_valid_T_13 = mux(_io_mem_w_valid_T_3, UInt<1>("h1"), _io_mem_w_valid_T_12) @[dcache.scala 171:24]
    io.mem.w.valid <= _io_mem_w_valid_T_13 @[dcache.scala 171:18]
    io.mem.b.ready <= UInt<1>("h1") @[dcache.scala 172:18]
    node _io_in_r_bits_data_T = eq(state, UInt<3>("h1")) @[dcache.scala 175:36]
    node _io_in_r_bits_data_T_1 = not(miss) @[dcache.scala 175:54]
    node _io_in_r_bits_data_T_2 = and(_io_in_r_bits_data_T, _io_in_r_bits_data_T_1) @[dcache.scala 175:50]
    node _io_in_r_bits_data_T_3 = dshr(io.ram.bits.Q1, offset) @[dcache.scala 176:54]
    node _io_in_r_bits_data_T_4 = bits(_io_in_r_bits_data_T_3, 63, 0) @[dcache.scala 176:64]
    node _io_in_r_bits_data_T_5 = dshr(io.ram.bits.Q0, offset) @[dcache.scala 176:86]
    node _io_in_r_bits_data_T_6 = bits(_io_in_r_bits_data_T_5, 63, 0) @[dcache.scala 176:96]
    node _io_in_r_bits_data_T_7 = mux(hit_way, _io_in_r_bits_data_T_4, _io_in_r_bits_data_T_6) @[dcache.scala 176:30]
    node _io_in_r_bits_data_T_8 = eq(state, UInt<3>("h3")) @[dcache.scala 177:38]
    node _io_in_r_bits_data_T_9 = dshr(buf, offset) @[dcache.scala 177:57]
    node _io_in_r_bits_data_T_10 = mux(_io_in_r_bits_data_T_8, _io_in_r_bits_data_T_9, UInt<1>("h0")) @[dcache.scala 177:30]
    node _io_in_r_bits_data_T_11 = mux(_io_in_r_bits_data_T_2, _io_in_r_bits_data_T_7, _io_in_r_bits_data_T_10) @[dcache.scala 175:28]
    node _io_in_r_bits_data_T_12 = mux(uncache, io.mem.r.bits.data, _io_in_r_bits_data_T_11) @[dcache.scala 174:28]
    io.in.r.bits.data <= _io_in_r_bits_data_T_12 @[dcache.scala 174:21]
    node _io_in_ar_ready_T = eq(state, UInt<3>("h0")) @[dcache.scala 178:28]
    io.in.ar.ready <= _io_in_ar_ready_T @[dcache.scala 178:18]
    node _io_in_r_valid_T = eq(state, UInt<3>("h1")) @[dcache.scala 179:29]
    node _io_in_r_valid_T_1 = not(miss) @[dcache.scala 179:47]
    node _io_in_r_valid_T_2 = and(_io_in_r_valid_T, _io_in_r_valid_T_1) @[dcache.scala 179:43]
    node _io_in_r_valid_T_3 = eq(state, UInt<3>("h3")) @[dcache.scala 179:65]
    node _io_in_r_valid_T_4 = or(_io_in_r_valid_T_2, _io_in_r_valid_T_3) @[dcache.scala 179:55]
    node _io_in_r_valid_T_5 = and(io.mem.r.ready, io.mem.r.valid) @[Decoupled.scala 52:35]
    node _io_in_r_valid_T_6 = and(_io_in_r_valid_T_5, uncache) @[dcache.scala 179:97]
    node _io_in_r_valid_T_7 = or(_io_in_r_valid_T_4, _io_in_r_valid_T_6) @[dcache.scala 179:79]
    node _io_in_r_valid_T_8 = and(_io_in_r_valid_T_7, rmode) @[dcache.scala 179:110]
    io.in.r.valid <= _io_in_r_valid_T_8 @[dcache.scala 179:17]
    io.in.r.bits.resp <= UInt<1>("h0") @[dcache.scala 180:21]
    io.in.b.bits.resp <= UInt<1>("h0") @[dcache.scala 181:21]
    node _io_in_b_valid_T = eq(state, UInt<3>("h1")) @[dcache.scala 182:29]
    node _io_in_b_valid_T_1 = not(miss) @[dcache.scala 182:47]
    node _io_in_b_valid_T_2 = and(_io_in_b_valid_T, _io_in_b_valid_T_1) @[dcache.scala 182:43]
    node _io_in_b_valid_T_3 = eq(state, UInt<3>("h3")) @[dcache.scala 182:65]
    node _io_in_b_valid_T_4 = or(_io_in_b_valid_T_2, _io_in_b_valid_T_3) @[dcache.scala 182:55]
    node _io_in_b_valid_T_5 = and(io.mem.b.ready, io.mem.b.valid) @[Decoupled.scala 52:35]
    node _io_in_b_valid_T_6 = and(_io_in_b_valid_T_5, uncache) @[dcache.scala 182:98]
    node _io_in_b_valid_T_7 = or(_io_in_b_valid_T_4, _io_in_b_valid_T_6) @[dcache.scala 182:80]
    node _io_in_b_valid_T_8 = and(_io_in_b_valid_T_7, wmode) @[dcache.scala 182:111]
    io.in.b.valid <= _io_in_b_valid_T_8 @[dcache.scala 182:17]
    node _io_in_aw_ready_T = eq(state, UInt<3>("h0")) @[dcache.scala 183:28]
    io.in.aw.ready <= _io_in_aw_ready_T @[dcache.scala 183:18]
    node _io_in_w_ready_T = eq(state, UInt<3>("h0")) @[dcache.scala 184:27]
    io.in.w.ready <= _io_in_w_ready_T @[dcache.scala 184:17]
    reg hit_num : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[dcache.scala 186:22]
    reg inst_num : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[dcache.scala 187:23]
    node _hit_num_T = eq(state, UInt<3>("h1")) @[dcache.scala 189:25]
    node _hit_num_T_1 = not(miss) @[dcache.scala 189:43]
    node _hit_num_T_2 = and(_hit_num_T, _hit_num_T_1) @[dcache.scala 189:39]
    node _hit_num_T_3 = add(hit_num, UInt<1>("h1")) @[dcache.scala 189:58]
    node _hit_num_T_4 = tail(_hit_num_T_3, 1) @[dcache.scala 189:58]
    node _hit_num_T_5 = mux(_hit_num_T_2, _hit_num_T_4, hit_num) @[dcache.scala 189:17]
    hit_num <= _hit_num_T_5 @[dcache.scala 189:11]
    node _inst_num_T = and(io.in.ar.ready, io.in.ar.valid) @[Decoupled.scala 52:35]
    node _inst_num_T_1 = and(io.in.aw.ready, io.in.aw.valid) @[Decoupled.scala 52:35]
    node _inst_num_T_2 = or(_inst_num_T, _inst_num_T_1) @[dcache.scala 190:33]
    node _inst_num_T_3 = add(inst_num, UInt<1>("h1")) @[dcache.scala 190:59]
    node _inst_num_T_4 = tail(_inst_num_T_3, 1) @[dcache.scala 190:59]
    node _inst_num_T_5 = mux(_inst_num_T_2, _inst_num_T_4, inst_num) @[dcache.scala 190:18]
    inst_num <= _inst_num_T_5 @[dcache.scala 190:12]
    node _io_hitrate_T = cat(inst_num, hit_num) @[Cat.scala 33:92]
    io.hitrate <= _io_hitrate_T @[dcache.scala 192:14]

  extmodule S011HD1P_X32Y2D128_BW_4 :
    output Q : UInt<128>
    input CLK : Clock
    input CEN : UInt<1>
    input WEN : UInt<1>
    input BWEN : UInt<128>
    input A : UInt<6>
    input D : UInt<128>
    defname = S011HD1P_X32Y2D128_BW

  extmodule S011HD1P_X32Y2D128_BW_5 :
    output Q : UInt<128>
    input CLK : Clock
    input CEN : UInt<1>
    input WEN : UInt<1>
    input BWEN : UInt<128>
    input A : UInt<6>
    input D : UInt<128>
    defname = S011HD1P_X32Y2D128_BW

  extmodule S011HD1P_X32Y2D128_BW_6 :
    output Q : UInt<128>
    input CLK : Clock
    input CEN : UInt<1>
    input WEN : UInt<1>
    input BWEN : UInt<128>
    input A : UInt<6>
    input D : UInt<128>
    defname = S011HD1P_X32Y2D128_BW

  extmodule S011HD1P_X32Y2D128_BW_7 :
    output Q : UInt<128>
    input CLK : Clock
    input CEN : UInt<1>
    input WEN : UInt<1>
    input BWEN : UInt<128>
    input A : UInt<6>
    input D : UInt<128>
    defname = S011HD1P_X32Y2D128_BW

  module ICacheRAM_1 :
    input clock : Clock
    input reset : Reset
    output io : { valid : UInt<1>, flip ready : UInt<1>, bits : { Q0 : UInt<128>, Q1 : UInt<128>, flip CEN : UInt<1>, flip WEN : UInt<1>, flip BWEN : UInt<128>, flip A : UInt<7>, flip D : UInt<128>, flip WAY : UInt<1>}}

    inst S011HD1P_X32Y2D128_BW of S011HD1P_X32Y2D128_BW_4 @[CacheRAM.scala 21:18]
    S011HD1P_X32Y2D128_BW.D is invalid
    S011HD1P_X32Y2D128_BW.A is invalid
    S011HD1P_X32Y2D128_BW.BWEN is invalid
    S011HD1P_X32Y2D128_BW.WEN is invalid
    S011HD1P_X32Y2D128_BW.CEN is invalid
    S011HD1P_X32Y2D128_BW.CLK is invalid
    S011HD1P_X32Y2D128_BW.Q is invalid
    inst S011HD1P_X32Y2D128_BW_1 of S011HD1P_X32Y2D128_BW_5 @[CacheRAM.scala 22:18]
    S011HD1P_X32Y2D128_BW_1.D is invalid
    S011HD1P_X32Y2D128_BW_1.A is invalid
    S011HD1P_X32Y2D128_BW_1.BWEN is invalid
    S011HD1P_X32Y2D128_BW_1.WEN is invalid
    S011HD1P_X32Y2D128_BW_1.CEN is invalid
    S011HD1P_X32Y2D128_BW_1.CLK is invalid
    S011HD1P_X32Y2D128_BW_1.Q is invalid
    inst S011HD1P_X32Y2D128_BW_2 of S011HD1P_X32Y2D128_BW_6 @[CacheRAM.scala 23:18]
    S011HD1P_X32Y2D128_BW_2.D is invalid
    S011HD1P_X32Y2D128_BW_2.A is invalid
    S011HD1P_X32Y2D128_BW_2.BWEN is invalid
    S011HD1P_X32Y2D128_BW_2.WEN is invalid
    S011HD1P_X32Y2D128_BW_2.CEN is invalid
    S011HD1P_X32Y2D128_BW_2.CLK is invalid
    S011HD1P_X32Y2D128_BW_2.Q is invalid
    inst S011HD1P_X32Y2D128_BW_3 of S011HD1P_X32Y2D128_BW_7 @[CacheRAM.scala 24:18]
    S011HD1P_X32Y2D128_BW_3.D is invalid
    S011HD1P_X32Y2D128_BW_3.A is invalid
    S011HD1P_X32Y2D128_BW_3.BWEN is invalid
    S011HD1P_X32Y2D128_BW_3.WEN is invalid
    S011HD1P_X32Y2D128_BW_3.CEN is invalid
    S011HD1P_X32Y2D128_BW_3.CLK is invalid
    S011HD1P_X32Y2D128_BW_3.Q is invalid
    reg enread : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CacheRAM.scala 26:23]
    reg choose : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[CacheRAM.scala 27:23]
    reg idx : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[CacheRAM.scala 28:20]
    node _enread_T = eq(io.bits.CEN, UInt<1>("h1")) @[CacheRAM.scala 30:23]
    node _enread_T_1 = eq(io.bits.WEN, UInt<1>("h0")) @[CacheRAM.scala 30:44]
    node _enread_T_2 = and(_enread_T, _enread_T_1) @[CacheRAM.scala 30:30]
    enread <= _enread_T_2 @[CacheRAM.scala 30:10]
    io.valid <= enread @[CacheRAM.scala 31:11]
    node _choose_T = bits(io.bits.A, 6, 6) @[CacheRAM.scala 32:22]
    choose <= _choose_T @[CacheRAM.scala 32:10]
    idx <= io.bits.A @[CacheRAM.scala 33:7]
    node _io_bits_Q0_T = eq(choose, UInt<1>("h0")) @[CacheRAM.scala 39:26]
    node _io_bits_Q0_T_1 = mux(_io_bits_Q0_T, S011HD1P_X32Y2D128_BW.Q, S011HD1P_X32Y2D128_BW_1.Q) @[CacheRAM.scala 39:18]
    io.bits.Q0 <= _io_bits_Q0_T_1 @[CacheRAM.scala 39:13]
    node _io_bits_Q1_T = eq(choose, UInt<1>("h0")) @[CacheRAM.scala 40:26]
    node _io_bits_Q1_T_1 = mux(_io_bits_Q1_T, S011HD1P_X32Y2D128_BW_2.Q, S011HD1P_X32Y2D128_BW_3.Q) @[CacheRAM.scala 40:18]
    io.bits.Q1 <= _io_bits_Q1_T_1 @[CacheRAM.scala 40:13]
    S011HD1P_X32Y2D128_BW.CLK <= clock @[CacheRAM.scala 43:11]
    node _T = bits(io.bits.A, 6, 6) @[CacheRAM.scala 44:39]
    node _T_1 = neq(_T, UInt<1>("h0")) @[CacheRAM.scala 44:43]
    node _T_2 = or(io.bits.CEN, _T_1) @[CacheRAM.scala 44:27]
    S011HD1P_X32Y2D128_BW.CEN <= _T_2 @[CacheRAM.scala 44:11]
    node _T_3 = or(io.bits.WEN, io.bits.WAY) @[CacheRAM.scala 45:26]
    S011HD1P_X32Y2D128_BW.WEN <= _T_3 @[CacheRAM.scala 45:11]
    S011HD1P_X32Y2D128_BW.BWEN <= io.bits.BWEN @[CacheRAM.scala 46:12]
    node _T_4 = bits(io.bits.A, 5, 0) @[CacheRAM.scala 47:21]
    S011HD1P_X32Y2D128_BW.A <= _T_4 @[CacheRAM.scala 47:9]
    S011HD1P_X32Y2D128_BW.D <= io.bits.D @[CacheRAM.scala 48:9]
    S011HD1P_X32Y2D128_BW_1.CLK <= clock @[CacheRAM.scala 51:11]
    node _T_5 = bits(io.bits.A, 6, 6) @[CacheRAM.scala 52:39]
    node _T_6 = neq(_T_5, UInt<1>("h1")) @[CacheRAM.scala 52:43]
    node _T_7 = or(io.bits.CEN, _T_6) @[CacheRAM.scala 52:27]
    S011HD1P_X32Y2D128_BW_1.CEN <= _T_7 @[CacheRAM.scala 52:11]
    node _T_8 = or(io.bits.WEN, io.bits.WAY) @[CacheRAM.scala 53:26]
    S011HD1P_X32Y2D128_BW_1.WEN <= _T_8 @[CacheRAM.scala 53:11]
    S011HD1P_X32Y2D128_BW_1.BWEN <= io.bits.BWEN @[CacheRAM.scala 54:12]
    node _T_9 = bits(io.bits.A, 5, 0) @[CacheRAM.scala 55:21]
    S011HD1P_X32Y2D128_BW_1.A <= _T_9 @[CacheRAM.scala 55:9]
    S011HD1P_X32Y2D128_BW_1.D <= io.bits.D @[CacheRAM.scala 56:9]
    S011HD1P_X32Y2D128_BW_2.CLK <= clock @[CacheRAM.scala 59:11]
    node _T_10 = bits(io.bits.A, 6, 6) @[CacheRAM.scala 60:39]
    node _T_11 = neq(_T_10, UInt<1>("h0")) @[CacheRAM.scala 60:43]
    node _T_12 = or(io.bits.CEN, _T_11) @[CacheRAM.scala 60:27]
    S011HD1P_X32Y2D128_BW_2.CEN <= _T_12 @[CacheRAM.scala 60:11]
    node _T_13 = not(io.bits.WAY) @[CacheRAM.scala 61:29]
    node _T_14 = or(io.bits.WEN, _T_13) @[CacheRAM.scala 61:26]
    S011HD1P_X32Y2D128_BW_2.WEN <= _T_14 @[CacheRAM.scala 61:11]
    S011HD1P_X32Y2D128_BW_2.BWEN <= io.bits.BWEN @[CacheRAM.scala 62:12]
    node _T_15 = bits(io.bits.A, 5, 0) @[CacheRAM.scala 63:21]
    S011HD1P_X32Y2D128_BW_2.A <= _T_15 @[CacheRAM.scala 63:9]
    S011HD1P_X32Y2D128_BW_2.D <= io.bits.D @[CacheRAM.scala 64:9]
    S011HD1P_X32Y2D128_BW_3.CLK <= clock @[CacheRAM.scala 67:11]
    node _T_16 = bits(io.bits.A, 6, 6) @[CacheRAM.scala 68:39]
    node _T_17 = neq(_T_16, UInt<1>("h1")) @[CacheRAM.scala 68:43]
    node _T_18 = or(io.bits.CEN, _T_17) @[CacheRAM.scala 68:27]
    S011HD1P_X32Y2D128_BW_3.CEN <= _T_18 @[CacheRAM.scala 68:11]
    node _T_19 = not(io.bits.WAY) @[CacheRAM.scala 69:29]
    node _T_20 = or(io.bits.WEN, _T_19) @[CacheRAM.scala 69:26]
    S011HD1P_X32Y2D128_BW_3.WEN <= _T_20 @[CacheRAM.scala 69:11]
    S011HD1P_X32Y2D128_BW_3.BWEN <= io.bits.BWEN @[CacheRAM.scala 70:12]
    node _T_21 = bits(io.bits.A, 5, 0) @[CacheRAM.scala 71:21]
    S011HD1P_X32Y2D128_BW_3.A <= _T_21 @[CacheRAM.scala 71:9]
    S011HD1P_X32Y2D128_BW_3.D <= io.bits.D @[CacheRAM.scala 72:9]

  module CacheArbiter :
    input clock : Clock
    input reset : Reset
    output io : { flip ifu : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>, last : UInt<1>, id : UInt<4>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>, id : UInt<4>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<4>}}}, flip lsu : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>, last : UInt<1>, id : UInt<4>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>, id : UInt<4>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<4>}}}, out : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>, last : UInt<1>, id : UInt<4>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>, id : UInt<4>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<4>}}}}

    wire arstate : UInt<2> @[Arbiter.scala 15:21]
    wire rstate : UInt<2> @[Arbiter.scala 16:21]
    node _arstate_T = mux(io.lsu.ar.valid, UInt<2>("h2"), UInt<2>("h1")) @[Arbiter.scala 17:17]
    arstate <= _arstate_T @[Arbiter.scala 17:11]
    node _rstate_T = eq(io.out.r.bits.id, UInt<1>("h1")) @[Arbiter.scala 18:34]
    node _rstate_T_1 = mux(_rstate_T, UInt<2>("h2"), UInt<2>("h1")) @[Arbiter.scala 18:16]
    rstate <= _rstate_T_1 @[Arbiter.scala 18:10]
    node _T = eq(arstate, UInt<2>("h1")) @[Arbiter.scala 20:16]
    when _T : @[Arbiter.scala 20:26]
      io.out.ar.bits.id <= io.ifu.ar.bits.id @[Arbiter.scala 21:25]
      io.out.ar.bits.addr <= io.ifu.ar.bits.addr @[Arbiter.scala 22:25]
      io.out.ar.bits.len <= io.ifu.ar.bits.len @[Arbiter.scala 23:25]
      io.out.ar.bits.size <= io.ifu.ar.bits.size @[Arbiter.scala 24:25]
      io.out.ar.bits.burst <= io.ifu.ar.bits.burst @[Arbiter.scala 25:25]
      io.out.ar.valid <= io.ifu.ar.valid @[Arbiter.scala 26:25]
      io.ifu.ar.ready <= io.out.ar.ready @[Arbiter.scala 27:25]
      io.lsu.ar.ready <= UInt<1>("h0") @[Arbiter.scala 28:25]
    else :
      node _T_1 = eq(arstate, UInt<2>("h2")) @[Arbiter.scala 29:22]
      when _T_1 : @[Arbiter.scala 29:33]
        io.out.ar.bits.id <= io.lsu.ar.bits.id @[Arbiter.scala 30:25]
        io.out.ar.bits.addr <= io.lsu.ar.bits.addr @[Arbiter.scala 31:25]
        io.out.ar.bits.len <= io.lsu.ar.bits.len @[Arbiter.scala 32:25]
        io.out.ar.bits.size <= io.lsu.ar.bits.size @[Arbiter.scala 33:25]
        io.out.ar.bits.burst <= io.lsu.ar.bits.burst @[Arbiter.scala 34:25]
        io.out.ar.valid <= io.lsu.ar.valid @[Arbiter.scala 35:25]
        io.ifu.ar.ready <= UInt<1>("h0") @[Arbiter.scala 36:25]
        io.lsu.ar.ready <= io.out.ar.ready @[Arbiter.scala 37:25]
      else :
        io.out.ar.bits.id <= UInt<1>("h0") @[Arbiter.scala 39:25]
        io.out.ar.bits.addr <= UInt<1>("h0") @[Arbiter.scala 40:25]
        io.out.ar.bits.len <= UInt<1>("h0") @[Arbiter.scala 41:25]
        io.out.ar.bits.size <= UInt<1>("h0") @[Arbiter.scala 42:25]
        io.out.ar.bits.burst <= UInt<1>("h0") @[Arbiter.scala 43:25]
        io.out.ar.valid <= UInt<1>("h0") @[Arbiter.scala 44:25]
        io.ifu.ar.ready <= UInt<1>("h0") @[Arbiter.scala 45:25]
        io.lsu.ar.ready <= UInt<1>("h0") @[Arbiter.scala 46:25]
    node _T_2 = eq(rstate, UInt<2>("h1")) @[Arbiter.scala 49:15]
    when _T_2 : @[Arbiter.scala 49:25]
      io.ifu.r.bits.id <= io.out.r.bits.id @[Arbiter.scala 50:27]
      io.ifu.r.bits.data <= io.out.r.bits.data @[Arbiter.scala 51:27]
      io.ifu.r.bits.resp <= io.out.r.bits.resp @[Arbiter.scala 52:27]
      io.ifu.r.bits.last <= io.out.r.bits.last @[Arbiter.scala 53:27]
      io.ifu.r.valid <= io.out.r.valid @[Arbiter.scala 54:27]
      io.lsu.r.bits.id <= UInt<1>("h1") @[Arbiter.scala 56:27]
      io.lsu.r.bits.data <= UInt<1>("h0") @[Arbiter.scala 57:27]
      io.lsu.r.bits.resp <= UInt<1>("h0") @[Arbiter.scala 58:27]
      io.lsu.r.bits.last <= UInt<1>("h0") @[Arbiter.scala 59:27]
      io.lsu.r.valid <= UInt<1>("h0") @[Arbiter.scala 60:27]
      io.out.r.ready <= io.ifu.r.ready @[Arbiter.scala 62:27]
    else :
      node _T_3 = eq(rstate, UInt<2>("h2")) @[Arbiter.scala 63:21]
      when _T_3 : @[Arbiter.scala 63:32]
        io.ifu.r.bits.id <= UInt<1>("h0") @[Arbiter.scala 64:27]
        io.ifu.r.bits.data <= UInt<1>("h0") @[Arbiter.scala 65:27]
        io.ifu.r.bits.resp <= UInt<1>("h0") @[Arbiter.scala 66:27]
        io.ifu.r.bits.last <= UInt<1>("h0") @[Arbiter.scala 67:27]
        io.ifu.r.valid <= UInt<1>("h0") @[Arbiter.scala 68:27]
        io.lsu.r.bits.id <= io.out.r.bits.id @[Arbiter.scala 70:27]
        io.lsu.r.bits.data <= io.out.r.bits.data @[Arbiter.scala 71:27]
        io.lsu.r.bits.resp <= io.out.r.bits.resp @[Arbiter.scala 72:27]
        io.lsu.r.bits.last <= io.out.r.bits.last @[Arbiter.scala 73:27]
        io.lsu.r.valid <= io.out.r.valid @[Arbiter.scala 74:27]
        io.out.r.ready <= io.lsu.r.ready @[Arbiter.scala 76:27]
      else :
        io.ifu.r.bits.id <= UInt<1>("h0") @[Arbiter.scala 78:27]
        io.ifu.r.bits.data <= UInt<1>("h0") @[Arbiter.scala 79:27]
        io.ifu.r.bits.resp <= UInt<1>("h0") @[Arbiter.scala 80:27]
        io.ifu.r.bits.last <= UInt<1>("h0") @[Arbiter.scala 81:27]
        io.ifu.r.valid <= UInt<1>("h0") @[Arbiter.scala 82:27]
        io.lsu.r.bits.id <= UInt<1>("h1") @[Arbiter.scala 84:27]
        io.lsu.r.bits.data <= UInt<1>("h0") @[Arbiter.scala 85:27]
        io.lsu.r.bits.resp <= UInt<1>("h0") @[Arbiter.scala 86:27]
        io.lsu.r.bits.last <= UInt<1>("h0") @[Arbiter.scala 87:27]
        io.lsu.r.valid <= UInt<1>("h0") @[Arbiter.scala 88:27]
        io.out.r.ready <= UInt<1>("h0") @[Arbiter.scala 90:27]
    io.out.aw.bits.id <= io.lsu.aw.bits.id @[Arbiter.scala 94:23]
    io.out.aw.bits.addr <= io.lsu.aw.bits.addr @[Arbiter.scala 95:23]
    io.out.aw.bits.len <= io.lsu.aw.bits.len @[Arbiter.scala 96:23]
    io.out.aw.bits.size <= io.lsu.aw.bits.size @[Arbiter.scala 97:23]
    io.out.aw.bits.burst <= io.lsu.aw.bits.burst @[Arbiter.scala 98:23]
    io.out.aw.valid <= io.lsu.aw.valid @[Arbiter.scala 99:23]
    io.ifu.aw.ready <= UInt<1>("h0") @[Arbiter.scala 101:23]
    io.lsu.aw.ready <= io.out.aw.ready @[Arbiter.scala 102:23]
    io.out.w.bits.id <= io.lsu.w.bits.id @[Arbiter.scala 104:23]
    io.out.w.bits.data <= io.lsu.w.bits.data @[Arbiter.scala 105:23]
    io.out.w.bits.strb <= io.lsu.w.bits.strb @[Arbiter.scala 106:23]
    io.out.w.bits.last <= io.lsu.w.bits.last @[Arbiter.scala 107:23]
    io.out.w.valid <= io.lsu.w.valid @[Arbiter.scala 108:23]
    io.ifu.w.ready <= UInt<1>("h0") @[Arbiter.scala 110:23]
    io.lsu.w.ready <= io.out.w.ready @[Arbiter.scala 111:23]
    io.ifu.b.bits.id <= UInt<1>("h0") @[Arbiter.scala 113:23]
    io.ifu.b.bits.resp <= UInt<1>("h0") @[Arbiter.scala 114:23]
    io.ifu.b.valid <= UInt<1>("h0") @[Arbiter.scala 115:23]
    io.lsu.b.bits.id <= io.out.b.bits.id @[Arbiter.scala 117:23]
    io.lsu.b.bits.resp <= io.out.b.bits.resp @[Arbiter.scala 118:23]
    io.lsu.b.valid <= io.out.b.valid @[Arbiter.scala 119:23]
    io.out.b.ready <= io.lsu.b.ready @[Arbiter.scala 121:18]

  module DeviceArbiter :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>, last : UInt<1>, id : UInt<4>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>, id : UInt<4>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<4>}}}, out1 : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>, last : UInt<1>, id : UInt<4>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>, id : UInt<4>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<4>}}}, out2 : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>, last : UInt<1>, id : UInt<4>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>, id : UInt<4>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<4>}}}}

    node _CLINT_END_T = add(UInt<30>("h20000000"), UInt<16>("hbfff")) @[Arbiter.scala 133:31]
    node CLINT_END = tail(_CLINT_END_T, 1) @[Arbiter.scala 133:31]
    io.out1.ar.bits.addr <= io.in.ar.bits.addr @[Arbiter.scala 136:24]
    io.out1.ar.bits.len <= io.in.ar.bits.len @[Arbiter.scala 137:24]
    io.out1.ar.bits.size <= io.in.ar.bits.size @[Arbiter.scala 138:24]
    io.out1.ar.bits.burst <= io.in.ar.bits.burst @[Arbiter.scala 139:24]
    io.out2.ar.bits.addr <= io.in.ar.bits.addr @[Arbiter.scala 141:24]
    io.out2.ar.bits.len <= io.in.ar.bits.len @[Arbiter.scala 142:24]
    io.out2.ar.bits.size <= io.in.ar.bits.size @[Arbiter.scala 143:24]
    io.out2.ar.bits.burst <= io.in.ar.bits.burst @[Arbiter.scala 144:24]
    node _T = geq(io.in.ar.bits.addr, UInt<30>("h20000000")) @[Arbiter.scala 146:27]
    node _T_1 = leq(io.in.ar.bits.addr, CLINT_END) @[Arbiter.scala 146:64]
    node _T_2 = and(_T, _T_1) @[Arbiter.scala 146:42]
    when _T_2 : @[Arbiter.scala 146:77]
      io.out1.ar.bits.id <= UInt<1>("h0") @[Arbiter.scala 147:26]
      io.out1.ar.valid <= UInt<1>("h0") @[Arbiter.scala 148:26]
      io.out2.ar.bits.id <= UInt<2>("h3") @[Arbiter.scala 150:26]
      io.out2.ar.valid <= io.in.ar.valid @[Arbiter.scala 151:26]
      io.in.ar.ready <= io.out2.ar.ready @[Arbiter.scala 153:24]
    else :
      io.out1.ar.bits.id <= io.in.ar.bits.id @[Arbiter.scala 155:26]
      io.out1.ar.valid <= io.in.ar.valid @[Arbiter.scala 156:26]
      io.out2.ar.bits.id <= UInt<1>("h0") @[Arbiter.scala 158:26]
      io.out2.ar.valid <= UInt<1>("h0") @[Arbiter.scala 159:26]
      io.in.ar.ready <= io.out1.ar.ready @[Arbiter.scala 161:24]
    node _T_3 = bits(io.out2.r.bits.id, 1, 1) @[Arbiter.scala 164:25]
    when _T_3 : @[Arbiter.scala 164:29]
      io.out1.r.ready <= UInt<1>("h0") @[Arbiter.scala 165:25]
      io.out2.r.ready <= io.in.r.ready @[Arbiter.scala 166:25]
      node _io_in_r_bits_id_T = bits(io.out2.r.bits.id, 0, 0) @[Arbiter.scala 168:46]
      io.in.r.bits.id <= _io_in_r_bits_id_T @[Arbiter.scala 168:26]
      io.in.r.bits.data <= io.out2.r.bits.data @[Arbiter.scala 169:26]
      io.in.r.bits.resp <= io.out2.r.bits.resp @[Arbiter.scala 170:26]
      io.in.r.bits.last <= io.out2.r.bits.last @[Arbiter.scala 171:26]
      io.in.r.valid <= io.out2.r.valid @[Arbiter.scala 172:26]
    else :
      io.out1.r.ready <= io.in.r.ready @[Arbiter.scala 174:25]
      io.out2.r.ready <= UInt<1>("h0") @[Arbiter.scala 175:25]
      io.in.r.bits.id <= io.out1.r.bits.id @[Arbiter.scala 177:26]
      io.in.r.bits.data <= io.out1.r.bits.data @[Arbiter.scala 178:26]
      io.in.r.bits.resp <= io.out1.r.bits.resp @[Arbiter.scala 179:26]
      io.in.r.bits.last <= io.out1.r.bits.last @[Arbiter.scala 180:26]
      io.in.r.valid <= io.out1.r.valid @[Arbiter.scala 181:26]
    io.out1.aw.bits.addr <= io.in.aw.bits.addr @[Arbiter.scala 184:24]
    io.out1.aw.bits.len <= io.in.aw.bits.len @[Arbiter.scala 185:24]
    io.out1.aw.bits.size <= io.in.aw.bits.size @[Arbiter.scala 186:24]
    io.out1.aw.bits.burst <= io.in.aw.bits.burst @[Arbiter.scala 187:24]
    io.out2.aw.bits.addr <= io.in.aw.bits.addr @[Arbiter.scala 189:24]
    io.out2.aw.bits.len <= io.in.aw.bits.len @[Arbiter.scala 190:24]
    io.out2.aw.bits.size <= io.in.aw.bits.size @[Arbiter.scala 191:24]
    io.out2.aw.bits.burst <= io.in.aw.bits.burst @[Arbiter.scala 192:24]
    node _T_4 = geq(io.in.aw.bits.addr, UInt<30>("h20000000")) @[Arbiter.scala 194:27]
    node _T_5 = leq(io.in.aw.bits.addr, CLINT_END) @[Arbiter.scala 194:64]
    node _T_6 = and(_T_4, _T_5) @[Arbiter.scala 194:42]
    when _T_6 : @[Arbiter.scala 194:77]
      io.out1.aw.bits.id <= UInt<1>("h0") @[Arbiter.scala 195:26]
      io.out1.aw.valid <= UInt<1>("h0") @[Arbiter.scala 196:26]
      io.out2.aw.bits.id <= UInt<2>("h3") @[Arbiter.scala 198:26]
      io.out2.aw.valid <= io.in.aw.valid @[Arbiter.scala 199:26]
      io.in.aw.ready <= io.out2.aw.ready @[Arbiter.scala 201:24]
    else :
      io.out1.aw.bits.id <= io.in.aw.bits.id @[Arbiter.scala 203:26]
      io.out1.aw.valid <= io.in.aw.valid @[Arbiter.scala 204:26]
      io.out2.aw.bits.id <= UInt<1>("h0") @[Arbiter.scala 206:26]
      io.out2.aw.valid <= UInt<1>("h0") @[Arbiter.scala 207:26]
      io.in.aw.ready <= io.out1.aw.ready @[Arbiter.scala 209:24]
    io.out1.w.bits.data <= io.in.w.bits.data @[Arbiter.scala 212:23]
    io.out1.w.bits.last <= io.in.w.bits.last @[Arbiter.scala 213:24]
    io.out1.w.bits.strb <= io.in.w.bits.strb @[Arbiter.scala 214:23]
    io.out2.w.bits.data <= io.in.w.bits.data @[Arbiter.scala 216:23]
    io.out2.w.bits.last <= io.in.w.bits.last @[Arbiter.scala 217:24]
    io.out2.w.bits.strb <= io.in.w.bits.strb @[Arbiter.scala 218:23]
    node _T_7 = geq(io.in.aw.bits.addr, UInt<30>("h20000000")) @[Arbiter.scala 220:27]
    node _T_8 = leq(io.in.aw.bits.addr, CLINT_END) @[Arbiter.scala 220:64]
    node _T_9 = and(_T_7, _T_8) @[Arbiter.scala 220:42]
    when _T_9 : @[Arbiter.scala 220:77]
      io.out1.w.bits.id <= UInt<1>("h0") @[Arbiter.scala 221:25]
      io.out1.w.valid <= UInt<1>("h0") @[Arbiter.scala 222:25]
      io.out2.w.bits.id <= UInt<2>("h3") @[Arbiter.scala 224:25]
      io.out2.w.valid <= io.in.w.valid @[Arbiter.scala 225:25]
      io.in.w.ready <= io.out2.w.ready @[Arbiter.scala 227:23]
    else :
      io.out1.w.bits.id <= io.in.w.bits.id @[Arbiter.scala 229:25]
      io.out1.w.valid <= io.in.w.valid @[Arbiter.scala 230:25]
      io.out2.w.bits.id <= UInt<1>("h0") @[Arbiter.scala 232:25]
      io.out2.w.valid <= UInt<1>("h0") @[Arbiter.scala 233:25]
      io.in.w.ready <= io.out1.w.ready @[Arbiter.scala 235:23]
    node _T_10 = bits(io.out2.b.bits.id, 1, 1) @[Arbiter.scala 239:25]
    when _T_10 : @[Arbiter.scala 239:29]
      node _io_in_b_bits_id_T = bits(io.out2.b.bits.id, 0, 0) @[Arbiter.scala 240:44]
      io.in.b.bits.id <= _io_in_b_bits_id_T @[Arbiter.scala 240:24]
      io.in.b.bits.resp <= io.out2.b.bits.resp @[Arbiter.scala 241:24]
      io.in.b.valid <= io.out2.b.valid @[Arbiter.scala 242:24]
      io.out1.b.ready <= UInt<1>("h0") @[Arbiter.scala 244:24]
      io.out2.b.ready <= io.in.b.ready @[Arbiter.scala 245:24]
    else :
      io.in.b.bits.id <= io.out1.b.bits.id @[Arbiter.scala 247:24]
      io.in.b.bits.resp <= io.out1.b.bits.resp @[Arbiter.scala 248:24]
      io.in.b.valid <= io.out1.b.valid @[Arbiter.scala 249:24]
      io.out1.b.ready <= io.in.b.ready @[Arbiter.scala 251:24]
      io.out2.b.ready <= UInt<1>("h0") @[Arbiter.scala 252:24]

  module Crossbar :
    input clock : Clock
    input reset : Reset
    output io : { flip in1 : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}}, flip in2 : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}}, out1 : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>, last : UInt<1>, id : UInt<4>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>, id : UInt<4>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<4>}}}, out2 : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>, last : UInt<1>, id : UInt<4>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>, len : UInt<8>, size : UInt<3>, burst : UInt<2>, id : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>, last : UInt<1>, id : UInt<4>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>, id : UInt<4>}}}, hitrate_i : UInt<64>, hitrate_d : UInt<64>, flip flush_i : UInt<1>, flip flush_d : UInt<1>}

    node _CLINT_END_T = add(UInt<30>("h20000000"), UInt<16>("hbfff")) @[Crossbar.scala 19:33]
    node CLINT_END = tail(_CLINT_END_T, 1) @[Crossbar.scala 19:33]
    inst ICache of ICache @[Crossbar.scala 23:22]
    ICache.clock <= clock
    ICache.reset <= reset
    inst ICacheRAM of ICacheRAM @[Crossbar.scala 24:25]
    ICacheRAM.clock <= clock
    ICacheRAM.reset <= reset
    inst DCache of DCache @[Crossbar.scala 25:22]
    DCache.clock <= clock
    DCache.reset <= reset
    inst ICacheRAM_1 of ICacheRAM_1 @[Crossbar.scala 26:25]
    ICacheRAM_1.clock <= clock
    ICacheRAM_1.reset <= reset
    inst CacheArbiter of CacheArbiter @[Crossbar.scala 27:23]
    CacheArbiter.clock <= clock
    CacheArbiter.reset <= reset
    inst DeviceArbiter of DeviceArbiter @[Crossbar.scala 28:24]
    DeviceArbiter.clock <= clock
    DeviceArbiter.reset <= reset
    wire out1 : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}} @[Crossbar.scala 30:18]
    wire out2 : { ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, resp : UInt<2>}}, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { addr : UInt<32>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<64>, strb : UInt<8>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { resp : UInt<2>}}} @[Crossbar.scala 31:18]
    io.hitrate_i <= ICache.io.hitrate @[Crossbar.scala 33:17]
    io.hitrate_d <= DCache.io.hitrate @[Crossbar.scala 34:17]
    wire clint : UInt<1> @[Crossbar.scala 37:19]
    node _clint_T = geq(out2.ar.bits.addr, UInt<30>("h20000000")) @[Crossbar.scala 38:32]
    node _clint_T_1 = leq(out2.ar.bits.addr, CLINT_END) @[Crossbar.scala 38:70]
    node _clint_T_2 = and(_clint_T, _clint_T_1) @[Crossbar.scala 38:48]
    node _clint_T_3 = geq(out2.aw.bits.addr, UInt<30>("h20000000")) @[Crossbar.scala 38:108]
    node _clint_T_4 = leq(out2.aw.bits.addr, CLINT_END) @[Crossbar.scala 38:146]
    node _clint_T_5 = and(_clint_T_3, _clint_T_4) @[Crossbar.scala 38:124]
    node _clint_T_6 = or(_clint_T_2, _clint_T_5) @[Crossbar.scala 38:85]
    clint <= _clint_T_6 @[Crossbar.scala 38:10]
    out1 <= io.in1 @[Crossbar.scala 40:11]
    ICache.io.in <= out1 @[Crossbar.scala 41:9]
    ICache.io.ram <= ICacheRAM.io @[Crossbar.scala 42:15]
    ICache.io.id <= UInt<1>("h0") @[Crossbar.scala 43:15]
    ICache.io.flush <= io.flush_i @[Crossbar.scala 44:17]
    out2 <= io.in2 @[Crossbar.scala 47:11]
    DCache.io.in <= out2 @[Crossbar.scala 48:9]
    DCache.io.ram <= ICacheRAM_1.io @[Crossbar.scala 49:15]
    DCache.io.id <= UInt<1>("h1") @[Crossbar.scala 50:15]
    DCache.io.flush <= io.flush_d @[Crossbar.scala 51:17]
    node _T = geq(out2.ar.bits.addr, UInt<32>("ha0000000")) @[Crossbar.scala 52:41]
    node _T_1 = geq(out2.aw.bits.addr, UInt<32>("ha0000000")) @[Crossbar.scala 52:79]
    node _T_2 = or(_T, _T_1) @[Crossbar.scala 52:57]
    node _T_3 = or(_T_2, clint) @[Crossbar.scala 52:95]
    DCache.io.uncache <= _T_3 @[Crossbar.scala 52:20]
    CacheArbiter.io.ifu <= ICache.io.mem @[Crossbar.scala 55:16]
    CacheArbiter.io.lsu <= DCache.io.mem @[Crossbar.scala 56:16]
    DeviceArbiter.io.in <= CacheArbiter.io.out @[Crossbar.scala 59:16]
    DeviceArbiter.io.out1.b <= io.out1.b @[Crossbar.scala 60:12]
    io.out1.w.bits <= DeviceArbiter.io.out1.w.bits @[Crossbar.scala 60:12]
    io.out1.w.valid <= DeviceArbiter.io.out1.w.valid @[Crossbar.scala 60:12]
    DeviceArbiter.io.out1.w.ready <= io.out1.w.ready @[Crossbar.scala 60:12]
    io.out1.aw.bits <= DeviceArbiter.io.out1.aw.bits @[Crossbar.scala 60:12]
    io.out1.aw.valid <= DeviceArbiter.io.out1.aw.valid @[Crossbar.scala 60:12]
    DeviceArbiter.io.out1.aw.ready <= io.out1.aw.ready @[Crossbar.scala 60:12]
    DeviceArbiter.io.out1.r <= io.out1.r @[Crossbar.scala 60:12]
    io.out1.ar.bits <= DeviceArbiter.io.out1.ar.bits @[Crossbar.scala 60:12]
    io.out1.ar.valid <= DeviceArbiter.io.out1.ar.valid @[Crossbar.scala 60:12]
    DeviceArbiter.io.out1.ar.ready <= io.out1.ar.ready @[Crossbar.scala 60:12]
    DeviceArbiter.io.out2.b <= io.out2.b @[Crossbar.scala 61:12]
    io.out2.w.bits <= DeviceArbiter.io.out2.w.bits @[Crossbar.scala 61:12]
    io.out2.w.valid <= DeviceArbiter.io.out2.w.valid @[Crossbar.scala 61:12]
    DeviceArbiter.io.out2.w.ready <= io.out2.w.ready @[Crossbar.scala 61:12]
    io.out2.aw.bits <= DeviceArbiter.io.out2.aw.bits @[Crossbar.scala 61:12]
    io.out2.aw.valid <= DeviceArbiter.io.out2.aw.valid @[Crossbar.scala 61:12]
    DeviceArbiter.io.out2.aw.ready <= io.out2.aw.ready @[Crossbar.scala 61:12]
    DeviceArbiter.io.out2.r <= io.out2.r @[Crossbar.scala 61:12]
    io.out2.ar.bits <= DeviceArbiter.io.out2.ar.bits @[Crossbar.scala 61:12]
    io.out2.ar.valid <= DeviceArbiter.io.out2.ar.valid @[Crossbar.scala 61:12]
    DeviceArbiter.io.out2.ar.ready <= io.out2.ar.ready @[Crossbar.scala 61:12]

  module top :
    input clock : Clock
    input reset : UInt<1>
    output io : { pc : UInt<64>, valid : UInt<1>, hitrate_i : UInt<64>, hitrate_d : UInt<64>, flip mul_sel : UInt<1>, timer_diff_skip : UInt<1>, B_num : UInt<64>, B_Error : UInt<64>, block_num : UInt<64>, mul_num : UInt<64>, div_num : UInt<64>}

    inst ifu of IFU @[top.scala 19:19]
    ifu.clock <= clock
    ifu.reset <= reset
    inst idu of IDU @[top.scala 20:19]
    idu.clock <= clock
    idu.reset <= reset
    inst exu of EXU @[top.scala 21:19]
    exu.clock <= clock
    exu.reset <= reset
    inst wbu of WBU @[top.scala 22:19]
    wbu.clock <= clock
    wbu.reset <= reset
    inst gpr of GPR @[top.scala 23:19]
    gpr.clock <= clock
    gpr.reset <= reset
    inst csr of CSR @[top.scala 24:19]
    csr.clock <= clock
    csr.reset <= reset
    inst sram of AXI4SRAM @[top.scala 25:20]
    sram.clock <= clock
    sram.reset <= reset
    inst clint of CLINT @[top.scala 26:21]
    clint.clock <= clock
    clint.reset <= reset
    inst scoreboard of ScoreBoard @[top.scala 27:26]
    scoreboard.clock <= clock
    scoreboard.reset <= reset
    idu.io.sb <= scoreboard.io.ID @[top.scala 29:21]
    scoreboard.io.WB.clearidx <= wbu.io.sb.clearidx @[top.scala 30:21]
    scoreboard.io.flush <= csr.io.irq @[top.scala 31:24]
    ifu.io.pc_dnpc <= wbu.io.pc_dnpc @[top.scala 32:19]
    ifu.io.clearJump <= wbu.io.isJump @[top.scala 33:21]
    ifu.io.irq_nextpc <= csr.io.next_pc @[top.scala 34:22]
    ifu.io.irq <= csr.io.irq @[top.scala 35:15]
    ifu.io.real_pc <= exu.io.out.bits.pc_dnpc @[top.scala 36:19]
    ifu.io.p_error <= exu.io.p_error @[top.scala 37:19]
    idu.io.in <= ifu.io.out @[top.scala 38:14]
    node _idu_io_flush_T = or(csr.io.irq, exu.io.p_error) @[top.scala 39:31]
    idu.io.flush <= _idu_io_flush_T @[top.scala 39:17]
    exu.io.in <= idu.io.out @[top.scala 40:14]
    exu.io.gpr <= gpr.io.r @[top.scala 41:15]
    exu.io.csr <= csr.io.r @[top.scala 42:15]
    csr.io.clint.mtip <= clint.io.mtip @[top.scala 43:22]
    csr.io.clint.mtime <= clint.io.mtime @[top.scala 44:23]
    clint.io.en_mtip <= csr.io.en_mtip @[top.scala 45:19]
    exu.io.flush <= csr.io.irq @[top.scala 46:17]
    csr.io.irq_pc <= wbu.io.pc_dnpc @[top.scala 47:19]
    wbu.io.in <= exu.io.out @[top.scala 48:14]
    gpr.io.w.val_w <= wbu.io.gpr.val_w @[top.scala 49:15]
    gpr.io.w.en_w <= wbu.io.gpr.en_w @[top.scala 49:15]
    gpr.io.w.idx_w <= wbu.io.gpr.idx_w @[top.scala 49:15]
    csr.io.w.epc <= wbu.io.csr.epc @[top.scala 50:15]
    csr.io.w.no <= wbu.io.csr.no @[top.scala 50:15]
    csr.io.w.val_w <= wbu.io.csr.val_w @[top.scala 50:15]
    csr.io.w.idx_w <= wbu.io.csr.idx_w @[top.scala 50:15]
    csr.io.w.en_w <= wbu.io.csr.en_w @[top.scala 50:15]
    io.valid <= wbu.io.valid @[top.scala 52:13]
    io.pc <= wbu.io.pc_dnpc @[top.scala 53:10]
    inst crossbar of Crossbar @[top.scala 55:24]
    crossbar.clock <= clock
    crossbar.reset <= reset
    crossbar.io.in1 <= ifu.io.lm @[top.scala 56:20]
    crossbar.io.in2 <= exu.io.lm @[top.scala 57:20]
    sram.io <= crossbar.io.out1 @[top.scala 58:21]
    clint.io.in <= crossbar.io.out2 @[top.scala 59:21]
    node _crossbar_io_flush_i_T = or(csr.io.irq, exu.io.p_error) @[top.scala 60:36]
    crossbar.io.flush_i <= _crossbar_io_flush_i_T @[top.scala 60:24]
    crossbar.io.flush_d <= csr.io.irq @[top.scala 61:24]
    io.hitrate_i <= crossbar.io.hitrate_i @[top.scala 64:17]
    io.hitrate_d <= crossbar.io.hitrate_d @[top.scala 65:17]
    exu.io.mul_sel <= io.mul_sel @[top.scala 67:19]
    node _io_timer_diff_skip_T = or(clint.io.skip, csr.io.irq) @[top.scala 68:41]
    io.timer_diff_skip <= _io_timer_diff_skip_T @[top.scala 68:24]
    io.hitrate_i <= crossbar.io.hitrate_i @[top.scala 70:18]
    io.hitrate_d <= crossbar.io.hitrate_d @[top.scala 71:18]
    exu.io.bypass_idx <= wbu.io.bypass_idx @[top.scala 74:23]
    exu.io.bypass_data <= wbu.io.bypass_data @[top.scala 75:24]
    io.B_num <= ifu.io.B_num @[top.scala 78:14]
    io.B_Error <= ifu.io.B_Error @[top.scala 79:16]
    io.block_num <= ifu.io.block_num @[top.scala 82:18]
    io.mul_num <= exu.io.mul_num @[top.scala 85:16]
    io.div_num <= exu.io.div_num @[top.scala 86:16]

